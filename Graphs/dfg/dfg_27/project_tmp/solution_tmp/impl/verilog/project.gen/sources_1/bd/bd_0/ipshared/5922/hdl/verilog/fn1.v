// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.978000,HLS_SYN_LAT=87,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3565,HLS_SYN_LUT=3083,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_11,
        ap_return
);

parameter    ap_ST_fsm_state1 = 88'd1;
parameter    ap_ST_fsm_state2 = 88'd2;
parameter    ap_ST_fsm_state3 = 88'd4;
parameter    ap_ST_fsm_state4 = 88'd8;
parameter    ap_ST_fsm_state5 = 88'd16;
parameter    ap_ST_fsm_state6 = 88'd32;
parameter    ap_ST_fsm_state7 = 88'd64;
parameter    ap_ST_fsm_state8 = 88'd128;
parameter    ap_ST_fsm_state9 = 88'd256;
parameter    ap_ST_fsm_state10 = 88'd512;
parameter    ap_ST_fsm_state11 = 88'd1024;
parameter    ap_ST_fsm_state12 = 88'd2048;
parameter    ap_ST_fsm_state13 = 88'd4096;
parameter    ap_ST_fsm_state14 = 88'd8192;
parameter    ap_ST_fsm_state15 = 88'd16384;
parameter    ap_ST_fsm_state16 = 88'd32768;
parameter    ap_ST_fsm_state17 = 88'd65536;
parameter    ap_ST_fsm_state18 = 88'd131072;
parameter    ap_ST_fsm_state19 = 88'd262144;
parameter    ap_ST_fsm_state20 = 88'd524288;
parameter    ap_ST_fsm_state21 = 88'd1048576;
parameter    ap_ST_fsm_state22 = 88'd2097152;
parameter    ap_ST_fsm_state23 = 88'd4194304;
parameter    ap_ST_fsm_state24 = 88'd8388608;
parameter    ap_ST_fsm_state25 = 88'd16777216;
parameter    ap_ST_fsm_state26 = 88'd33554432;
parameter    ap_ST_fsm_state27 = 88'd67108864;
parameter    ap_ST_fsm_state28 = 88'd134217728;
parameter    ap_ST_fsm_state29 = 88'd268435456;
parameter    ap_ST_fsm_state30 = 88'd536870912;
parameter    ap_ST_fsm_state31 = 88'd1073741824;
parameter    ap_ST_fsm_state32 = 88'd2147483648;
parameter    ap_ST_fsm_state33 = 88'd4294967296;
parameter    ap_ST_fsm_state34 = 88'd8589934592;
parameter    ap_ST_fsm_state35 = 88'd17179869184;
parameter    ap_ST_fsm_state36 = 88'd34359738368;
parameter    ap_ST_fsm_state37 = 88'd68719476736;
parameter    ap_ST_fsm_state38 = 88'd137438953472;
parameter    ap_ST_fsm_state39 = 88'd274877906944;
parameter    ap_ST_fsm_state40 = 88'd549755813888;
parameter    ap_ST_fsm_state41 = 88'd1099511627776;
parameter    ap_ST_fsm_state42 = 88'd2199023255552;
parameter    ap_ST_fsm_state43 = 88'd4398046511104;
parameter    ap_ST_fsm_state44 = 88'd8796093022208;
parameter    ap_ST_fsm_state45 = 88'd17592186044416;
parameter    ap_ST_fsm_state46 = 88'd35184372088832;
parameter    ap_ST_fsm_state47 = 88'd70368744177664;
parameter    ap_ST_fsm_state48 = 88'd140737488355328;
parameter    ap_ST_fsm_state49 = 88'd281474976710656;
parameter    ap_ST_fsm_state50 = 88'd562949953421312;
parameter    ap_ST_fsm_state51 = 88'd1125899906842624;
parameter    ap_ST_fsm_state52 = 88'd2251799813685248;
parameter    ap_ST_fsm_state53 = 88'd4503599627370496;
parameter    ap_ST_fsm_state54 = 88'd9007199254740992;
parameter    ap_ST_fsm_state55 = 88'd18014398509481984;
parameter    ap_ST_fsm_state56 = 88'd36028797018963968;
parameter    ap_ST_fsm_state57 = 88'd72057594037927936;
parameter    ap_ST_fsm_state58 = 88'd144115188075855872;
parameter    ap_ST_fsm_state59 = 88'd288230376151711744;
parameter    ap_ST_fsm_state60 = 88'd576460752303423488;
parameter    ap_ST_fsm_state61 = 88'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 88'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 88'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 88'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 88'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 88'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 88'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 88'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 88'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 88'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 88'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 88'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 88'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 88'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 88'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 88'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 88'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 88'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 88'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 88'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 88'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 88'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 88'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 88'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 88'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 88'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 88'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 88'd154742504910672534362390528;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
input  [63:0] p_11;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [87:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [54:0] trunc_ln_reg_303;
wire    ap_CS_fsm_state5;
wire   [55:0] sub_ln25_fu_107_p2;
reg   [55:0] sub_ln25_reg_308;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] add_ln29_fu_122_p2;
reg   [63:0] add_ln29_reg_325;
reg   [2:0] tmp_1_reg_330;
wire    ap_CS_fsm_state74;
reg   [0:0] tmp_reg_335;
wire   [1:0] trunc_ln27_fu_154_p1;
reg   [1:0] trunc_ln27_reg_340;
wire   [63:0] add_ln27_1_fu_158_p2;
reg   [63:0] add_ln27_1_reg_345;
wire   [63:0] or_ln27_fu_204_p2;
reg   [63:0] or_ln27_reg_350;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire   [63:0] grp_fu_215_p2;
reg   [63:0] mul_ln30_reg_360;
wire    ap_CS_fsm_state80;
wire  signed [63:0] add_ln30_fu_226_p2;
reg  signed [63:0] add_ln30_reg_365;
wire    ap_CS_fsm_state81;
reg   [0:0] tmp_2_reg_370;
wire    ap_CS_fsm_state82;
wire   [128:0] grp_fu_242_p2;
reg   [128:0] mul_ln30_1_reg_381;
wire    ap_CS_fsm_state86;
reg   [31:0] tmp_3_reg_387;
wire    ap_CS_fsm_state87;
wire   [63:0] grp_fu_88_p0;
wire   [65:0] grp_fu_88_p1;
wire   [128:0] grp_fu_88_p2;
wire   [55:0] zext_ln25_fu_104_p1;
wire  signed [63:0] grp_fu_116_p1;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_fu_116_p2;
wire   [63:0] shl_ln27_fu_131_p2;
wire   [7:0] and_ln_fu_164_p6;
wire   [63:0] add_ln27_fu_179_p2;
wire   [63:0] zext_ln27_fu_175_p1;
wire   [0:0] icmp_ln28_fu_189_p2;
wire   [63:0] grp_fu_127_p2;
wire   [63:0] zext_ln28_fu_194_p1;
wire   [63:0] sub_ln27_fu_183_p2;
wire   [63:0] xor_ln28_fu_198_p2;
wire  signed [63:0] grp_fu_215_p0;
wire   [6:0] grp_fu_215_p1;
wire   [63:0] xor_ln30_fu_221_p2;
wire   [65:0] grp_fu_242_p1;
wire   [128:0] sub_ln30_fu_248_p2;
wire    ap_CS_fsm_state88;
wire   [31:0] tmp_4_fu_263_p4;
wire   [31:0] select_ln30_fu_272_p3;
wire   [31:0] sub_ln30_1_fu_278_p2;
reg    grp_fu_116_ap_start;
wire    grp_fu_116_ap_done;
reg    grp_fu_127_ap_start;
wire    grp_fu_127_ap_done;
reg   [87:0] ap_NS_fsm;
wire   [128:0] grp_fu_88_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 88'd1;
end

fn1_mul_64ns_66ns_129_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 129 ))
mul_64ns_66ns_129_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_88_p0),
    .din1(grp_fu_88_p1),
    .ce(1'b1),
    .dout(grp_fu_88_p2)
);

fn1_urem_64ns_64s_64_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
urem_64ns_64s_64_68_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_116_ap_start),
    .done(grp_fu_116_ap_done),
    .din0(p_11),
    .din1(grp_fu_116_p1),
    .ce(1'b1),
    .dout(grp_fu_116_p2)
);

fn1_urem_64ns_64ns_64_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
urem_64ns_64ns_64_68_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_127_ap_start),
    .done(grp_fu_127_ap_done),
    .din0(p_11),
    .din1(add_ln29_reg_325),
    .ce(1'b1),
    .dout(grp_fu_127_p2)
);

fn1_mul_64s_7ns_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 64 ))
mul_64s_7ns_64_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_215_p0),
    .din1(grp_fu_215_p1),
    .ce(1'b1),
    .dout(grp_fu_215_p2)
);

fn1_mul_64s_66ns_129_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 129 ))
mul_64s_66ns_129_5_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln30_reg_365),
    .din1(grp_fu_242_p1),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        add_ln27_1_reg_345[63 : 3] <= add_ln27_1_fu_158_p2[63 : 3];
        tmp_1_reg_330 <= {{grp_fu_116_p2[7:5]}};
        tmp_reg_335 <= grp_fu_116_p2[32'd3];
        trunc_ln27_reg_340 <= trunc_ln27_fu_154_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln29_reg_325 <= add_ln29_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        add_ln30_reg_365 <= add_ln30_fu_226_p2;
        tmp_2_reg_370 <= add_ln30_fu_226_p2[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        mul_ln30_1_reg_381 <= grp_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        mul_ln30_reg_360 <= grp_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        or_ln27_reg_350 <= or_ln27_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sub_ln25_reg_308 <= sub_ln25_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        tmp_3_reg_387 <= {{sub_ln30_fu_248_p2[105:74]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln_reg_303 <= {{grp_fu_88_p2[128:74]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_116_ap_start = 1'b1;
    end else begin
        grp_fu_116_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_127_ap_start = 1'b1;
    end else begin
        grp_fu_127_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_1_fu_158_p2 = (shl_ln27_fu_131_p2 + 64'd443);

assign add_ln27_fu_179_p2 = (add_ln27_1_reg_345 + p);

assign add_ln29_fu_122_p2 = (p + 64'd408);

assign add_ln30_fu_226_p2 = (mul_ln30_reg_360 + xor_ln30_fu_221_p2);

assign and_ln_fu_164_p6 = {{{{{tmp_1_reg_330}, {1'd0}}, {tmp_reg_335}}, {1'd0}}, {trunc_ln27_reg_340}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_return = ((tmp_2_reg_370[0:0] == 1'b1) ? tmp_3_reg_387 : sub_ln30_1_fu_278_p2);

assign grp_fu_116_p1 = $signed(sub_ln25_reg_308);

assign grp_fu_215_p0 = (or_ln27_reg_350 | 64'd59950);

assign grp_fu_215_p1 = 64'd38;

assign grp_fu_242_p1 = 129'd20509734996176526444;

assign grp_fu_88_p0 = grp_fu_88_p00;

assign grp_fu_88_p00 = p;

assign grp_fu_88_p1 = 129'd25982759190479478480;

assign icmp_ln28_fu_189_p2 = ((p == 64'd0) ? 1'b1 : 1'b0);

assign or_ln27_fu_204_p2 = (xor_ln28_fu_198_p2 | sub_ln27_fu_183_p2);

assign select_ln30_fu_272_p3 = ((tmp_2_reg_370[0:0] == 1'b1) ? tmp_3_reg_387 : tmp_4_fu_263_p4);

assign shl_ln27_fu_131_p2 = p << 64'd3;

assign sub_ln25_fu_107_p2 = (56'd398189807 - zext_ln25_fu_104_p1);

assign sub_ln27_fu_183_p2 = (add_ln27_fu_179_p2 - zext_ln27_fu_175_p1);

assign sub_ln30_1_fu_278_p2 = (32'd0 - select_ln30_fu_272_p3);

assign sub_ln30_fu_248_p2 = (129'd0 - mul_ln30_1_reg_381);

assign tmp_4_fu_263_p4 = {{mul_ln30_1_reg_381[105:74]}};

assign trunc_ln27_fu_154_p1 = grp_fu_116_p2[1:0];

assign xor_ln28_fu_198_p2 = (zext_ln28_fu_194_p1 ^ grp_fu_127_p2);

assign xor_ln30_fu_221_p2 = (p_11 ^ 64'd18446744073709551615);

assign zext_ln25_fu_104_p1 = trunc_ln_reg_303;

assign zext_ln27_fu_175_p1 = and_ln_fu_164_p6;

assign zext_ln28_fu_194_p1 = icmp_ln28_fu_189_p2;

always @ (posedge ap_clk) begin
    add_ln27_1_reg_345[2:0] <= 3'b011;
end

endmodule //fn1
