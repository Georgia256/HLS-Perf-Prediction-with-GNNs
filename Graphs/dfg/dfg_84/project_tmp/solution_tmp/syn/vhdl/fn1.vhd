-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1301,HLS_SYN_LUT=2319,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_47C5A6FFFC811942 : STD_LOGIC_VECTOR (63 downto 0) := "0100011111000101101001101111111111111100100000010001100101000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_3CA : STD_LOGIC_VECTOR (10 downto 0) := "01111001010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv43_7FF97167943 : STD_LOGIC_VECTOR (42 downto 0) := "1111111111110010111000101100111100101000011";
    constant ap_const_lv43_7FFFFFF7486 : STD_LOGIC_VECTOR (42 downto 0) := "1111111111111111111111111110111010010000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_85_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv6_reg_338 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln9_fu_96_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln9_reg_343 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sub_ln23_fu_148_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln23_reg_349 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_88_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv5_reg_364 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_374 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_11_fu_182_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_11_reg_380 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal urem_ln25_reg_385 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_reg_390 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_fu_296_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln26_reg_395 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal mul_ln27_reg_405 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_80_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_80_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_85_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_88_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_fu_102_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln23_fu_102_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln23_fu_102_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_108_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_116_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln23_fu_126_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln_fu_130_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln9_1_fu_99_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln23_fu_144_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_163_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_V_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_fu_196_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_209_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_212_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_231_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_235_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_205_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_247_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal r_V_fu_251_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_8_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_257_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln662_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_275_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln26_fu_293_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_fu_285_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_302_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal result_fu_318_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_80_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_163_ap_start : STD_LOGIC;
    signal grp_fu_163_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_312_p00 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_dadddsub_64ns_64ns_64_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_uitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_sitodp_32s_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_mul_8ns_8ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component fn1_urem_8ns_11ns_11_12_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component fn1_mul_11ns_32s_43_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;



begin
    dadddsub_64ns_64ns_64_7_full_dsp_1_U1 : component fn1_dadddsub_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_80_p0,
        din1 => grp_fu_80_p1,
        opcode => grp_fu_80_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_80_p2);

    uitodp_32ns_64_6_no_dsp_1_U2 : component fn1_uitodp_32ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_85_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_85_p1);

    sitodp_32s_64_6_no_dsp_1_U3 : component fn1_sitodp_32s_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_88_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_88_p1);

    mul_8ns_8ns_11_1_1_U4 : component fn1_mul_8ns_8ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        din0 => mul_ln23_fu_102_p0,
        din1 => mul_ln23_fu_102_p1,
        dout => mul_ln23_fu_102_p2);

    urem_8ns_11ns_11_12_seq_1_U5 : component fn1_urem_8ns_11ns_11_12_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_163_ap_start,
        done => grp_fu_163_ap_done,
        din0 => grp_fu_163_p0,
        din1 => grp_fu_163_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_163_p2);

    mul_11ns_32s_43_2_1_U6 : component fn1_mul_11ns_32s_43_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 43)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_312_p0,
        din1 => grp_fu_312_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_312_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_reg_369 <= grp_fu_80_p2;
                conv5_reg_364 <= grp_fu_88_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                conv6_reg_338 <= grp_fu_85_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                mul_ln27_reg_405 <= grp_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                or_ln26_reg_395 <= or_ln26_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sub_ln23_reg_349 <= sub_ln23_fu_148_p2;
                    zext_ln9_reg_343(7 downto 0) <= zext_ln9_fu_96_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_10_reg_374 <= data_V_fu_168_p1(62 downto 52);
                tmp_11_reg_380 <= tmp_11_fu_182_p1;
                tmp_reg_390 <= grp_fu_163_p2(10 downto 8);
                urem_ln25_reg_385 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    zext_ln9_reg_343(10 downto 8) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln510_fu_212_p2 <= std_logic_vector(unsigned(zext_ln510_fu_209_p1) + unsigned(ap_const_lv12_C01));
    and_ln_fu_130_p6 <= ((((tmp_2_fu_108_p3 & ap_const_lv2_0) & tmp_5_fu_116_p4) & ap_const_lv1_0) & trunc_ln23_fu_126_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(IEEE.numeric_std.resize(signed(result_fu_318_p2),64));

    data_V_fu_168_p1 <= grp_fu_80_p2;

    grp_fu_163_ap_start_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_163_ap_start <= ap_const_logic_1;
        else 
            grp_fu_163_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_163_p0 <= zext_ln9_reg_343(8 - 1 downto 0);
    grp_fu_163_p1 <= std_logic_vector(unsigned(zext_ln9_reg_343) + unsigned(ap_const_lv11_3CA));
    grp_fu_312_p0 <= grp_fu_312_p00(11 - 1 downto 0);
    grp_fu_312_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_302_p3),43));
    grp_fu_312_p1 <= ap_const_lv43_7FF97167943(32 - 1 downto 0);

    grp_fu_80_opcode_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_80_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_80_opcode <= ap_const_lv2_0;
        else 
            grp_fu_80_opcode <= "XX";
        end if; 
    end process;


    grp_fu_80_p0_assign_proc : process(conv6_reg_338, ap_CS_fsm_state7, conv5_reg_364, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_80_p0 <= conv5_reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_80_p0 <= conv6_reg_338;
        else 
            grp_fu_80_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_80_p1_assign_proc : process(ap_CS_fsm_state7, add_reg_369, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_80_p1 <= add_reg_369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_80_p1 <= ap_const_lv64_47C5A6FFFC811942;
        else 
            grp_fu_80_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_85_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p),32));
        grp_fu_88_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln23_reg_349),32));

    isNeg_fu_218_p3 <= add_ln510_fu_212_p2(11 downto 11);
    mantissa_fu_196_p4 <= ((ap_const_lv1_1 & tmp_11_reg_380) & ap_const_lv1_0);
    mul_ln23_fu_102_p0 <= zext_ln9_fu_96_p1(8 - 1 downto 0);
    mul_ln23_fu_102_p1 <= zext_ln9_fu_96_p1(8 - 1 downto 0);
    or_ln26_fu_296_p2 <= (val_fu_285_p3 or trunc_ln26_fu_293_p1);
    r_V_1_fu_257_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_205_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_247_p1(31-1 downto 0)))));
    r_V_fu_251_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_205_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_247_p1(31-1 downto 0)))));
    result_fu_318_p2 <= (mul_ln27_reg_405 xor ap_const_lv43_7FFFFFF7486);
        sext_ln1311_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_226_p2),12));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_243_p1),113));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_235_p3),32));

    sub_ln1311_fu_226_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_10_reg_374));
    sub_ln23_fu_148_p2 <= std_logic_vector(unsigned(zext_ln9_1_fu_99_p1) - unsigned(zext_ln23_fu_144_p1));
    tmp_11_fu_182_p1 <= data_V_fu_168_p1(52 - 1 downto 0);
    tmp_1_fu_302_p3 <= (tmp_reg_390 & or_ln26_reg_395);
    tmp_2_fu_108_p3 <= mul_ln23_fu_102_p2(10 downto 10);
    tmp_5_fu_116_p4 <= mul_ln23_fu_102_p2(7 downto 5);
    tmp_8_fu_263_p3 <= r_V_fu_251_p2(53 downto 53);
    tmp_9_fu_275_p4 <= r_V_1_fu_257_p2(60 downto 53);
    trunc_ln23_fu_126_p1 <= mul_ln23_fu_102_p2(4 - 1 downto 0);
    trunc_ln26_fu_293_p1 <= urem_ln25_reg_385(8 - 1 downto 0);
    ush_fu_235_p3 <= 
        sext_ln1311_fu_231_p1 when (isNeg_fu_218_p3(0) = '1') else 
        add_ln510_fu_212_p2;
    val_fu_285_p3 <= 
        zext_ln662_fu_271_p1 when (isNeg_fu_218_p3(0) = '1') else 
        tmp_9_fu_275_p4;
    zext_ln23_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_130_p6),12));
    zext_ln510_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_374),12));
    zext_ln662_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_263_p3),8));
    zext_ln68_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_196_p4),113));
    zext_ln9_1_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p),12));
    zext_ln9_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p),11));
end behav;
