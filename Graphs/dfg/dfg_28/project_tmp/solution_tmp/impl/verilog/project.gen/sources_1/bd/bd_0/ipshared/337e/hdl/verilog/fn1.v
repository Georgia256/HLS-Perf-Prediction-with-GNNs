// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.757875,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=646,HLS_SYN_LUT=568,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_7,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p;
input  [15:0] p_7;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] grp_fu_70_p2;
reg   [0:0] v_9_reg_155;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln18_fu_50_p2;
wire   [32:0] zext_ln18_1_fu_60_p1;
wire   [0:0] grp_fu_70_p0;
wire   [32:0] grp_fu_70_p1;
wire   [7:0] v_5_fu_46_p1;
wire   [16:0] zext_ln21_fu_80_p1;
wire   [16:0] add_ln21_fu_84_p2;
wire  signed [8:0] grp_fu_94_p0;
wire   [17:0] grp_fu_94_p1;
wire    ap_CS_fsm_state13;
wire   [7:0] grp_fu_94_p2;
wire   [7:0] trunc_ln20_fu_103_p1;
wire   [7:0] or_ln21_fu_107_p2;
wire   [0:0] trunc_ln11_fu_100_p1;
wire  signed [15:0] sext_ln21_1_fu_112_p1;
wire   [15:0] select_ln21_fu_116_p3;
reg    grp_fu_70_ap_start;
wire    grp_fu_70_ap_done;
reg    grp_fu_94_ap_start;
wire    grp_fu_94_ap_done;
reg   [12:0] ap_NS_fsm;
wire   [32:0] grp_fu_70_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

fn1_urem_1ns_33ns_1_5_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 1 ))
urem_1ns_33ns_1_5_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_70_ap_start),
    .done(grp_fu_70_ap_done),
    .din0(grp_fu_70_p0),
    .din1(grp_fu_70_p1),
    .ce(1'b1),
    .dout(grp_fu_70_p2)
);

fn1_srem_9s_18ns_8_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 8 ))
srem_9s_18ns_8_13_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_94_ap_start),
    .done(grp_fu_94_ap_done),
    .din0(grp_fu_94_p0),
    .din1(grp_fu_94_p1),
    .ce(1'b1),
    .dout(grp_fu_94_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v_9_reg_155 <= grp_fu_70_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_70_ap_start = 1'b1;
    end else begin
        grp_fu_70_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_94_ap_start = 1'b1;
    end else begin
        grp_fu_94_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_84_p2 = (zext_ln21_fu_80_p1 + 17'd180);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = ($signed(sext_ln21_1_fu_112_p1) + $signed(select_ln21_fu_116_p3));

assign grp_fu_70_p0 = grp_fu_70_p00;

assign grp_fu_70_p00 = icmp_ln18_fu_50_p2;

assign grp_fu_70_p1 = (zext_ln18_1_fu_60_p1 + 33'd4294962031);

assign grp_fu_94_p0 = $signed(v_5_fu_46_p1);

assign grp_fu_94_p1 = add_ln21_fu_84_p2;

assign icmp_ln18_fu_50_p2 = ((p == 8'd0) ? 1'b1 : 1'b0);

assign or_ln21_fu_107_p2 = (trunc_ln20_fu_103_p1 | p);

assign select_ln21_fu_116_p3 = ((trunc_ln11_fu_100_p1[0:0] == 1'b1) ? 16'd16456 : 16'd54631);

assign sext_ln21_1_fu_112_p1 = $signed(or_ln21_fu_107_p2);

assign trunc_ln11_fu_100_p1 = v_9_reg_155[0:0];

assign trunc_ln20_fu_103_p1 = grp_fu_94_p2[7:0];

assign v_5_fu_46_p1 = p_7[7:0];

assign zext_ln18_1_fu_60_p1 = p_7;

assign zext_ln21_fu_80_p1 = p_7;

endmodule //fn1
