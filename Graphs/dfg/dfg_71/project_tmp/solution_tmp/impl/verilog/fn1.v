// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.687000,HLS_SYN_LAT=22,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=883,HLS_SYN_LUT=919,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_5,
        p_9,
        p_11,
        p_15,
        ap_return
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
input  [15:0] p_5;
input  [31:0] p_9;
input  [15:0] p_11;
input  [15:0] p_15;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] trunc_ln17_fu_86_p1;
reg   [7:0] trunc_ln17_reg_181;
wire    ap_CS_fsm_state9;
wire   [7:0] or_ln20_fu_131_p2;
reg   [7:0] or_ln20_reg_196;
wire    ap_CS_fsm_state19;
wire   [5:0] grp_fu_96_p2;
reg   [5:0] sdiv_ln19_reg_201;
wire    ap_CS_fsm_state21;
wire   [7:0] trunc_ln18_fu_150_p1;
reg   [7:0] trunc_ln18_reg_206;
wire    ap_CS_fsm_state22;
wire   [7:0] grp_fu_112_p2;
reg   [7:0] sdiv_ln21_reg_211;
wire   [16:0] zext_ln17_1_fu_70_p1;
wire   [14:0] grp_fu_80_p0;
wire   [16:0] grp_fu_80_p1;
wire   [16:0] grp_fu_96_p0;
wire   [31:0] grp_fu_96_p1;
wire  signed [16:0] sext_ln21_fu_102_p1;
wire   [9:0] grp_fu_112_p0;
wire   [16:0] grp_fu_112_p1;
wire   [7:0] grp_fu_80_p2;
wire   [7:0] trunc_ln17_1_fu_118_p1;
wire   [7:0] add_ln17_fu_126_p2;
wire   [7:0] trunc_ln17_2_fu_122_p1;
wire   [5:0] trunc_ln20_fu_137_p1;
wire   [63:0] zext_ln18_fu_140_p1;
wire   [63:0] lshr_ln18_fu_144_p2;
wire    ap_CS_fsm_state23;
wire   [7:0] sub_ln20_fu_154_p2;
wire   [7:0] trunc_ln20_1_fu_158_p1;
wire   [7:0] v_fu_161_p2;
reg    grp_fu_80_ap_start;
wire    grp_fu_80_ap_done;
reg    grp_fu_96_ap_start;
wire    grp_fu_96_ap_done;
reg    grp_fu_112_ap_start;
wire    grp_fu_112_ap_done;
reg   [22:0] ap_NS_fsm;
wire   [31:0] grp_fu_96_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

fn1_udiv_15ns_17ns_8_19_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 8 ))
udiv_15ns_17ns_8_19_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_80_ap_start),
    .done(grp_fu_80_ap_done),
    .din0(grp_fu_80_p0),
    .din1(grp_fu_80_p1),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

fn1_sdiv_17ns_32ns_6_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 6 ))
sdiv_17ns_32ns_6_21_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_96_ap_start),
    .done(grp_fu_96_ap_done),
    .din0(grp_fu_96_p0),
    .din1(grp_fu_96_p1),
    .ce(1'b1),
    .dout(grp_fu_96_p2)
);

fn1_sdiv_10ns_17ns_8_14_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 8 ))
sdiv_10ns_17ns_8_14_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_112_ap_start),
    .done(grp_fu_112_ap_done),
    .din0(grp_fu_112_p0),
    .din1(grp_fu_112_p1),
    .ce(1'b1),
    .dout(grp_fu_112_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        or_ln20_reg_196 <= or_ln20_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        sdiv_ln19_reg_201 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        sdiv_ln21_reg_211 <= grp_fu_112_p2;
        trunc_ln18_reg_206 <= trunc_ln18_fu_150_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln17_reg_181 <= trunc_ln17_fu_86_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_112_ap_start = 1'b1;
    end else begin
        grp_fu_112_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_80_ap_start = 1'b1;
    end else begin
        grp_fu_80_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_96_ap_start = 1'b1;
    end else begin
        grp_fu_96_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_126_p2 = (trunc_ln17_1_fu_118_p1 + trunc_ln17_reg_181);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = $signed(v_fu_161_p2);

assign grp_fu_112_p0 = 17'd255;

assign grp_fu_112_p1 = ($signed(17'd830) - $signed(sext_ln21_fu_102_p1));

assign grp_fu_80_p0 = 17'd14899;

assign grp_fu_80_p1 = (zext_ln17_1_fu_70_p1 + 17'd721);

assign grp_fu_96_p0 = grp_fu_96_p00;

assign grp_fu_96_p00 = p_5;

assign grp_fu_96_p1 = (p_9 + 32'd480);

assign lshr_ln18_fu_144_p2 = 64'd4294949774 >> zext_ln18_fu_140_p1;

assign or_ln20_fu_131_p2 = (trunc_ln17_2_fu_122_p1 | add_ln17_fu_126_p2);

assign sext_ln21_fu_102_p1 = $signed(p_11);

assign sub_ln20_fu_154_p2 = (or_ln20_reg_196 - trunc_ln18_reg_206);

assign trunc_ln17_1_fu_118_p1 = p[7:0];

assign trunc_ln17_2_fu_122_p1 = grp_fu_80_p2[7:0];

assign trunc_ln17_fu_86_p1 = p_5[7:0];

assign trunc_ln18_fu_150_p1 = lshr_ln18_fu_144_p2[7:0];

assign trunc_ln20_1_fu_158_p1 = sdiv_ln21_reg_211[7:0];

assign trunc_ln20_fu_137_p1 = sdiv_ln19_reg_201[5:0];

assign v_fu_161_p2 = (sub_ln20_fu_154_p2 + trunc_ln20_1_fu_158_p1);

assign zext_ln17_1_fu_70_p1 = p_5;

assign zext_ln18_fu_140_p1 = trunc_ln20_fu_137_p1;

endmodule //fn1
