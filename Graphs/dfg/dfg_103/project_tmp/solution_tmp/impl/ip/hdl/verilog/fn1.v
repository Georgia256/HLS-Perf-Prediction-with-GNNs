// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.821869,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=484,HLS_SYN_LUT=540,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_7,
        ap_return
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p;
input  [31:0] p_7;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln20_fu_84_p2;
reg   [0:0] icmp_ln20_reg_143;
wire   [16:0] grp_fu_110_p2;
reg   [16:0] sdiv_ln21_reg_153;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [15:0] xor_ln18_fu_50_p2;
wire   [15:0] or_ln18_fu_60_p2;
wire   [29:0] or_ln_fu_66_p3;
wire  signed [30:0] sext_ln18_fu_74_p1;
wire   [30:0] zext_ln18_1_fu_56_p1;
wire   [30:0] add_ln18_fu_78_p2;
wire   [15:0] or_ln21_fu_90_p2;
wire   [16:0] or_ln1_fu_96_p3;
wire   [16:0] grp_fu_110_p0;
wire   [16:0] grp_fu_110_p1;
wire  signed [17:0] sext_ln21_fu_119_p1;
wire   [0:0] grp_fu_128_p0;
wire   [17:0] grp_fu_128_p1;
wire   [17:0] grp_fu_128_p2;
wire    ap_CS_fsm_state26;
reg    grp_fu_110_ap_start;
wire    grp_fu_110_ap_done;
reg    grp_fu_128_ap_start;
wire    grp_fu_128_ap_done;
reg   [25:0] ap_NS_fsm;
wire   [17:0] grp_fu_128_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
end

fn1_sdiv_17ns_17ns_17_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
sdiv_17ns_17ns_17_21_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_110_ap_start),
    .done(grp_fu_110_ap_done),
    .din0(grp_fu_110_p0),
    .din1(grp_fu_110_p1),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

fn1_urem_1ns_18ns_18_5_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
urem_1ns_18ns_18_5_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_128_ap_start),
    .done(grp_fu_128_ap_done),
    .din0(grp_fu_128_p0),
    .din1(grp_fu_128_p1),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln20_reg_143 <= icmp_ln20_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        sdiv_ln21_reg_153 <= grp_fu_110_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_110_ap_start = 1'b1;
    end else begin
        grp_fu_110_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_128_ap_start = 1'b1;
    end else begin
        grp_fu_128_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_78_p2 = ($signed(sext_ln18_fu_74_p1) + $signed(zext_ln18_1_fu_56_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_return = grp_fu_128_p2;

assign grp_fu_110_p0 = p;

assign grp_fu_110_p1 = (or_ln1_fu_96_p3 + 17'd49);

assign grp_fu_128_p0 = grp_fu_128_p00;

assign grp_fu_128_p00 = icmp_ln20_reg_143;

assign grp_fu_128_p1 = ($signed(18'd744) - $signed(sext_ln21_fu_119_p1));

assign icmp_ln20_fu_84_p2 = ((add_ln18_fu_78_p2 == 31'd18571) ? 1'b1 : 1'b0);

assign or_ln18_fu_60_p2 = (p | 16'd32152);

assign or_ln1_fu_96_p3 = {{1'd1}, {or_ln21_fu_90_p2}};

assign or_ln21_fu_90_p2 = (p | 16'd64877);

assign or_ln_fu_66_p3 = {{14'd11859}, {or_ln18_fu_60_p2}};

assign sext_ln18_fu_74_p1 = $signed(or_ln_fu_66_p3);

assign sext_ln21_fu_119_p1 = $signed(sdiv_ln21_reg_153);

assign xor_ln18_fu_50_p2 = (p ^ 16'd658);

assign zext_ln18_1_fu_56_p1 = xor_ln18_fu_50_p2;

endmodule //fn1
