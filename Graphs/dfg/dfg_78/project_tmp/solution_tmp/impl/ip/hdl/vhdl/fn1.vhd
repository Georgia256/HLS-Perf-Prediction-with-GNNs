-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (31 downto 0);
    p_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1050,HLS_SYN_LUT=1739,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_43AB9B43 : STD_LOGIC_VECTOR (31 downto 0) := "01000011101010111001101101000011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_B867 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011100001100111";
    constant ap_const_lv30_2360B04F : STD_LOGIC_VECTOR (29 downto 0) := "100011011000001011000001001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal xor_ln15_fu_116_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln15_reg_280 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_93_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv5_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal xor_ln13_fu_126_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal xor_ln13_reg_290 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_85_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_90_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_3_fu_158_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_reg_315 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_172_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_190_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_325 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_252_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_reg_330 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_80_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_80_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_90_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln14_fu_101_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_107_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln15_fu_113_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln15_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_107_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln13_fu_122_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal data_V_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_148_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_fu_162_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_166_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_180_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_fu_186_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_198_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_207_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_214_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_218_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_224_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln662_fu_238_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_242_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal result_V_2_fu_259_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_80_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_107_ap_start : STD_LOGIC;
    signal grp_fu_107_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_uitofp_32s_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_sitofp_64ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_srem_18ns_32ns_30_22_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component fn1_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_80_p0,
        din1 => grp_fu_80_p1,
        opcode => grp_fu_80_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_80_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component fn1_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv5_reg_285,
        din1 => ap_const_lv32_43AB9B43,
        ce => ap_const_logic_1,
        dout => grp_fu_85_p2);

    uitofp_32s_32_6_no_dsp_1_U3 : component fn1_uitofp_32s_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_90_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_90_p1);

    sitofp_64ns_32_6_no_dsp_1_U4 : component fn1_sitofp_64ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xor_ln15_reg_280,
        ce => ap_const_logic_1,
        dout => grp_fu_93_p1);

    srem_18ns_32ns_30_22_seq_1_U5 : component fn1_srem_18ns_32ns_30_22_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 32,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_107_ap_start,
        done => grp_fu_107_ap_done,
        din0 => grp_fu_107_p0,
        din1 => grp_fu_107_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_107_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                conv2_reg_305 <= grp_fu_90_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                conv5_reg_285 <= grp_fu_93_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                isNeg_reg_320 <= add_ln341_fu_166_p2(8 downto 8);
                p_Result_s_reg_310 <= data_V_fu_136_p1(31 downto 31);
                tmp_3_reg_315 <= tmp_3_fu_158_p1;
                ush_reg_325 <= ush_fu_190_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                mul_reg_300 <= grp_fu_85_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_96 <= grp_fu_80_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                val_reg_330 <= val_fu_252_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                xor_ln13_reg_290 <= xor_ln13_fu_126_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                xor_ln15_reg_280 <= xor_ln15_fu_116_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln14_fu_101_p0 <= p;
    add_ln341_fu_166_p2 <= std_logic_vector(unsigned(zext_ln341_fu_162_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);

    ap_done_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        result_V_2_fu_259_p2 when (p_Result_s_reg_310(0) = '1') else 
        val_reg_330;
    data_V_fu_136_p1 <= reg_96;

    grp_fu_107_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_107_ap_start <= ap_const_logic_1;
        else 
            grp_fu_107_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_107_p0 <= ap_const_lv32_B867(18 - 1 downto 0);
    grp_fu_107_p1 <= std_logic_vector(signed(add_ln14_fu_101_p0) + signed(ap_const_lv32_F0));

    grp_fu_80_opcode_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_80_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_80_opcode <= ap_const_lv2_0;
        else 
            grp_fu_80_opcode <= "XX";
        end if; 
    end process;


    grp_fu_80_p0_assign_proc : process(mul_reg_300, conv2_reg_305, ap_CS_fsm_state24, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_80_p0 <= conv2_reg_305;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_80_p0 <= mul_reg_300;
        else 
            grp_fu_80_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_80_p1_assign_proc : process(reg_96, ap_CS_fsm_state24, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_80_p1 <= reg_96;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_80_p1 <= ap_const_lv32_0;
        else 
            grp_fu_80_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        grp_fu_90_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln13_reg_290),32));

    isNeg_fu_172_p3 <= add_ln341_fu_166_p2(8 downto 8);
    mantissa_fu_198_p4 <= ((ap_const_lv1_1 & tmp_3_reg_315) & ap_const_lv1_0);
    r_V_1_fu_224_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_207_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_214_p1(31-1 downto 0)))));
    r_V_fu_218_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_207_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_214_p1(31-1 downto 0)))));
    result_V_2_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_reg_330));
        sext_ln1311_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_180_p2),9));

    sext_ln15_fu_113_p0 <= p;
        sext_ln15_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln15_fu_113_p0),64));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_211_p1),63));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_325),32));

    sub_ln1311_fu_180_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_2_fu_148_p4));
    tmp_1_fu_242_p4 <= r_V_1_fu_224_p2(39 downto 24);
    tmp_2_fu_148_p4 <= data_V_fu_136_p1(30 downto 23);
    tmp_3_fu_158_p1 <= data_V_fu_136_p1(23 - 1 downto 0);
    tmp_fu_230_p3 <= r_V_fu_218_p2(24 downto 24);
    trunc_ln13_fu_122_p1 <= grp_fu_107_p2(30 - 1 downto 0);
    ush_fu_190_p3 <= 
        sext_ln1311_fu_186_p1 when (isNeg_fu_172_p3(0) = '1') else 
        add_ln341_fu_166_p2;
    val_fu_252_p3 <= 
        zext_ln662_fu_238_p1 when (isNeg_reg_320(0) = '1') else 
        tmp_1_fu_242_p4;
    xor_ln13_fu_126_p2 <= (trunc_ln13_fu_122_p1 xor ap_const_lv30_2360B04F);
    xor_ln15_fu_116_p2 <= (sext_ln15_fu_113_p1 xor p_5);
    zext_ln15_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_198_p4),63));
    zext_ln341_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_148_p4),9));
    zext_ln662_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_230_p3),16));
end behav;
