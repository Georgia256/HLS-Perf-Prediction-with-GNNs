// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1610,HLS_SYN_LUT=3139,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_9,
        ap_return
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
input  [63:0] p_9;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] xor_ln20_fu_93_p2;
reg   [63:0] xor_ln20_reg_260;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_85_p1;
reg   [63:0] conv1_reg_265;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_81_p2;
reg   [63:0] dc_reg_275;
wire    ap_CS_fsm_state13;
wire   [63:0] data_V_fu_103_p1;
reg   [63:0] data_V_reg_280;
wire    ap_CS_fsm_state14;
wire   [63:0] val_fu_212_p3;
reg   [63:0] val_reg_285;
wire  signed [63:0] v_6_fu_239_p2;
reg  signed [63:0] v_6_reg_291;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_245_p2;
reg   [63:0] v_reg_296;
wire    ap_CS_fsm_state20;
wire   [63:0] xor_ln23_fu_250_p2;
reg   [63:0] xor_ln23_reg_301;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [63:0] grp_fu_81_p0;
wire   [63:0] bitcast_ln20_fu_89_p1;
wire   [51:0] tmp_3_fu_116_p1;
wire   [53:0] mantissa_fu_120_p4;
wire   [10:0] tmp_2_fu_106_p4;
wire   [11:0] zext_ln510_fu_134_p1;
wire   [11:0] add_ln510_fu_138_p2;
wire   [10:0] sub_ln1311_fu_152_p2;
wire   [0:0] isNeg_fu_144_p3;
wire  signed [11:0] sext_ln1311_fu_158_p1;
wire   [11:0] ush_fu_162_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_170_p1;
wire   [168:0] zext_ln15_fu_130_p1;
wire   [168:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_174_p1;
wire   [168:0] r_V_fu_178_p2;
wire   [0:0] tmp_fu_190_p3;
wire   [168:0] r_V_1_fu_184_p2;
wire   [63:0] zext_ln662_fu_198_p1;
wire   [63:0] tmp_1_fu_202_p4;
wire   [0:0] p_Result_s_fu_220_p3;
wire   [63:0] result_V_2_fu_227_p2;
wire   [63:0] result_V_fu_232_p3;
wire   [15:0] grp_fu_245_p1;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_78_p1;
wire    ap_CS_fsm_state27;
reg   [26:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

fn1_uitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
uitofp_64ns_32_6_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln23_reg_301),
    .ce(1'b1),
    .dout(grp_fu_78_p1)
);

fn1_dsub_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_7_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_81_p0),
    .din1(conv1_reg_265),
    .ce(1'b1),
    .dout(grp_fu_81_p2)
);

fn1_sitodp_64ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_6_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_9),
    .ce(1'b1),
    .dout(grp_fu_85_p1)
);

fn1_mul_64s_16ns_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 64 ))
mul_64s_16ns_64_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_6_reg_291),
    .din1(grp_fu_245_p1),
    .ce(1'b1),
    .dout(grp_fu_245_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_reg_265 <= grp_fu_85_p1;
        xor_ln20_reg_260 <= xor_ln20_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        data_V_reg_280 <= data_V_fu_103_p1;
        val_reg_285 <= val_fu_212_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        dc_reg_275 <= grp_fu_81_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        v_6_reg_291 <= v_6_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        v_reg_296 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        xor_ln23_reg_301 <= xor_ln23_fu_250_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln510_fu_138_p2 = ($signed(zext_ln510_fu_134_p1) + $signed(12'd3073));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = grp_fu_78_p1;

assign bitcast_ln20_fu_89_p1 = p;

assign data_V_fu_103_p1 = dc_reg_275;

assign grp_fu_245_p1 = 64'd18043;

assign grp_fu_81_p0 = xor_ln20_reg_260;

assign isNeg_fu_144_p3 = add_ln510_fu_138_p2[32'd11];

assign mantissa_fu_120_p4 = {{{{1'd1}, {tmp_3_fu_116_p1}}}, {1'd0}};

assign p_Result_s_fu_220_p3 = data_V_reg_280[32'd63];

assign r_V_1_fu_184_p2 = zext_ln15_fu_130_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_174_p1;

assign r_V_fu_178_p2 = zext_ln15_fu_130_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_174_p1;

assign result_V_2_fu_227_p2 = (64'd0 - val_reg_285);

assign result_V_fu_232_p3 = ((p_Result_s_fu_220_p3[0:0] == 1'b1) ? result_V_2_fu_227_p2 : val_reg_285);

assign sext_ln1311_fu_158_p1 = $signed(sub_ln1311_fu_152_p2);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_174_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_170_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_170_p1 = $signed(ush_fu_162_p3);

assign sub_ln1311_fu_152_p2 = (11'd1023 - tmp_2_fu_106_p4);

assign tmp_1_fu_202_p4 = {{r_V_1_fu_184_p2[116:53]}};

assign tmp_2_fu_106_p4 = {{data_V_fu_103_p1[62:52]}};

assign tmp_3_fu_116_p1 = data_V_fu_103_p1[51:0];

assign tmp_fu_190_p3 = r_V_fu_178_p2[32'd53];

assign ush_fu_162_p3 = ((isNeg_fu_144_p3[0:0] == 1'b1) ? sext_ln1311_fu_158_p1 : add_ln510_fu_138_p2);

assign v_6_fu_239_p2 = ($signed(64'd18446744072777875438) - $signed(result_V_fu_232_p3));

assign val_fu_212_p3 = ((isNeg_fu_144_p3[0:0] == 1'b1) ? zext_ln662_fu_198_p1 : tmp_1_fu_202_p4);

assign xor_ln20_fu_93_p2 = (bitcast_ln20_fu_89_p1 ^ 64'd9223372036854775808);

assign xor_ln23_fu_250_p2 = (v_reg_296 ^ 64'd18446744073709551615);

assign zext_ln15_fu_130_p1 = mantissa_fu_120_p4;

assign zext_ln510_fu_134_p1 = tmp_2_fu_106_p4;

assign zext_ln662_fu_198_p1 = tmp_fu_190_p3;

endmodule //fn1
