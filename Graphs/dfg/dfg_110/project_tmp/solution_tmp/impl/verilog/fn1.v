// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.221000,HLS_SYN_LAT=70,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3603,HLS_SYN_LUT=2708,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_11,
        p_17,
        p_19,
        p_21,
        ap_return
);

parameter    ap_ST_fsm_state1 = 71'd1;
parameter    ap_ST_fsm_state2 = 71'd2;
parameter    ap_ST_fsm_state3 = 71'd4;
parameter    ap_ST_fsm_state4 = 71'd8;
parameter    ap_ST_fsm_state5 = 71'd16;
parameter    ap_ST_fsm_state6 = 71'd32;
parameter    ap_ST_fsm_state7 = 71'd64;
parameter    ap_ST_fsm_state8 = 71'd128;
parameter    ap_ST_fsm_state9 = 71'd256;
parameter    ap_ST_fsm_state10 = 71'd512;
parameter    ap_ST_fsm_state11 = 71'd1024;
parameter    ap_ST_fsm_state12 = 71'd2048;
parameter    ap_ST_fsm_state13 = 71'd4096;
parameter    ap_ST_fsm_state14 = 71'd8192;
parameter    ap_ST_fsm_state15 = 71'd16384;
parameter    ap_ST_fsm_state16 = 71'd32768;
parameter    ap_ST_fsm_state17 = 71'd65536;
parameter    ap_ST_fsm_state18 = 71'd131072;
parameter    ap_ST_fsm_state19 = 71'd262144;
parameter    ap_ST_fsm_state20 = 71'd524288;
parameter    ap_ST_fsm_state21 = 71'd1048576;
parameter    ap_ST_fsm_state22 = 71'd2097152;
parameter    ap_ST_fsm_state23 = 71'd4194304;
parameter    ap_ST_fsm_state24 = 71'd8388608;
parameter    ap_ST_fsm_state25 = 71'd16777216;
parameter    ap_ST_fsm_state26 = 71'd33554432;
parameter    ap_ST_fsm_state27 = 71'd67108864;
parameter    ap_ST_fsm_state28 = 71'd134217728;
parameter    ap_ST_fsm_state29 = 71'd268435456;
parameter    ap_ST_fsm_state30 = 71'd536870912;
parameter    ap_ST_fsm_state31 = 71'd1073741824;
parameter    ap_ST_fsm_state32 = 71'd2147483648;
parameter    ap_ST_fsm_state33 = 71'd4294967296;
parameter    ap_ST_fsm_state34 = 71'd8589934592;
parameter    ap_ST_fsm_state35 = 71'd17179869184;
parameter    ap_ST_fsm_state36 = 71'd34359738368;
parameter    ap_ST_fsm_state37 = 71'd68719476736;
parameter    ap_ST_fsm_state38 = 71'd137438953472;
parameter    ap_ST_fsm_state39 = 71'd274877906944;
parameter    ap_ST_fsm_state40 = 71'd549755813888;
parameter    ap_ST_fsm_state41 = 71'd1099511627776;
parameter    ap_ST_fsm_state42 = 71'd2199023255552;
parameter    ap_ST_fsm_state43 = 71'd4398046511104;
parameter    ap_ST_fsm_state44 = 71'd8796093022208;
parameter    ap_ST_fsm_state45 = 71'd17592186044416;
parameter    ap_ST_fsm_state46 = 71'd35184372088832;
parameter    ap_ST_fsm_state47 = 71'd70368744177664;
parameter    ap_ST_fsm_state48 = 71'd140737488355328;
parameter    ap_ST_fsm_state49 = 71'd281474976710656;
parameter    ap_ST_fsm_state50 = 71'd562949953421312;
parameter    ap_ST_fsm_state51 = 71'd1125899906842624;
parameter    ap_ST_fsm_state52 = 71'd2251799813685248;
parameter    ap_ST_fsm_state53 = 71'd4503599627370496;
parameter    ap_ST_fsm_state54 = 71'd9007199254740992;
parameter    ap_ST_fsm_state55 = 71'd18014398509481984;
parameter    ap_ST_fsm_state56 = 71'd36028797018963968;
parameter    ap_ST_fsm_state57 = 71'd72057594037927936;
parameter    ap_ST_fsm_state58 = 71'd144115188075855872;
parameter    ap_ST_fsm_state59 = 71'd288230376151711744;
parameter    ap_ST_fsm_state60 = 71'd576460752303423488;
parameter    ap_ST_fsm_state61 = 71'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 71'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 71'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 71'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 71'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 71'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 71'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 71'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 71'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 71'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 71'd1180591620717411303424;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p;
input  [15:0] p_11;
input  [63:0] p_17;
input  [31:0] p_19;
input  [7:0] p_21;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [70:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] zext_ln10_fu_94_p1;
wire   [31:0] v_15_fu_98_p1;
reg   [31:0] v_15_reg_355;
wire  signed [15:0] v_9_fu_102_p1;
wire   [0:0] icmp_ln23_fu_106_p2;
reg   [0:0] icmp_ln23_reg_365;
wire   [63:0] sub_ln25_fu_126_p2;
reg   [63:0] sub_ln25_reg_370;
wire   [16:0] xor_ln27_fu_136_p2;
reg   [16:0] xor_ln27_reg_375;
wire   [63:0] add_ln28_fu_142_p2;
reg   [63:0] add_ln28_reg_380;
wire    ap_CS_fsm_state2;
wire  signed [15:0] grp_fu_323_p2;
reg  signed [15:0] mul_ln30_reg_410;
wire    ap_CS_fsm_state4;
reg  signed [15:0] trunc_ln2_reg_415;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state18;
wire  signed [31:0] and_ln31_fu_208_p2;
reg  signed [31:0] and_ln31_reg_425;
wire   [7:0] and_ln32_fu_212_p2;
reg   [7:0] and_ln32_reg_430;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] mul_ln31_reg_440;
wire    ap_CS_fsm_state20;
wire   [16:0] grp_fu_168_p2;
reg   [16:0] urem_ln33_reg_445;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire  signed [15:0] grp_fu_329_p2;
reg  signed [15:0] mul_ln30_1_reg_460;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state56;
wire  signed [15:0] grp_fu_334_p2;
wire    ap_CS_fsm_state59;
wire  signed [15:0] grp_fu_339_p2;
reg  signed [15:0] v_6_1_reg_480;
wire    ap_CS_fsm_state62;
wire   [1:0] grp_fu_181_p2;
reg   [1:0] sdiv_ln23_reg_485;
wire    ap_CS_fsm_state69;
wire   [32:0] add_ln36_fu_289_p2;
reg   [32:0] add_ln36_reg_490;
wire    ap_CS_fsm_state70;
wire   [16:0] zext_ln25_fu_112_p1;
wire   [16:0] add_ln25_fu_116_p2;
wire   [63:0] zext_ln25_1_fu_122_p1;
wire  signed [16:0] sext_ln27_fu_132_p1;
wire   [63:0] grp_fu_156_p0;
wire   [65:0] grp_fu_156_p1;
wire   [15:0] grp_fu_168_p0;
wire   [16:0] grp_fu_168_p1;
wire   [63:0] grp_fu_181_p0;
wire  signed [17:0] grp_fu_189_p0;
wire   [87:0] grp_fu_156_p2;
wire   [7:0] empty_fu_204_p1;
wire   [7:0] grp_fu_221_p0;
wire   [16:0] add_ln34_fu_226_p2;
wire   [16:0] grp_fu_235_p1;
wire   [15:0] grp_fu_189_p2;
wire   [31:0] grp_fu_249_p1;
wire   [15:0] grp_fu_235_p2;
wire   [1:0] trunc_ln16_fu_262_p1;
wire   [31:0] grp_fu_249_p2;
wire   [30:0] zext_ln23_fu_259_p1;
wire   [30:0] add_ln23_fu_273_p2;
wire  signed [30:0] sext_ln16_fu_265_p1;
wire   [30:0] v_fu_279_p2;
wire   [32:0] zext_ln23_1_fu_269_p1;
wire  signed [32:0] sext_ln36_fu_285_p1;
wire    ap_CS_fsm_state71;
wire   [16:0] zext_ln36_fu_295_p1;
wire   [16:0] add_ln36_2_fu_298_p2;
wire   [32:0] zext_ln36_1_fu_304_p1;
wire   [32:0] add_ln36_1_fu_308_p2;
wire   [32:0] result_fu_313_p2;
wire  signed [15:0] grp_fu_323_p0;
wire  signed [15:0] grp_fu_329_p0;
wire  signed [15:0] grp_fu_334_p0;
reg    grp_fu_168_ap_start;
wire    grp_fu_168_ap_done;
reg    grp_fu_181_ap_start;
wire    grp_fu_181_ap_done;
reg    grp_fu_189_ap_start;
wire    grp_fu_189_ap_done;
reg    grp_fu_235_ap_start;
wire    grp_fu_235_ap_done;
reg    grp_fu_249_ap_start;
wire    grp_fu_249_ap_done;
reg   [70:0] ap_NS_fsm;
wire   [87:0] grp_fu_156_p00;
wire   [31:0] grp_fu_221_p00;
wire   [31:0] grp_fu_235_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 71'd1;
end

fn1_mul_64ns_66ns_88_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 88 ))
mul_64ns_66ns_88_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_156_p0),
    .din1(grp_fu_156_p1),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

fn1_urem_16ns_17ns_17_20_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
urem_16ns_17ns_17_20_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_168_ap_start),
    .done(grp_fu_168_ap_done),
    .din0(grp_fu_168_p0),
    .din1(grp_fu_168_p1),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

fn1_sdiv_64ns_64ns_2_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 2 ))
sdiv_64ns_64ns_2_68_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_181_ap_start),
    .done(grp_fu_181_ap_done),
    .din0(grp_fu_181_p0),
    .din1(sub_ln25_reg_370),
    .ce(1'b1),
    .dout(grp_fu_181_p2)
);

fn1_sdiv_18s_64ns_16_22_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
sdiv_18s_64ns_16_22_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_189_ap_start),
    .done(grp_fu_189_ap_done),
    .din0(grp_fu_189_p0),
    .din1(add_ln28_reg_380),
    .ce(1'b1),
    .dout(grp_fu_189_p2)
);

fn1_mul_8ns_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_8ns_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_221_p0),
    .din1(and_ln31_reg_425),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

fn1_urem_32ns_17ns_16_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 16 ))
urem_32ns_17ns_16_36_seq_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_235_ap_start),
    .done(grp_fu_235_ap_done),
    .din0(mul_ln31_reg_440),
    .din1(grp_fu_235_p1),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

fn1_udiv_32s_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
udiv_32s_32ns_32_36_seq_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_249_ap_start),
    .done(grp_fu_249_ap_done),
    .din0(32'd4294967295),
    .din1(grp_fu_249_p1),
    .ce(1'b1),
    .dout(grp_fu_249_p2)
);

fn1_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_323_p0),
    .din1(v_9_fu_102_p1),
    .ce(1'b1),
    .dout(grp_fu_323_p2)
);

fn1_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_329_p0),
    .din1(trunc_ln2_reg_415),
    .ce(1'b1),
    .dout(grp_fu_329_p2)
);

fn1_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_334_p0),
    .din1(mul_ln30_reg_410),
    .ce(1'b1),
    .dout(grp_fu_334_p2)
);

fn1_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_334_p2),
    .din1(mul_ln30_1_reg_460),
    .ce(1'b1),
    .dout(grp_fu_339_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln28_reg_380 <= add_ln28_fu_142_p2;
        icmp_ln23_reg_365 <= icmp_ln23_fu_106_p2;
        sub_ln25_reg_370 <= sub_ln25_fu_126_p2;
        v_15_reg_355 <= v_15_fu_98_p1;
        xor_ln27_reg_375 <= xor_ln27_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        add_ln36_reg_490 <= add_ln36_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        and_ln31_reg_425 <= and_ln31_fu_208_p2;
        and_ln32_reg_430 <= and_ln32_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mul_ln30_1_reg_460 <= grp_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln30_reg_410 <= grp_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        mul_ln31_reg_440 <= grp_fu_221_p2;
        urem_ln33_reg_445 <= grp_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        sdiv_ln23_reg_485 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln2_reg_415 <= {{grp_fu_156_p2[87:72]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        v_6_1_reg_480 <= grp_fu_339_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_168_ap_start = 1'b1;
    end else begin
        grp_fu_168_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_181_ap_start = 1'b1;
    end else begin
        grp_fu_181_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_189_ap_start = 1'b1;
    end else begin
        grp_fu_189_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_235_ap_start = 1'b1;
    end else begin
        grp_fu_235_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_249_ap_start = 1'b1;
    end else begin
        grp_fu_249_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_273_p2 = ($signed(zext_ln23_fu_259_p1) + $signed(31'd1138252539));

assign add_ln25_fu_116_p2 = (zext_ln25_fu_112_p1 + 17'd846);

assign add_ln28_fu_142_p2 = (p_17 + 64'd268);

assign add_ln34_fu_226_p2 = (urem_ln33_reg_445 + 17'd402);

assign add_ln36_1_fu_308_p2 = (zext_ln36_1_fu_304_p1 + add_ln36_reg_490);

assign add_ln36_2_fu_298_p2 = (zext_ln36_fu_295_p1 + 17'd101);

assign add_ln36_fu_289_p2 = ($signed(zext_ln23_1_fu_269_p1) + $signed(sext_ln36_fu_285_p1));

assign and_ln31_fu_208_p2 = (v_15_reg_355 & p);

assign and_ln32_fu_212_p2 = (p_21 & empty_fu_204_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_return = $signed(result_fu_313_p2);

assign empty_fu_204_p1 = p_19[7:0];

assign grp_fu_156_p0 = grp_fu_156_p00;

assign grp_fu_156_p00 = p_17;

assign grp_fu_156_p1 = 88'd27616178262395586046;

assign grp_fu_168_p0 = zext_ln10_fu_94_p1;

assign grp_fu_168_p1 = (17'd365 - zext_ln10_fu_94_p1);

assign grp_fu_181_p0 = ((icmp_ln23_reg_365[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign grp_fu_189_p0 = $signed(xor_ln27_reg_375);

assign grp_fu_221_p0 = grp_fu_221_p00;

assign grp_fu_221_p00 = and_ln32_reg_430;

assign grp_fu_235_p1 = grp_fu_235_p10;

assign grp_fu_235_p10 = add_ln34_fu_226_p2;

assign grp_fu_249_p1 = (p + 32'd522);

assign grp_fu_323_p0 = p_17[15:0];

assign grp_fu_329_p0 = grp_fu_189_p2[15:0];

assign grp_fu_334_p0 = grp_fu_235_p2[15:0];

assign icmp_ln23_fu_106_p2 = ((p_11 == 16'd0) ? 1'b1 : 1'b0);

assign result_fu_313_p2 = (33'd0 - add_ln36_1_fu_308_p2);

assign sext_ln16_fu_265_p1 = $signed(trunc_ln16_fu_262_p1);

assign sext_ln27_fu_132_p1 = v_9_fu_102_p1;

assign sext_ln36_fu_285_p1 = $signed(v_fu_279_p2);

assign sub_ln25_fu_126_p2 = (zext_ln25_1_fu_122_p1 - p_17);

assign trunc_ln16_fu_262_p1 = sdiv_ln23_reg_485[1:0];

assign v_15_fu_98_p1 = p_17[31:0];

assign v_9_fu_102_p1 = p[15:0];

assign v_fu_279_p2 = ($signed(add_ln23_fu_273_p2) - $signed(sext_ln16_fu_265_p1));

assign xor_ln27_fu_136_p2 = (zext_ln10_fu_94_p1 ^ sext_ln27_fu_132_p1);

assign zext_ln10_fu_94_p1 = p_11;

assign zext_ln23_1_fu_269_p1 = grp_fu_249_p2;

assign zext_ln23_fu_259_p1 = p_21;

assign zext_ln25_1_fu_122_p1 = add_ln25_fu_116_p2;

assign zext_ln25_fu_112_p1 = $unsigned(v_9_fu_102_p1);

assign zext_ln36_1_fu_304_p1 = add_ln36_2_fu_298_p2;

assign zext_ln36_fu_295_p1 = $unsigned(v_6_1_reg_480);

endmodule //fn1
