-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (63 downto 0);
    p_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.687000,HLS_SYN_LAT=22,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=883,HLS_SYN_LUT=919,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv17_2D1 : STD_LOGIC_VECTOR (16 downto 0) := "00000001011010001";
    constant ap_const_lv17_3A33 : STD_LOGIC_VECTOR (16 downto 0) := "00011101000110011";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv17_33E : STD_LOGIC_VECTOR (16 downto 0) := "00000001100111110";
    constant ap_const_lv17_FF : STD_LOGIC_VECTOR (16 downto 0) := "00000000011111111";
    constant ap_const_lv64_FFFFBB8E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111011101110001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln17_fu_86_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln17_reg_181 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln20_fu_131_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln20_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_96_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sdiv_ln19_reg_201 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal trunc_ln18_fu_150_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln18_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_112_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sdiv_ln21_reg_211 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln17_1_fu_70_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_80_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_80_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_96_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln21_fu_102_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_112_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_112_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln17_1_fu_118_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln17_fu_126_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln17_2_fu_122_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_fu_137_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_fu_140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln18_fu_144_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sub_ln20_fu_154_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_1_fu_158_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_fu_161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_80_ap_start : STD_LOGIC;
    signal grp_fu_80_ap_done : STD_LOGIC;
    signal grp_fu_96_ap_start : STD_LOGIC;
    signal grp_fu_96_ap_done : STD_LOGIC;
    signal grp_fu_112_ap_start : STD_LOGIC;
    signal grp_fu_112_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_96_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_udiv_15ns_17ns_8_19_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fn1_sdiv_17ns_32ns_6_21_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component fn1_sdiv_10ns_17ns_8_14_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    udiv_15ns_17ns_8_19_seq_1_U1 : component fn1_udiv_15ns_17ns_8_19_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 17,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_80_ap_start,
        done => grp_fu_80_ap_done,
        din0 => grp_fu_80_p0,
        din1 => grp_fu_80_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_80_p2);

    sdiv_17ns_32ns_6_21_seq_1_U2 : component fn1_sdiv_17ns_32ns_6_21_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 32,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_96_ap_start,
        done => grp_fu_96_ap_done,
        din0 => grp_fu_96_p0,
        din1 => grp_fu_96_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_96_p2);

    sdiv_10ns_17ns_8_14_seq_1_U3 : component fn1_sdiv_10ns_17ns_8_14_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 17,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_112_ap_start,
        done => grp_fu_112_ap_done,
        din0 => grp_fu_112_p0,
        din1 => grp_fu_112_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_112_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                or_ln20_reg_196 <= or_ln20_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                sdiv_ln19_reg_201 <= grp_fu_96_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                sdiv_ln21_reg_211 <= grp_fu_112_p2;
                trunc_ln18_reg_206 <= trunc_ln18_fu_150_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln17_reg_181 <= trunc_ln17_fu_86_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln17_fu_126_p2 <= std_logic_vector(unsigned(trunc_ln17_1_fu_118_p1) + unsigned(trunc_ln17_reg_181));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(IEEE.numeric_std.resize(signed(v_fu_161_p2),32));


    grp_fu_112_ap_start_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_112_ap_start <= ap_const_logic_1;
        else 
            grp_fu_112_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_112_p0 <= ap_const_lv17_FF(10 - 1 downto 0);
    grp_fu_112_p1 <= std_logic_vector(unsigned(ap_const_lv17_33E) - unsigned(sext_ln21_fu_102_p1));

    grp_fu_80_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_80_ap_start <= ap_const_logic_1;
        else 
            grp_fu_80_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_80_p0 <= ap_const_lv17_3A33(15 - 1 downto 0);
    grp_fu_80_p1 <= std_logic_vector(unsigned(zext_ln17_1_fu_70_p1) + unsigned(ap_const_lv17_2D1));

    grp_fu_96_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_96_ap_start <= ap_const_logic_1;
        else 
            grp_fu_96_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_96_p0 <= grp_fu_96_p00(17 - 1 downto 0);
    grp_fu_96_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_5),32));
    grp_fu_96_p1 <= std_logic_vector(unsigned(p_9) + unsigned(ap_const_lv32_1E0));
    lshr_ln18_fu_144_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFBB8E),to_integer(unsigned('0' & zext_ln18_fu_140_p1(31-1 downto 0)))));
    or_ln20_fu_131_p2 <= (trunc_ln17_2_fu_122_p1 or add_ln17_fu_126_p2);
        sext_ln21_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_11),17));

    sub_ln20_fu_154_p2 <= std_logic_vector(unsigned(or_ln20_reg_196) - unsigned(trunc_ln18_reg_206));
    trunc_ln17_1_fu_118_p1 <= p(8 - 1 downto 0);
    trunc_ln17_2_fu_122_p1 <= grp_fu_80_p2(8 - 1 downto 0);
    trunc_ln17_fu_86_p1 <= p_5(8 - 1 downto 0);
    trunc_ln18_fu_150_p1 <= lshr_ln18_fu_144_p2(8 - 1 downto 0);
    trunc_ln20_1_fu_158_p1 <= sdiv_ln21_reg_211(8 - 1 downto 0);
    trunc_ln20_fu_137_p1 <= sdiv_ln19_reg_201(6 - 1 downto 0);
    v_fu_161_p2 <= std_logic_vector(unsigned(sub_ln20_fu_154_p2) + unsigned(trunc_ln20_1_fu_158_p1));
    zext_ln17_1_fu_70_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_5),17));
    zext_ln18_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln20_fu_137_p1),64));
end behav;
