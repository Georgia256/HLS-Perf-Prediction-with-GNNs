// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2073,HLS_SYN_LUT=3146,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_4_address0,
        p_4_ce0,
        p_4_q0,
        p_7,
        p_9,
        p_11,
        ap_return
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p;
output  [0:0] p_4_address0;
output   p_4_ce0;
input  [7:0] p_4_q0;
input  [63:0] p_7;
input  [7:0] p_9;
input  [31:0] p_11;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_4_ce0;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_112_p1;
reg   [63:0] reg_126;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
reg  signed [7:0] p_4_load_reg_343;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire   [31:0] bitcast_ln16_1_fu_165_p1;
wire   [63:0] grp_fu_123_p1;
reg   [63:0] conv3_reg_369;
wire   [63:0] grp_fu_119_p2;
reg   [63:0] mul_reg_374;
wire   [63:0] grp_fu_115_p2;
reg   [63:0] dc_reg_379;
wire    ap_CS_fsm_state30;
reg   [0:0] p_Result_s_reg_384;
wire    ap_CS_fsm_state31;
wire   [7:0] val_fu_287_p3;
reg   [7:0] val_reg_389;
wire   [7:0] result_V_fu_300_p3;
reg  signed [7:0] result_V_reg_395;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_313_p2;
reg   [31:0] mul_ln18_reg_415;
wire   [31:0] grp_fu_319_p2;
reg   [31:0] mul_ln17_reg_420;
wire    ap_CS_fsm_state35;
wire   [31:0] add_ln17_fu_329_p2;
reg   [31:0] add_ln17_reg_425;
reg   [31:0] grp_fu_112_p0;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state17;
wire  signed [31:0] grp_fu_123_p0;
wire  signed [8:0] sext_ln18_fu_132_p1;
wire   [8:0] add_ln18_fu_135_p2;
wire   [8:0] grp_fu_145_p1;
wire   [31:0] bitcast_ln16_fu_155_p1;
wire   [31:0] xor_ln16_fu_159_p2;
wire   [63:0] data_V_fu_170_p1;
wire   [51:0] tmp_3_fu_191_p1;
wire   [53:0] mantissa_fu_195_p4;
wire   [10:0] tmp_2_fu_181_p4;
wire   [11:0] zext_ln510_fu_209_p1;
wire   [11:0] add_ln510_fu_213_p2;
wire   [10:0] sub_ln1311_fu_227_p2;
wire   [0:0] isNeg_fu_219_p3;
wire  signed [11:0] sext_ln1311_fu_233_p1;
wire   [11:0] ush_fu_237_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_245_p1;
wire   [112:0] zext_ln15_fu_205_p1;
wire   [112:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_249_p1;
wire   [112:0] r_V_fu_253_p2;
wire   [0:0] tmp_fu_265_p3;
wire   [112:0] r_V_1_fu_259_p2;
wire   [7:0] zext_ln662_fu_273_p1;
wire   [7:0] tmp_1_fu_277_p4;
wire   [7:0] result_V_2_fu_295_p2;
wire  signed [31:0] grp_fu_313_p0;
wire  signed [29:0] grp_fu_319_p1;
wire   [28:0] grp_fu_145_p2;
wire   [31:0] zext_ln18_fu_325_p1;
wire    ap_CS_fsm_state36;
reg    grp_fu_145_ap_start;
wire    grp_fu_145_ap_done;
reg   [35:0] ap_NS_fsm;
wire   [28:0] grp_fu_145_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
end

fn1_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_112_p0),
    .ce(1'b1),
    .dout(grp_fu_112_p1)
);

fn1_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_126),
    .din1(mul_reg_374),
    .ce(1'b1),
    .dout(grp_fu_115_p2)
);

fn1_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv3_reg_369),
    .din1(reg_126),
    .ce(1'b1),
    .dout(grp_fu_119_p2)
);

fn1_sitodp_32s_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_6_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_123_p0),
    .ce(1'b1),
    .dout(grp_fu_123_p1)
);

fn1_udiv_29s_9ns_29_33_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 33 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 29 ))
udiv_29s_9ns_29_33_seq_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_145_ap_start),
    .done(grp_fu_145_ap_done),
    .din0(29'd400375968),
    .din1(grp_fu_145_p1),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

fn1_mul_32s_8s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
mul_32s_8s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_313_p0),
    .din1(result_V_reg_395),
    .ce(1'b1),
    .dout(grp_fu_313_p2)
);

fn1_mul_32s_30s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 32 ))
mul_32s_30s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p),
    .din1(grp_fu_319_p1),
    .ce(1'b1),
    .dout(grp_fu_319_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        add_ln17_reg_425 <= add_ln17_fu_329_p2;
        mul_ln17_reg_420 <= grp_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv3_reg_369 <= grp_fu_123_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        dc_reg_379 <= grp_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        mul_ln18_reg_415 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        mul_reg_374 <= grp_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_4_load_reg_343 <= p_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        p_Result_s_reg_384 <= data_V_fu_170_p1[32'd63];
        val_reg_389 <= val_fu_287_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_126 <= grp_fu_112_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        result_V_reg_395 <= result_V_fu_300_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_112_p0 = p_11;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_112_p0 = bitcast_ln16_1_fu_165_p1;
    end else begin
        grp_fu_112_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_145_ap_start = 1'b1;
    end else begin
        grp_fu_145_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_4_ce0 = 1'b1;
    end else begin
        p_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_329_p2 = (mul_ln18_reg_415 + zext_ln18_fu_325_p1);

assign add_ln18_fu_135_p2 = ($signed(sext_ln18_fu_132_p1) + $signed(9'd260));

assign add_ln510_fu_213_p2 = ($signed(zext_ln510_fu_209_p1) + $signed(12'd3073));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_return = (mul_ln17_reg_420 ^ add_ln17_reg_425);

assign bitcast_ln16_1_fu_165_p1 = xor_ln16_fu_159_p2;

assign bitcast_ln16_fu_155_p1 = p_11;

assign data_V_fu_170_p1 = dc_reg_379;

assign grp_fu_123_p0 = p_4_load_reg_343;

assign grp_fu_145_p1 = grp_fu_145_p10;

assign grp_fu_145_p10 = add_ln18_fu_135_p2;

assign grp_fu_313_p0 = p_7[31:0];

assign grp_fu_319_p1 = 32'd3793889788;

assign isNeg_fu_219_p3 = add_ln510_fu_213_p2[32'd11];

assign mantissa_fu_195_p4 = {{{{1'd1}, {tmp_3_fu_191_p1}}}, {1'd0}};

assign p_4_address0 = 64'd1;

assign r_V_1_fu_259_p2 = zext_ln15_fu_205_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_249_p1;

assign r_V_fu_253_p2 = zext_ln15_fu_205_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_249_p1;

assign result_V_2_fu_295_p2 = (8'd0 - val_reg_389);

assign result_V_fu_300_p3 = ((p_Result_s_reg_384[0:0] == 1'b1) ? result_V_2_fu_295_p2 : val_reg_389);

assign sext_ln1311_fu_233_p1 = $signed(sub_ln1311_fu_227_p2);

assign sext_ln18_fu_132_p1 = p_4_load_reg_343;

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_249_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_245_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_245_p1 = $signed(ush_fu_237_p3);

assign sub_ln1311_fu_227_p2 = (11'd1023 - tmp_2_fu_181_p4);

assign tmp_1_fu_277_p4 = {{r_V_1_fu_259_p2[60:53]}};

assign tmp_2_fu_181_p4 = {{data_V_fu_170_p1[62:52]}};

assign tmp_3_fu_191_p1 = data_V_fu_170_p1[51:0];

assign tmp_fu_265_p3 = r_V_fu_253_p2[32'd53];

assign ush_fu_237_p3 = ((isNeg_fu_219_p3[0:0] == 1'b1) ? sext_ln1311_fu_233_p1 : add_ln510_fu_213_p2);

assign val_fu_287_p3 = ((isNeg_fu_219_p3[0:0] == 1'b1) ? zext_ln662_fu_273_p1 : tmp_1_fu_277_p4);

assign xor_ln16_fu_159_p2 = (bitcast_ln16_fu_155_p1 ^ 32'd2147483648);

assign zext_ln15_fu_205_p1 = mantissa_fu_195_p4;

assign zext_ln18_fu_325_p1 = grp_fu_145_p2;

assign zext_ln510_fu_209_p1 = tmp_2_fu_181_p4;

assign zext_ln662_fu_273_p1 = tmp_fu_265_p3;

endmodule //fn1
