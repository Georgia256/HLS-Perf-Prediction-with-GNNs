// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.251000,HLS_SYN_LAT=24,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1640,HLS_SYN_LUT=1091,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_7,
        p_9,
        p_11,
        ap_return
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
input  [15:0] p_7;
input  [15:0] p_9;
input  [31:0] p_11;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [17:0] sub_ln17_fu_78_p2;
reg   [17:0] sub_ln17_reg_164;
wire    ap_CS_fsm_state2;
reg  signed [7:0] v_4_reg_174;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [39:0] grp_fu_110_p2;
reg   [39:0] mul_ln21_reg_184;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [7:0] sub_ln20_fu_135_p2;
reg   [7:0] sub_ln20_reg_194;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire   [15:0] xor_ln17_fu_58_p2;
wire   [17:0] zext_ln17_fu_68_p1;
wire  signed [17:0] sext_ln17_fu_64_p1;
wire   [17:0] add_ln17_fu_72_p2;
wire  signed [63:0] sext_ln17_1_fu_84_p1;
wire   [63:0] grp_fu_91_p0;
wire   [65:0] grp_fu_91_p1;
wire   [81:0] grp_fu_91_p2;
wire   [32:0] grp_fu_110_p1;
wire  signed [7:0] grp_fu_121_p0;
wire   [39:0] grp_fu_121_p1;
wire   [6:0] grp_fu_121_p2;
wire   [6:0] trunc_ln20_fu_127_p1;
wire  signed [7:0] sext_ln20_fu_131_p1;
wire  signed [63:0] sext_ln21_1_fu_141_p1;
wire   [63:0] grp_fu_148_p0;
wire   [65:0] grp_fu_148_p1;
wire   [81:0] grp_fu_148_p2;
wire    ap_CS_fsm_state25;
reg    grp_fu_121_ap_start;
wire    grp_fu_121_ap_done;
reg   [24:0] ap_NS_fsm;
wire   [81:0] grp_fu_148_p00;
wire   [81:0] grp_fu_91_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

fn1_mul_64ns_66ns_82_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 82 ))
mul_64ns_66ns_82_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_91_p0),
    .din1(grp_fu_91_p1),
    .ce(1'b1),
    .dout(grp_fu_91_p2)
);

fn1_mul_8s_33ns_40_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 40 ))
mul_8s_33ns_40_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_4_reg_174),
    .din1(grp_fu_110_p1),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

fn1_srem_8s_40ns_7_12_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 7 ))
srem_8s_40ns_7_12_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_121_ap_start),
    .done(grp_fu_121_ap_done),
    .din0(grp_fu_121_p0),
    .din1(grp_fu_121_p1),
    .ce(1'b1),
    .dout(grp_fu_121_p2)
);

fn1_mul_64ns_66ns_82_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 82 ))
mul_64ns_66ns_82_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_148_p0),
    .din1(grp_fu_148_p1),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln21_reg_184 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sub_ln17_reg_164 <= sub_ln17_fu_78_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sub_ln20_reg_194 <= sub_ln20_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v_4_reg_174 <= {{grp_fu_91_p2[81:74]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_121_ap_start = 1'b1;
    end else begin
        grp_fu_121_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_72_p2 = ($signed(zext_ln17_fu_68_p1) + $signed(sext_ln17_fu_64_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = {{grp_fu_148_p2[81:74]}};

assign grp_fu_110_p1 = 40'd4294913444;

assign grp_fu_121_p0 = 40'd1099511627735;

assign grp_fu_121_p1 = (mul_ln21_reg_184 + 40'd940);

assign grp_fu_148_p0 = grp_fu_148_p00;

assign grp_fu_148_p00 = $unsigned(sext_ln21_1_fu_141_p1);

assign grp_fu_148_p1 = 82'd26946456392979430606;

assign grp_fu_91_p0 = grp_fu_91_p00;

assign grp_fu_91_p00 = $unsigned(sext_ln17_1_fu_84_p1);

assign grp_fu_91_p1 = 82'd21913533563200209809;

assign sext_ln17_1_fu_84_p1 = $signed(sub_ln17_reg_164);

assign sext_ln17_fu_64_p1 = $signed(xor_ln17_fu_58_p2);

assign sext_ln20_fu_131_p1 = $signed(trunc_ln20_fu_127_p1);

assign sext_ln21_1_fu_141_p1 = $signed(sub_ln20_reg_194);

assign sub_ln17_fu_78_p2 = (18'd0 - add_ln17_fu_72_p2);

assign sub_ln20_fu_135_p2 = ($signed(8'd0) - $signed(sext_ln20_fu_131_p1));

assign trunc_ln20_fu_127_p1 = grp_fu_121_p2[6:0];

assign xor_ln17_fu_58_p2 = (p_7 ^ 16'd65535);

assign zext_ln17_fu_68_p1 = p_9;

endmodule //fn1
