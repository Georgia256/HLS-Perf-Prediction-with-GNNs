// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=98,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3808,HLS_SYN_LUT=6153,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_address0,
        p_ce0,
        p_q0,
        p_15,
        p_17,
        ap_return
);

parameter    ap_ST_fsm_state1 = 99'd1;
parameter    ap_ST_fsm_state2 = 99'd2;
parameter    ap_ST_fsm_state3 = 99'd4;
parameter    ap_ST_fsm_state4 = 99'd8;
parameter    ap_ST_fsm_state5 = 99'd16;
parameter    ap_ST_fsm_state6 = 99'd32;
parameter    ap_ST_fsm_state7 = 99'd64;
parameter    ap_ST_fsm_state8 = 99'd128;
parameter    ap_ST_fsm_state9 = 99'd256;
parameter    ap_ST_fsm_state10 = 99'd512;
parameter    ap_ST_fsm_state11 = 99'd1024;
parameter    ap_ST_fsm_state12 = 99'd2048;
parameter    ap_ST_fsm_state13 = 99'd4096;
parameter    ap_ST_fsm_state14 = 99'd8192;
parameter    ap_ST_fsm_state15 = 99'd16384;
parameter    ap_ST_fsm_state16 = 99'd32768;
parameter    ap_ST_fsm_state17 = 99'd65536;
parameter    ap_ST_fsm_state18 = 99'd131072;
parameter    ap_ST_fsm_state19 = 99'd262144;
parameter    ap_ST_fsm_state20 = 99'd524288;
parameter    ap_ST_fsm_state21 = 99'd1048576;
parameter    ap_ST_fsm_state22 = 99'd2097152;
parameter    ap_ST_fsm_state23 = 99'd4194304;
parameter    ap_ST_fsm_state24 = 99'd8388608;
parameter    ap_ST_fsm_state25 = 99'd16777216;
parameter    ap_ST_fsm_state26 = 99'd33554432;
parameter    ap_ST_fsm_state27 = 99'd67108864;
parameter    ap_ST_fsm_state28 = 99'd134217728;
parameter    ap_ST_fsm_state29 = 99'd268435456;
parameter    ap_ST_fsm_state30 = 99'd536870912;
parameter    ap_ST_fsm_state31 = 99'd1073741824;
parameter    ap_ST_fsm_state32 = 99'd2147483648;
parameter    ap_ST_fsm_state33 = 99'd4294967296;
parameter    ap_ST_fsm_state34 = 99'd8589934592;
parameter    ap_ST_fsm_state35 = 99'd17179869184;
parameter    ap_ST_fsm_state36 = 99'd34359738368;
parameter    ap_ST_fsm_state37 = 99'd68719476736;
parameter    ap_ST_fsm_state38 = 99'd137438953472;
parameter    ap_ST_fsm_state39 = 99'd274877906944;
parameter    ap_ST_fsm_state40 = 99'd549755813888;
parameter    ap_ST_fsm_state41 = 99'd1099511627776;
parameter    ap_ST_fsm_state42 = 99'd2199023255552;
parameter    ap_ST_fsm_state43 = 99'd4398046511104;
parameter    ap_ST_fsm_state44 = 99'd8796093022208;
parameter    ap_ST_fsm_state45 = 99'd17592186044416;
parameter    ap_ST_fsm_state46 = 99'd35184372088832;
parameter    ap_ST_fsm_state47 = 99'd70368744177664;
parameter    ap_ST_fsm_state48 = 99'd140737488355328;
parameter    ap_ST_fsm_state49 = 99'd281474976710656;
parameter    ap_ST_fsm_state50 = 99'd562949953421312;
parameter    ap_ST_fsm_state51 = 99'd1125899906842624;
parameter    ap_ST_fsm_state52 = 99'd2251799813685248;
parameter    ap_ST_fsm_state53 = 99'd4503599627370496;
parameter    ap_ST_fsm_state54 = 99'd9007199254740992;
parameter    ap_ST_fsm_state55 = 99'd18014398509481984;
parameter    ap_ST_fsm_state56 = 99'd36028797018963968;
parameter    ap_ST_fsm_state57 = 99'd72057594037927936;
parameter    ap_ST_fsm_state58 = 99'd144115188075855872;
parameter    ap_ST_fsm_state59 = 99'd288230376151711744;
parameter    ap_ST_fsm_state60 = 99'd576460752303423488;
parameter    ap_ST_fsm_state61 = 99'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 99'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 99'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 99'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 99'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 99'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 99'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 99'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 99'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 99'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 99'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 99'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 99'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 99'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 99'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 99'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 99'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 99'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 99'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 99'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 99'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 99'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 99'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 99'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 99'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 99'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 99'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 99'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 99'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 99'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 99'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 99'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 99'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 99'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 99'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 99'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 99'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 99'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 99'd316912650057057350374175801344;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] p_address0;
output   p_ce0;
input  [63:0] p_q0;
input  [31:0] p_15;
input  [7:0] p_17;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] p_address0;
reg p_ce0;

(* fsm_encoding = "none" *) reg   [98:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_177_p1;
reg   [63:0] reg_186;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state91;
wire   [63:0] grp_fu_172_p2;
reg   [63:0] reg_192;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state84;
wire   [63:0] grp_fu_180_p1;
reg   [63:0] reg_198;
wire    ap_CS_fsm_state70;
wire   [63:0] grp_fu_167_p2;
reg   [63:0] reg_205;
wire    ap_CS_fsm_state68;
reg   [63:0] p_load_1_reg_688;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state20;
wire   [15:0] v_8_fu_216_p1;
reg   [15:0] v_8_reg_699;
wire   [31:0] zext_ln20_fu_226_p1;
wire    ap_CS_fsm_state49;
reg   [0:0] tmp_2_reg_709;
reg   [0:0] tmp_3_reg_714;
reg   [0:0] tmp_4_reg_719;
wire   [0:0] trunc_ln23_fu_255_p1;
reg   [0:0] trunc_ln23_reg_724;
wire   [10:0] sub_ln20_fu_263_p2;
reg   [10:0] sub_ln20_reg_729;
wire    ap_CS_fsm_state55;
wire  signed [31:0] sext_ln20_fu_269_p1;
wire    ap_CS_fsm_state56;
wire   [63:0] zext_ln23_fu_287_p1;
wire    ap_CS_fsm_state65;
wire   [31:0] grp_fu_164_p1;
reg   [31:0] v_12_reg_754;
wire   [22:0] tmp_15_fu_310_p1;
reg   [22:0] tmp_15_reg_759;
wire   [8:0] add_ln341_fu_318_p2;
reg   [8:0] add_ln341_reg_764;
reg   [0:0] isNeg_reg_769;
wire   [7:0] sub_ln1311_fu_332_p2;
reg   [7:0] sub_ln1311_reg_775;
wire   [63:0] grp_fu_183_p1;
reg   [63:0] conv2_reg_780;
wire   [63:0] grp_fu_211_p2;
reg   [63:0] urem_ln26_reg_785;
wire   [0:0] or_ln22_fu_413_p2;
reg   [0:0] or_ln22_reg_790;
wire    ap_CS_fsm_state71;
reg   [14:0] tmp_1_reg_795;
wire  signed [31:0] sext_ln25_fu_435_p1;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire   [31:0] grp_fu_161_p1;
reg   [31:0] conv4_reg_810;
wire    ap_CS_fsm_state76;
reg   [7:0] tmp_16_reg_815;
wire    ap_CS_fsm_state81;
wire   [22:0] tmp_17_fu_465_p1;
reg   [22:0] tmp_17_reg_821;
wire   [0:0] isNeg_1_fu_478_p3;
reg   [0:0] isNeg_1_reg_826;
wire    ap_CS_fsm_state82;
wire   [8:0] ush_1_fu_495_p3;
reg   [8:0] ush_1_reg_831;
wire  signed [31:0] val_fu_557_p3;
reg  signed [31:0] val_reg_836;
wire    ap_CS_fsm_state83;
wire  signed [31:0] grp_fu_445_p2;
reg  signed [31:0] urem_ln27_reg_841;
wire   [31:0] grp_fu_564_p2;
reg   [31:0] mul_ln26_reg_846;
wire    ap_CS_fsm_state85;
reg   [10:0] tmp_18_reg_851;
wire    ap_CS_fsm_state98;
wire   [51:0] tmp_19_fu_582_p1;
reg   [51:0] tmp_19_reg_857;
wire    ap_CS_fsm_state69;
reg   [63:0] grp_fu_167_p1;
wire    ap_CS_fsm_state62;
reg   [63:0] grp_fu_172_p0;
reg   [63:0] grp_fu_172_p1;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state92;
reg   [31:0] grp_fu_177_p0;
wire    ap_CS_fsm_state86;
reg  signed [63:0] grp_fu_180_p0;
wire  signed [31:0] grp_fu_183_p0;
wire   [8:0] grp_fu_211_p1;
wire    ap_CS_fsm_state3;
wire   [10:0] grp_fu_220_p1;
wire   [10:0] grp_fu_220_p2;
wire   [10:0] trunc_ln20_fu_259_p1;
wire   [7:0] and_ln_fu_273_p8;
wire   [31:0] bitcast_ln22_fu_296_p1;
wire   [7:0] tmp_14_fu_300_p4;
wire   [8:0] zext_ln341_fu_314_p1;
wire   [24:0] mantissa_fu_338_p4;
wire  signed [8:0] sext_ln1311_fu_351_p1;
wire   [8:0] ush_fu_354_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i23_cast_cast_cast_fu_360_p1;
wire   [24:0] sh_prom_i_i_i_i_i23_cast_cast_castcast_fu_368_p1;
wire   [24:0] r_V_fu_372_p2;
wire   [110:0] zext_ln68_fu_347_p1;
wire   [110:0] sh_prom_i_i_i_i_i23_cast_cast_cast_cast_fu_364_p1;
wire   [110:0] r_V_1_fu_382_p2;
wire   [39:0] zext_ln1286_fu_378_p1;
wire   [39:0] trunc_ln1286_1_fu_388_p1;
wire   [39:0] r_V_7_fu_392_p3;
wire   [0:0] tmp_fu_405_p3;
wire   [0:0] icmp_ln22_fu_399_p2;
wire   [15:0] v_6_fu_429_p3;
wire   [6:0] grp_fu_445_p0;
wire   [31:0] grp_fu_445_p1;
wire   [31:0] grp_fu_157_p2;
wire   [31:0] data_V_fu_451_p1;
wire   [8:0] zext_ln341_1_fu_469_p1;
wire   [8:0] add_ln341_1_fu_472_p2;
wire   [7:0] sub_ln1311_1_fu_486_p2;
wire  signed [8:0] sext_ln1311_1_fu_491_p1;
wire   [24:0] mantissa_1_fu_503_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i49_cast_cast_cast_fu_516_p1;
wire   [78:0] zext_ln68_1_fu_512_p1;
wire   [78:0] sh_prom_i_i_i_i_i49_cast_cast_cast_cast_fu_519_p1;
wire   [78:0] r_V_3_fu_523_p2;
wire   [0:0] tmp_9_fu_535_p3;
wire   [78:0] r_V_4_fu_529_p2;
wire   [31:0] zext_ln662_fu_543_p1;
wire   [31:0] tmp_s_fu_547_p4;
wire   [63:0] data_V_1_fu_568_p1;
wire    ap_CS_fsm_state99;
wire   [53:0] mantissa_2_fu_586_p4;
wire   [11:0] zext_ln510_fu_599_p1;
wire   [11:0] add_ln510_fu_602_p2;
wire   [10:0] sub_ln1311_2_fu_616_p2;
wire   [0:0] isNeg_2_fu_608_p3;
wire  signed [11:0] sext_ln1311_2_fu_621_p1;
wire   [11:0] ush_2_fu_625_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i75_cast_cast_cast_fu_633_p1;
wire   [168:0] zext_ln68_2_fu_595_p1;
wire   [168:0] sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_637_p1;
wire   [168:0] r_V_5_fu_641_p2;
wire   [0:0] tmp_13_fu_653_p3;
wire   [168:0] r_V_6_fu_647_p2;
wire   [63:0] zext_ln662_1_fu_661_p1;
wire   [63:0] tmp_6_fu_665_p4;
reg    grp_fu_211_ap_start;
wire    grp_fu_211_ap_done;
reg    grp_fu_220_ap_start;
wire    grp_fu_220_ap_done;
reg    grp_fu_445_ap_start;
wire    grp_fu_445_ap_done;
reg   [98:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 99'd1;
end

fn1_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_12_reg_754),
    .din1(conv4_reg_810),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

fn1_uitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
uitofp_64ns_32_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(urem_ln26_reg_785),
    .ce(1'b1),
    .dout(grp_fu_161_p1)
);

fn1_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_205),
    .ce(1'b1),
    .dout(grp_fu_164_p1)
);

fn1_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_192),
    .din1(grp_fu_167_p1),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

fn1_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_172_p0),
    .din1(grp_fu_172_p1),
    .ce(1'b1),
    .dout(grp_fu_172_p2)
);

fn1_uitodp_32ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
uitodp_32ns_64_6_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_177_p0),
    .ce(1'b1),
    .dout(grp_fu_177_p1)
);

fn1_sitodp_64s_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64s_64_6_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_180_p0),
    .ce(1'b1),
    .dout(grp_fu_180_p1)
);

fn1_sitodp_32s_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_6_no_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_183_p0),
    .ce(1'b1),
    .dout(grp_fu_183_p1)
);

fn1_urem_64ns_9ns_64_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 64 ))
urem_64ns_9ns_64_68_seq_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_211_ap_start),
    .done(grp_fu_211_ap_done),
    .din0(p_load_1_reg_688),
    .din1(grp_fu_211_p1),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

fn1_srem_32ns_11ns_11_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
srem_32ns_11ns_11_36_seq_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_220_ap_start),
    .done(grp_fu_220_ap_done),
    .din0(p_15),
    .din1(grp_fu_220_p1),
    .ce(1'b1),
    .dout(grp_fu_220_p2)
);

fn1_urem_7ns_32ns_32_11_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
urem_7ns_32ns_32_11_seq_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_445_ap_start),
    .done(grp_fu_445_ap_done),
    .din0(grp_fu_445_p0),
    .din1(grp_fu_445_p1),
    .ce(1'b1),
    .dout(grp_fu_445_p2)
);

fn1_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(urem_ln27_reg_841),
    .din1(val_reg_836),
    .ce(1'b1),
    .dout(grp_fu_564_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        add_ln341_reg_764 <= add_ln341_fu_318_p2;
        conv2_reg_780 <= grp_fu_183_p1;
        isNeg_reg_769 <= add_ln341_fu_318_p2[32'd8];
        sub_ln1311_reg_775 <= sub_ln1311_fu_332_p2;
        tmp_15_reg_759 <= tmp_15_fu_310_p1;
        urem_ln26_reg_785 <= grp_fu_211_p2;
        v_12_reg_754 <= grp_fu_164_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        conv4_reg_810 <= grp_fu_161_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        isNeg_1_reg_826 <= add_ln341_1_fu_472_p2[32'd8];
        ush_1_reg_831 <= ush_1_fu_495_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        mul_ln26_reg_846 <= grp_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        or_ln22_reg_790 <= or_ln22_fu_413_p2;
        tmp_1_reg_795 <= {{r_V_7_fu_392_p3[39:25]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_load_1_reg_688 <= p_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state54))) begin
        reg_186 <= grp_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state61))) begin
        reg_192 <= grp_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state61))) begin
        reg_198 <= grp_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state91))) begin
        reg_205 <= grp_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        sub_ln20_reg_729 <= sub_ln20_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        tmp_16_reg_815 <= {{data_V_fu_451_p1[30:23]}};
        tmp_17_reg_821 <= tmp_17_fu_465_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        tmp_18_reg_851 <= {{data_V_1_fu_568_p1[62:52]}};
        tmp_19_reg_857 <= tmp_19_fu_582_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_2_reg_709 <= p_17[32'd7];
        tmp_3_reg_714 <= p_17[32'd5];
        tmp_4_reg_719 <= p_17[32'd3];
        trunc_ln23_reg_724 <= trunc_ln23_fu_255_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        urem_ln27_reg_841 <= grp_fu_445_p2;
        val_reg_836 <= val_fu_557_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        v_8_reg_699 <= v_8_fu_216_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        grp_fu_167_p1 = 64'd13947757137196220416;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_167_p1 = reg_198;
    end else begin
        grp_fu_167_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        grp_fu_172_p0 = reg_205;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_172_p0 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_172_p0 = conv2_reg_780;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_172_p0 = reg_186;
    end else begin
        grp_fu_172_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        grp_fu_172_p1 = reg_186;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_172_p1 = reg_192;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_172_p1 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_172_p1 = 64'd13865921412776756569;
    end else begin
        grp_fu_172_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_177_p0 = mul_ln26_reg_846;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_177_p0 = zext_ln20_fu_226_p1;
    end else begin
        grp_fu_177_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_180_p0 = sext_ln25_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_180_p0 = zext_ln23_fu_287_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_180_p0 = sext_ln20_fu_269_p1;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_211_ap_start = 1'b1;
    end else begin
        grp_fu_211_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_220_ap_start = 1'b1;
    end else begin
        grp_fu_220_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_445_ap_start = 1'b1;
    end else begin
        grp_fu_445_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        p_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_address0 = 64'd6;
    end else begin
        p_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln341_1_fu_472_p2 = ($signed(zext_ln341_1_fu_469_p1) + $signed(9'd385));

assign add_ln341_fu_318_p2 = ($signed(zext_ln341_fu_314_p1) + $signed(9'd385));

assign add_ln510_fu_602_p2 = ($signed(zext_ln510_fu_599_p1) + $signed(12'd3073));

assign and_ln_fu_273_p8 = {{{{{{{tmp_2_reg_709}, {1'd0}}, {tmp_3_reg_714}}, {1'd0}}, {tmp_4_reg_719}}, {2'd0}}, {trunc_ln23_reg_724}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_return = ((isNeg_2_fu_608_p3[0:0] == 1'b1) ? zext_ln662_1_fu_661_p1 : tmp_6_fu_665_p4);

assign bitcast_ln22_fu_296_p1 = grp_fu_164_p1;

assign data_V_1_fu_568_p1 = grp_fu_172_p2;

assign data_V_fu_451_p1 = grp_fu_157_p2;

assign grp_fu_183_p0 = $signed(v_8_reg_699);

assign grp_fu_211_p1 = 64'd219;

assign grp_fu_220_p1 = 32'd714;

assign grp_fu_445_p0 = 32'd41;

assign grp_fu_445_p1 = (p_15 + 32'd134);

assign icmp_ln22_fu_399_p2 = ((p_q0 == 64'd0) ? 1'b1 : 1'b0);

assign isNeg_1_fu_478_p3 = add_ln341_1_fu_472_p2[32'd8];

assign isNeg_2_fu_608_p3 = add_ln510_fu_602_p2[32'd11];

assign mantissa_1_fu_503_p4 = {{{{1'd1}, {tmp_17_reg_821}}}, {1'd0}};

assign mantissa_2_fu_586_p4 = {{{{1'd1}, {tmp_19_reg_857}}}, {1'd0}};

assign mantissa_fu_338_p4 = {{{{1'd1}, {tmp_15_reg_759}}}, {1'd0}};

assign or_ln22_fu_413_p2 = (tmp_fu_405_p3 | icmp_ln22_fu_399_p2);

assign r_V_1_fu_382_p2 = zext_ln68_fu_347_p1 << sh_prom_i_i_i_i_i23_cast_cast_cast_cast_fu_364_p1;

assign r_V_3_fu_523_p2 = zext_ln68_1_fu_512_p1 >> sh_prom_i_i_i_i_i49_cast_cast_cast_cast_fu_519_p1;

assign r_V_4_fu_529_p2 = zext_ln68_1_fu_512_p1 << sh_prom_i_i_i_i_i49_cast_cast_cast_cast_fu_519_p1;

assign r_V_5_fu_641_p2 = zext_ln68_2_fu_595_p1 >> sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_637_p1;

assign r_V_6_fu_647_p2 = zext_ln68_2_fu_595_p1 << sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_637_p1;

assign r_V_7_fu_392_p3 = ((isNeg_reg_769[0:0] == 1'b1) ? zext_ln1286_fu_378_p1 : trunc_ln1286_1_fu_388_p1);

assign r_V_fu_372_p2 = mantissa_fu_338_p4 >> sh_prom_i_i_i_i_i23_cast_cast_castcast_fu_368_p1;

assign sext_ln1311_1_fu_491_p1 = $signed(sub_ln1311_1_fu_486_p2);

assign sext_ln1311_2_fu_621_p1 = $signed(sub_ln1311_2_fu_616_p2);

assign sext_ln1311_fu_351_p1 = $signed(sub_ln1311_reg_775);

assign sext_ln20_fu_269_p1 = $signed(sub_ln20_reg_729);

assign sext_ln25_fu_435_p1 = $signed(v_6_fu_429_p3);

assign sh_prom_i_i_i_i_i23_cast_cast_cast_cast_fu_364_p1 = $unsigned(sh_prom_i_i_i_i_i23_cast_cast_cast_fu_360_p1);

assign sh_prom_i_i_i_i_i23_cast_cast_cast_fu_360_p1 = $signed(ush_fu_354_p3);

assign sh_prom_i_i_i_i_i23_cast_cast_castcast_fu_368_p1 = sh_prom_i_i_i_i_i23_cast_cast_cast_fu_360_p1[24:0];

assign sh_prom_i_i_i_i_i49_cast_cast_cast_cast_fu_519_p1 = $unsigned(sh_prom_i_i_i_i_i49_cast_cast_cast_fu_516_p1);

assign sh_prom_i_i_i_i_i49_cast_cast_cast_fu_516_p1 = $signed(ush_1_reg_831);

assign sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_637_p1 = $unsigned(sh_prom_i_i_i_i_i75_cast_cast_cast_fu_633_p1);

assign sh_prom_i_i_i_i_i75_cast_cast_cast_fu_633_p1 = $signed(ush_2_fu_625_p3);

assign sub_ln1311_1_fu_486_p2 = (8'd127 - tmp_16_reg_815);

assign sub_ln1311_2_fu_616_p2 = (11'd1023 - tmp_18_reg_851);

assign sub_ln1311_fu_332_p2 = (8'd127 - tmp_14_fu_300_p4);

assign sub_ln20_fu_263_p2 = (11'd0 - trunc_ln20_fu_259_p1);

assign tmp_13_fu_653_p3 = r_V_5_fu_641_p2[32'd53];

assign tmp_14_fu_300_p4 = {{bitcast_ln22_fu_296_p1[30:23]}};

assign tmp_15_fu_310_p1 = bitcast_ln22_fu_296_p1[22:0];

assign tmp_17_fu_465_p1 = data_V_fu_451_p1[22:0];

assign tmp_19_fu_582_p1 = data_V_1_fu_568_p1[51:0];

assign tmp_6_fu_665_p4 = {{r_V_6_fu_647_p2[116:53]}};

assign tmp_9_fu_535_p3 = r_V_3_fu_523_p2[32'd24];

assign tmp_fu_405_p3 = r_V_7_fu_392_p3[32'd24];

assign tmp_s_fu_547_p4 = {{r_V_4_fu_529_p2[55:24]}};

assign trunc_ln1286_1_fu_388_p1 = r_V_1_fu_382_p2[39:0];

assign trunc_ln20_fu_259_p1 = grp_fu_220_p2[10:0];

assign trunc_ln23_fu_255_p1 = p_17[0:0];

assign ush_1_fu_495_p3 = ((isNeg_1_fu_478_p3[0:0] == 1'b1) ? sext_ln1311_1_fu_491_p1 : add_ln341_1_fu_472_p2);

assign ush_2_fu_625_p3 = ((isNeg_2_fu_608_p3[0:0] == 1'b1) ? sext_ln1311_2_fu_621_p1 : add_ln510_fu_602_p2);

assign ush_fu_354_p3 = ((isNeg_reg_769[0:0] == 1'b1) ? sext_ln1311_fu_351_p1 : add_ln341_reg_764);

assign v_6_fu_429_p3 = {{tmp_1_reg_795}, {or_ln22_reg_790}};

assign v_8_fu_216_p1 = p_15[15:0];

assign val_fu_557_p3 = ((isNeg_1_reg_826[0:0] == 1'b1) ? zext_ln662_fu_543_p1 : tmp_s_fu_547_p4);

assign zext_ln1286_fu_378_p1 = r_V_fu_372_p2;

assign zext_ln20_fu_226_p1 = p_17;

assign zext_ln23_fu_287_p1 = and_ln_fu_273_p8;

assign zext_ln341_1_fu_469_p1 = tmp_16_reg_815;

assign zext_ln341_fu_314_p1 = tmp_14_fu_300_p4;

assign zext_ln510_fu_599_p1 = tmp_18_reg_851;

assign zext_ln662_1_fu_661_p1 = tmp_13_fu_653_p3;

assign zext_ln662_fu_543_p1 = tmp_9_fu_535_p3;

assign zext_ln68_1_fu_512_p1 = mantissa_1_fu_503_p4;

assign zext_ln68_2_fu_595_p1 = mantissa_2_fu_586_p4;

assign zext_ln68_fu_347_p1 = mantissa_fu_338_p4;

endmodule //fn1
