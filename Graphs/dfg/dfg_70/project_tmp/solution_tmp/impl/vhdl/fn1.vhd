-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (31 downto 0);
    p_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_15 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=43,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1480,HLS_SYN_LUT=3419,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_4453C000 : STD_LOGIC_VECTOR (31 downto 0) := "01000100010100111100000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_C1F840DEE6BA3D71 : STD_LOGIC_VECTOR (63 downto 0) := "1100000111111000010000001101111011100110101110100011110101110001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv16_4930 : STD_LOGIC_VECTOR (15 downto 0) := "0100100100110000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_9_fu_154_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_9_reg_429 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_168_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_186_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_439 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln17_fu_271_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln17_reg_444 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal xor_ln17_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln17_reg_449 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_7_1_reg_454 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv9_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_474 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_10_reg_479 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_11_fu_301_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_11_reg_485 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal data_V_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_144_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_fu_158_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_162_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_176_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_fu_182_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_194_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_203_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_210_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal r_V_fu_214_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal tmp_fu_226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_220_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal zext_ln662_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_238_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_255_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln17_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln17_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_248_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_1_fu_309_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_322_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_325_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_1_fu_339_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_1_fu_344_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_348_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i26_cast_cast_cast_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_1_fu_318_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_360_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_2_fu_364_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_7_fu_376_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln18_fu_305_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_fu_370_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_1_fu_384_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_394_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1312_fu_404_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln18_fu_388_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln18_fu_412_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_uitofp_64ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_mul_64s_64s_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component fn1_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv9_reg_459,
        din1 => ap_const_lv32_4453C000,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U2 : component fn1_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_5,
        din1 => add_reg_464,
        ce => ap_const_logic_1,
        dout => grp_fu_125_p2);

    uitofp_64ns_32_6_no_dsp_1_U3 : component fn1_uitofp_64ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_7_1_reg_454,
        ce => ap_const_logic_1,
        dout => grp_fu_129_p1);

    fpext_32ns_64_2_no_dsp_1_U4 : component fn1_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_reg_469,
        ce => ap_const_logic_1,
        dout => grp_fu_132_p1);

    dmul_64ns_64ns_64_7_max_dsp_1_U5 : component fn1_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_474,
        din1 => ap_const_lv64_C1F840DEE6BA3D71,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p2);

    mul_64s_64s_64_5_1_U6 : component fn1_mul_64s_64s_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln17_reg_444,
        din1 => xor_ln17_reg_449,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_reg_464 <= grp_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                conv9_reg_459 <= grp_fu_129_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                conv_reg_474 <= grp_fu_132_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                div_reg_469 <= grp_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                isNeg_reg_434 <= add_ln341_fu_162_p2(8 downto 8);
                tmp_9_reg_429 <= tmp_9_fu_154_p1;
                ush_reg_439 <= ush_fu_186_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sub_ln17_reg_444 <= sub_ln17_fu_271_p2;
                xor_ln17_reg_449 <= xor_ln17_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                tmp_10_reg_479 <= data_V_1_fu_287_p1(62 downto 52);
                tmp_11_reg_485 <= tmp_11_fu_301_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                v_7_1_reg_454 <= grp_fu_283_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln341_fu_162_p2 <= std_logic_vector(unsigned(zext_ln341_fu_158_p1) + unsigned(ap_const_lv9_181));
    add_ln510_fu_325_p2 <= std_logic_vector(unsigned(zext_ln510_fu_322_p1) + unsigned(ap_const_lv12_C01));
    and_ln18_fu_412_p2 <= (sub_ln18_fu_388_p2 and select_ln1312_fu_404_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (ap_const_lv16_FFFF xor and_ln18_fu_412_p2);
    data_V_1_fu_287_p1 <= grp_fu_135_p2;
    data_V_fu_140_p1 <= p_5;
    isNeg_1_fu_331_p3 <= add_ln510_fu_325_p2(11 downto 11);
    isNeg_fu_168_p3 <= add_ln341_fu_162_p2(8 downto 8);
    mantissa_1_fu_309_p4 <= ((ap_const_lv1_1 & tmp_11_reg_485) & ap_const_lv1_0);
    mantissa_fu_194_p4 <= ((ap_const_lv1_1 & tmp_9_reg_429) & ap_const_lv1_0);
    r_V_1_fu_220_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_203_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_210_p1(31-1 downto 0)))));
    r_V_2_fu_364_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_1_fu_318_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_360_p1(31-1 downto 0)))));
    r_V_3_fu_370_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_1_fu_318_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_360_p1(31-1 downto 0)))));
    r_V_fu_214_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_203_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_210_p1(31-1 downto 0)))));
    select_ln1312_fu_404_p3 <= 
        zext_ln662_1_fu_384_p1 when (isNeg_1_fu_331_p3(0) = '1') else 
        tmp_6_fu_394_p4;
        sext_ln1311_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_339_p2),12));

        sext_ln1311_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_176_p2),9));

        sext_ln17_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_255_p3),32));

    sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i26_cast_cast_cast_fu_356_p1),137));
        sh_prom_i_i_i_i_i26_cast_cast_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_348_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_207_p1),111));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_439),32));

    shl_ln_fu_255_p3 <= (p_13 & ap_const_lv1_0);
    sub_ln1311_1_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_10_reg_479));
    sub_ln1311_fu_176_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_8_fu_144_p4));
    sub_ln17_fu_271_p2 <= std_logic_vector(unsigned(zext_ln17_fu_267_p1) - unsigned(val_fu_248_p3));
    sub_ln18_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv16_4930) - unsigned(trunc_ln18_fu_305_p1));
    tmp_11_fu_301_p1 <= data_V_1_fu_287_p1(52 - 1 downto 0);
    tmp_1_fu_238_p4 <= r_V_1_fu_220_p2(87 downto 24);
    tmp_6_fu_394_p4 <= r_V_3_fu_370_p2(68 downto 53);
    tmp_7_fu_376_p3 <= r_V_2_fu_364_p2(53 downto 53);
    tmp_8_fu_144_p4 <= data_V_fu_140_p1(30 downto 23);
    tmp_9_fu_154_p1 <= data_V_fu_140_p1(23 - 1 downto 0);
    tmp_fu_226_p3 <= r_V_fu_214_p2(24 downto 24);
    trunc_ln18_fu_305_p1 <= p(16 - 1 downto 0);
    ush_1_fu_348_p3 <= 
        sext_ln1311_1_fu_344_p1 when (isNeg_1_fu_331_p3(0) = '1') else 
        add_ln510_fu_325_p2;
    ush_fu_186_p3 <= 
        sext_ln1311_fu_182_p1 when (isNeg_fu_168_p3(0) = '1') else 
        add_ln341_fu_162_p2;
    val_fu_248_p3 <= 
        zext_ln662_fu_234_p1 when (isNeg_reg_434(0) = '1') else 
        tmp_1_fu_238_p4;
    xor_ln17_fu_277_p2 <= (p_15 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln17_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln17_fu_263_p1),64));
    zext_ln341_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_144_p4),9));
    zext_ln510_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_479),12));
    zext_ln662_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_376_p3),16));
    zext_ln662_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_226_p3),64));
    zext_ln68_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_309_p4),137));
    zext_ln68_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_194_p4),111));
end behav;
