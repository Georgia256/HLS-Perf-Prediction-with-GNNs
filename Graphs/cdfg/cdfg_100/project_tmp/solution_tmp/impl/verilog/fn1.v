// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=104,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5327,HLS_SYN_LUT=6490,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_7,
        p_11,
        p_13_address0,
        p_13_ce0,
        p_13_q0,
        p_13_address1,
        p_13_ce1,
        p_13_q1,
        p_19,
        ap_return
);

parameter    ap_ST_fsm_state1 = 131'd1;
parameter    ap_ST_fsm_state2 = 131'd2;
parameter    ap_ST_fsm_state3 = 131'd4;
parameter    ap_ST_fsm_state4 = 131'd8;
parameter    ap_ST_fsm_state5 = 131'd16;
parameter    ap_ST_fsm_state6 = 131'd32;
parameter    ap_ST_fsm_state7 = 131'd64;
parameter    ap_ST_fsm_state8 = 131'd128;
parameter    ap_ST_fsm_state9 = 131'd256;
parameter    ap_ST_fsm_state10 = 131'd512;
parameter    ap_ST_fsm_state11 = 131'd1024;
parameter    ap_ST_fsm_state12 = 131'd2048;
parameter    ap_ST_fsm_state13 = 131'd4096;
parameter    ap_ST_fsm_state14 = 131'd8192;
parameter    ap_ST_fsm_state15 = 131'd16384;
parameter    ap_ST_fsm_state16 = 131'd32768;
parameter    ap_ST_fsm_state17 = 131'd65536;
parameter    ap_ST_fsm_state18 = 131'd131072;
parameter    ap_ST_fsm_state19 = 131'd262144;
parameter    ap_ST_fsm_state20 = 131'd524288;
parameter    ap_ST_fsm_state21 = 131'd1048576;
parameter    ap_ST_fsm_state22 = 131'd2097152;
parameter    ap_ST_fsm_state23 = 131'd4194304;
parameter    ap_ST_fsm_state24 = 131'd8388608;
parameter    ap_ST_fsm_state25 = 131'd16777216;
parameter    ap_ST_fsm_state26 = 131'd33554432;
parameter    ap_ST_fsm_state27 = 131'd67108864;
parameter    ap_ST_fsm_state28 = 131'd134217728;
parameter    ap_ST_fsm_state29 = 131'd268435456;
parameter    ap_ST_fsm_state30 = 131'd536870912;
parameter    ap_ST_fsm_state31 = 131'd1073741824;
parameter    ap_ST_fsm_state32 = 131'd2147483648;
parameter    ap_ST_fsm_state33 = 131'd4294967296;
parameter    ap_ST_fsm_state34 = 131'd8589934592;
parameter    ap_ST_fsm_state35 = 131'd17179869184;
parameter    ap_ST_fsm_state36 = 131'd34359738368;
parameter    ap_ST_fsm_state37 = 131'd68719476736;
parameter    ap_ST_fsm_state38 = 131'd137438953472;
parameter    ap_ST_fsm_state39 = 131'd274877906944;
parameter    ap_ST_fsm_state40 = 131'd549755813888;
parameter    ap_ST_fsm_state41 = 131'd1099511627776;
parameter    ap_ST_fsm_state42 = 131'd2199023255552;
parameter    ap_ST_fsm_state43 = 131'd4398046511104;
parameter    ap_ST_fsm_state44 = 131'd8796093022208;
parameter    ap_ST_fsm_state45 = 131'd17592186044416;
parameter    ap_ST_fsm_state46 = 131'd35184372088832;
parameter    ap_ST_fsm_state47 = 131'd70368744177664;
parameter    ap_ST_fsm_state48 = 131'd140737488355328;
parameter    ap_ST_fsm_state49 = 131'd281474976710656;
parameter    ap_ST_fsm_state50 = 131'd562949953421312;
parameter    ap_ST_fsm_state51 = 131'd1125899906842624;
parameter    ap_ST_fsm_state52 = 131'd2251799813685248;
parameter    ap_ST_fsm_state53 = 131'd4503599627370496;
parameter    ap_ST_fsm_state54 = 131'd9007199254740992;
parameter    ap_ST_fsm_state55 = 131'd18014398509481984;
parameter    ap_ST_fsm_state56 = 131'd36028797018963968;
parameter    ap_ST_fsm_state57 = 131'd72057594037927936;
parameter    ap_ST_fsm_state58 = 131'd144115188075855872;
parameter    ap_ST_fsm_state59 = 131'd288230376151711744;
parameter    ap_ST_fsm_state60 = 131'd576460752303423488;
parameter    ap_ST_fsm_state61 = 131'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 131'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 131'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 131'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 131'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 131'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 131'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 131'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 131'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 131'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 131'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 131'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 131'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 131'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 131'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 131'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 131'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 131'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 131'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 131'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 131'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 131'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 131'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 131'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 131'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 131'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 131'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 131'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 131'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 131'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 131'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 131'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 131'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 131'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 131'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 131'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 131'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 131'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 131'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 131'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 131'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 131'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 131'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 131'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 131'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 131'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 131'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 131'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 131'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 131'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 131'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 131'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 131'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 131'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 131'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 131'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 131'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 131'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 131'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 131'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 131'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 131'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 131'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 131'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 131'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 131'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 131'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 131'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 131'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 131'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 131'd1361129467683753853853498429727072845824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p;
input  [63:0] p_7;
input  [63:0] p_11;
output  [3:0] p_13_address0;
output   p_13_ce0;
input  [63:0] p_13_q0;
output  [3:0] p_13_address1;
output   p_13_ce1;
input  [63:0] p_13_q1;
input  [31:0] p_19;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] p_13_address0;
reg p_13_ce0;
reg p_13_ce1;

(* fsm_encoding = "none" *) reg   [130:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_198_p1;
reg   [63:0] reg_201;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state76;
wire   [63:0] sub_ln42_fu_211_p2;
reg   [63:0] sub_ln42_reg_599;
wire   [0:0] icmp_ln42_fu_217_p2;
reg   [0:0] icmp_ln42_reg_604;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
reg   [63:0] p_13_load_1_reg_624;
wire   [15:0] v_23_fu_235_p1;
reg   [15:0] v_23_reg_629;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state63;
wire   [63:0] grp_fu_184_p2;
reg   [63:0] add_reg_644;
wire    ap_CS_fsm_state69;
wire   [54:0] grp_fu_230_p2;
reg   [54:0] udiv_ln42_reg_649;
wire   [55:0] add_ln42_fu_261_p2;
reg   [55:0] add_ln42_reg_654;
wire    ap_CS_fsm_state70;
wire  signed [63:0] sext_ln41_fu_267_p1;
wire    ap_CS_fsm_state71;
wire   [63:0] grp_fu_189_p2;
reg   [63:0] mul_reg_664;
wire    ap_CS_fsm_state77;
wire   [0:0] icmp_ln41_fu_317_p2;
reg   [0:0] icmp_ln41_reg_674;
wire   [0:0] icmp_ln41_1_fu_323_p2;
reg   [0:0] icmp_ln41_1_reg_679;
wire   [0:0] icmp_ln41_2_fu_329_p2;
reg   [0:0] icmp_ln41_2_reg_684;
wire   [0:0] icmp_ln41_3_fu_335_p2;
reg   [0:0] icmp_ln41_3_reg_689;
wire    ap_CS_fsm_state78;
wire   [0:0] and_ln41_1_fu_359_p2;
reg   [0:0] and_ln41_1_reg_704;
wire   [31:0] v_5_fu_373_p2;
reg   [31:0] v_5_reg_708;
wire   [31:0] sub_ln47_fu_379_p2;
reg  signed [31:0] sub_ln47_reg_713;
wire   [63:0] add_ln48_fu_384_p2;
reg   [63:0] add_ln48_reg_718;
wire    ap_CS_fsm_state79;
wire   [63:0] select_ln49_fu_408_p3;
reg   [63:0] select_ln49_reg_728;
wire   [0:0] icmp_ln49_fu_416_p2;
reg   [0:0] icmp_ln49_reg_733;
reg   [10:0] tmp_5_reg_738;
wire    ap_CS_fsm_state86;
wire   [51:0] tmp_6_fu_436_p1;
reg   [51:0] tmp_6_reg_744;
wire  signed [63:0] grp_fu_403_p2;
reg  signed [63:0] udiv_ln47_reg_749;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state115;
wire   [63:0] grp_fu_443_p2;
reg   [63:0] mul_ln47_reg_759;
wire    ap_CS_fsm_state119;
wire   [63:0] and_ln49_fu_552_p2;
reg   [63:0] and_ln49_reg_764;
wire   [63:0] grp_fu_389_p2;
reg   [63:0] mul_ln56_reg_769;
wire    ap_CS_fsm_state124;
wire   [31:0] add_ln56_fu_563_p2;
reg  signed [31:0] add_ln56_reg_774;
wire    ap_CS_fsm_state125;
wire  signed [63:0] add_ln56_1_fu_568_p2;
reg  signed [63:0] add_ln56_1_reg_779;
wire    ap_CS_fsm_state126;
wire   [63:0] grp_fu_576_p2;
reg   [63:0] result_1_reg_789;
wire    ap_CS_fsm_state130;
wire   [63:0] result_fu_558_p2;
reg   [63:0] ap_phi_mux_result_2_phi_fu_178_p4;
reg   [63:0] result_2_reg_175;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state131;
reg   [63:0] grp_fu_184_p0;
wire    ap_CS_fsm_state80;
wire   [63:0] grp_fu_194_p1;
reg   [63:0] grp_fu_198_p0;
wire  signed [63:0] sub_ln42_fu_211_p0;
wire   [63:0] zext_ln42_fu_207_p1;
wire   [10:0] grp_fu_230_p1;
wire  signed [16:0] sext_ln38_fu_239_p1;
wire   [16:0] grp_fu_248_p0;
wire   [15:0] grp_fu_248_p1;
wire   [54:0] trunc_ln42_fu_254_p1;
wire   [55:0] zext_ln42_1_fu_257_p1;
wire   [63:0] bitcast_ln41_fu_271_p1;
wire   [63:0] xor_ln41_fu_278_p2;
wire   [63:0] bitcast_ln41_2_fu_289_p1;
wire   [10:0] tmp_2_fu_293_p4;
wire   [51:0] trunc_ln41_1_fu_303_p1;
wire   [10:0] tmp_3_fu_307_p4;
wire   [51:0] trunc_ln41_fu_274_p1;
wire   [16:0] grp_fu_248_p2;
wire   [0:0] or_ln41_fu_345_p2;
wire   [0:0] or_ln41_1_fu_349_p2;
wire   [0:0] and_ln41_fu_353_p2;
wire   [0:0] grp_fu_194_p2;
wire  signed [63:0] trunc_ln45_fu_365_p0;
wire   [31:0] trunc_ln45_fu_365_p1;
wire   [31:0] and_ln44_fu_368_p2;
wire  signed [31:0] sext_ln18_fu_341_p1;
wire  signed [63:0] add_ln48_fu_384_p0;
wire  signed [28:0] grp_fu_389_p1;
wire   [31:0] grp_fu_403_p0;
wire   [0:0] icmp_ln46_fu_394_p2;
wire   [63:0] data_V_fu_422_p1;
wire   [53:0] mantissa_fu_448_p4;
wire   [11:0] zext_ln510_fu_461_p1;
wire   [11:0] add_ln510_fu_464_p2;
wire   [10:0] sub_ln1311_fu_478_p2;
wire   [0:0] isNeg_fu_470_p3;
wire  signed [11:0] sext_ln1311_fu_483_p1;
wire   [11:0] ush_fu_487_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_495_p1;
wire   [168:0] zext_ln68_fu_457_p1;
wire   [168:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_499_p1;
wire   [168:0] r_V_fu_503_p2;
wire   [0:0] tmp_fu_515_p3;
wire   [168:0] r_V_1_fu_509_p2;
wire   [63:0] zext_ln662_fu_523_p1;
wire   [63:0] tmp_1_fu_527_p4;
wire   [63:0] val_fu_537_p3;
wire   [63:0] select_ln49_1_fu_545_p3;
reg    grp_fu_230_ap_start;
wire    grp_fu_230_ap_done;
reg    grp_fu_248_ap_start;
wire    grp_fu_248_ap_done;
reg    grp_fu_403_ap_start;
wire    grp_fu_403_ap_done;
reg   [130:0] ap_NS_fsm;
wire   [63:0] grp_fu_230_p10;
wire   [63:0] grp_fu_403_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 131'd1;
end

fn1_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_184_p0),
    .din1(p_11),
    .ce(1'b1),
    .dout(grp_fu_184_p2)
);

fn1_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_reg_644),
    .din1(64'd4895412794951631842),
    .ce(1'b1),
    .dout(grp_fu_189_p2)
);

fn1_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_201),
    .din1(grp_fu_194_p1),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_194_p2)
);

fn1_uitodp_64ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
uitodp_64ns_64_6_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_198_p0),
    .ce(1'b1),
    .dout(grp_fu_198_p1)
);

fn1_udiv_64ns_11ns_55_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 55 ))
udiv_64ns_11ns_55_68_seq_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_230_ap_start),
    .done(grp_fu_230_ap_done),
    .din0(sub_ln42_reg_599),
    .din1(grp_fu_230_p1),
    .ce(1'b1),
    .dout(grp_fu_230_p2)
);

fn1_srem_17ns_16ns_17_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
srem_17ns_16ns_17_21_seq_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_248_ap_start),
    .done(grp_fu_248_ap_done),
    .din0(grp_fu_248_p0),
    .din1(grp_fu_248_p1),
    .ce(1'b1),
    .dout(grp_fu_248_p2)
);

fn1_mul_64s_29s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 64 ))
mul_64s_29s_64_5_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_7),
    .din1(grp_fu_389_p1),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

fn1_udiv_32ns_64ns_64_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
udiv_32ns_64ns_64_36_seq_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_403_ap_start),
    .done(grp_fu_403_ap_done),
    .din0(grp_fu_403_p0),
    .din1(add_ln48_reg_718),
    .ce(1'b1),
    .dout(grp_fu_403_p2)
);

fn1_mul_64s_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_64s_32s_64_5_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(udiv_ln47_reg_749),
    .din1(sub_ln47_reg_713),
    .ce(1'b1),
    .dout(grp_fu_443_p2)
);

fn1_mul_64s_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_64s_32s_64_5_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln56_1_reg_779),
    .din1(add_ln56_reg_774),
    .ce(1'b1),
    .dout(grp_fu_576_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state131)) begin
        result_2_reg_175 <= result_1_reg_789;
    end else if (((1'd0 == and_ln41_1_reg_704) & (1'b1 == ap_CS_fsm_state120))) begin
        result_2_reg_175 <= result_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        add_ln42_reg_654 <= add_ln42_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln41_1_fu_359_p2) & (1'b1 == ap_CS_fsm_state78))) begin
        add_ln48_reg_718 <= add_ln48_fu_384_p2;
        sub_ln47_reg_713 <= sub_ln47_fu_379_p2;
        v_5_reg_708 <= v_5_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        add_ln56_1_reg_779 <= add_ln56_1_fu_568_p2;
        add_ln56_reg_774 <= add_ln56_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        add_reg_644 <= grp_fu_184_p2;
        udiv_ln42_reg_649 <= grp_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        and_ln41_1_reg_704 <= and_ln41_1_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        and_ln49_reg_764 <= and_ln49_fu_552_p2;
        mul_ln47_reg_759 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        icmp_ln41_1_reg_679 <= icmp_ln41_1_fu_323_p2;
        icmp_ln41_2_reg_684 <= icmp_ln41_2_fu_329_p2;
        icmp_ln41_3_reg_689 <= icmp_ln41_3_fu_335_p2;
        icmp_ln41_reg_674 <= icmp_ln41_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln42_reg_604 <= icmp_ln42_fu_217_p2;
        sub_ln42_reg_599 <= sub_ln42_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        icmp_ln49_reg_733 <= icmp_ln49_fu_416_p2;
        select_ln49_reg_728[40 : 37] <= select_ln49_fu_408_p3[40 : 37];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state124)) begin
        mul_ln56_reg_769 <= grp_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        mul_reg_664 <= grp_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        p_13_load_1_reg_624 <= p_13_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state62))) begin
        reg_201 <= grp_fu_198_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        result_1_reg_789 <= grp_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        tmp_5_reg_738 <= {{data_V_fu_422_p1[62:52]}};
        tmp_6_reg_744 <= tmp_6_fu_436_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        udiv_ln47_reg_749 <= grp_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        v_23_reg_629 <= v_23_fu_235_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln41_1_reg_704) & (1'b1 == ap_CS_fsm_state120))) begin
        ap_phi_mux_result_2_phi_fu_178_p4 = result_fu_558_p2;
    end else begin
        ap_phi_mux_result_2_phi_fu_178_p4 = result_2_reg_175;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_184_p0 = select_ln49_reg_728;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_184_p0 = reg_201;
    end else begin
        grp_fu_184_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_198_p0 = sext_ln41_fu_267_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_198_p0 = p_13_load_1_reg_624;
    end else begin
        grp_fu_198_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_230_ap_start = 1'b1;
    end else begin
        grp_fu_230_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_248_ap_start = 1'b1;
    end else begin
        grp_fu_248_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_403_ap_start = 1'b1;
    end else begin
        grp_fu_403_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        p_13_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        p_13_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        p_13_address0 = 64'd0;
    end else begin
        p_13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55))) begin
        p_13_ce0 = 1'b1;
    end else begin
        p_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        p_13_ce1 = 1'b1;
    end else begin
        p_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((1'd1 == and_ln41_1_fu_359_p2) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_261_p2 = ($signed(zext_ln42_1_fu_257_p1) + $signed(56'd72057593838574906));

assign add_ln48_fu_384_p0 = p_7;

assign add_ln48_fu_384_p2 = ($signed(add_ln48_fu_384_p0) + $signed(64'd11));

assign add_ln510_fu_464_p2 = ($signed(zext_ln510_fu_461_p1) + $signed(12'd3073));

assign add_ln56_1_fu_568_p2 = ($signed(mul_ln56_reg_769) + $signed(64'd17591019222103733692));

assign add_ln56_fu_563_p2 = (p_19 + 32'd14484);

assign and_ln41_1_fu_359_p2 = (grp_fu_194_p2 & and_ln41_fu_353_p2);

assign and_ln41_fu_353_p2 = (or_ln41_fu_345_p2 & or_ln41_1_fu_349_p2);

assign and_ln44_fu_368_p2 = (trunc_ln45_fu_365_p1 & p_19);

assign and_ln49_fu_552_p2 = (val_fu_537_p3 & select_ln49_1_fu_545_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_return = ap_phi_mux_result_2_phi_fu_178_p4;

assign bitcast_ln41_2_fu_289_p1 = reg_201;

assign bitcast_ln41_fu_271_p1 = mul_reg_664;

assign data_V_fu_422_p1 = grp_fu_184_p2;

assign grp_fu_194_p1 = xor_ln41_fu_278_p2;

assign grp_fu_230_p1 = grp_fu_230_p10;

assign grp_fu_230_p10 = ((icmp_ln42_reg_604[0:0] == 1'b1) ? 64'd966 : 64'd965);

assign grp_fu_248_p0 = ($signed(17'd0) - $signed(sext_ln38_fu_239_p1));

assign grp_fu_248_p1 = 17'd16403;

assign grp_fu_389_p1 = 64'd18446744073510312643;

assign grp_fu_403_p0 = grp_fu_403_p00;

assign grp_fu_403_p00 = v_5_reg_708;

assign icmp_ln41_1_fu_323_p2 = ((trunc_ln41_1_fu_303_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_2_fu_329_p2 = ((tmp_3_fu_307_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln41_3_fu_335_p2 = ((trunc_ln41_fu_274_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_317_p2 = ((tmp_2_fu_293_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_217_p2 = ((p_19 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_394_p2 = ((p_13_q1 == 64'd52796) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_416_p2 = ((p_13_q0 == 64'd0) ? 1'b1 : 1'b0);

assign isNeg_fu_470_p3 = add_ln510_fu_464_p2[32'd11];

assign mantissa_fu_448_p4 = {{{{1'd1}, {tmp_6_reg_744}}}, {1'd0}};

assign or_ln41_1_fu_349_p2 = (icmp_ln41_3_reg_689 | icmp_ln41_2_reg_684);

assign or_ln41_fu_345_p2 = (icmp_ln41_reg_674 | icmp_ln41_1_reg_679);

assign p_13_address1 = 64'd2;

assign r_V_1_fu_509_p2 = zext_ln68_fu_457_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_499_p1;

assign r_V_fu_503_p2 = zext_ln68_fu_457_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_499_p1;

assign result_fu_558_p2 = (mul_ln47_reg_759 - and_ln49_reg_764);

assign select_ln49_1_fu_545_p3 = ((icmp_ln49_reg_733[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln49_fu_408_p3 = ((icmp_ln46_fu_394_p2[0:0] == 1'b1) ? 64'd4676300880817946624 : 64'd4676301018256900096);

assign sext_ln1311_fu_483_p1 = $signed(sub_ln1311_fu_478_p2);

assign sext_ln18_fu_341_p1 = $signed(grp_fu_248_p2);

assign sext_ln38_fu_239_p1 = $signed(v_23_reg_629);

assign sext_ln41_fu_267_p1 = $signed(add_ln42_reg_654);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_499_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_495_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_495_p1 = $signed(ush_fu_487_p3);

assign sub_ln1311_fu_478_p2 = (11'd1023 - tmp_5_reg_738);

assign sub_ln42_fu_211_p0 = p_7;

assign sub_ln42_fu_211_p2 = ($signed(sub_ln42_fu_211_p0) - $signed(zext_ln42_fu_207_p1));

assign sub_ln47_fu_379_p2 = ($signed(p) - $signed(sext_ln18_fu_341_p1));

assign tmp_1_fu_527_p4 = {{r_V_1_fu_509_p2[116:53]}};

assign tmp_2_fu_293_p4 = {{bitcast_ln41_2_fu_289_p1[62:52]}};

assign tmp_3_fu_307_p4 = {{xor_ln41_fu_278_p2[62:52]}};

assign tmp_6_fu_436_p1 = data_V_fu_422_p1[51:0];

assign tmp_fu_515_p3 = r_V_fu_503_p2[32'd53];

assign trunc_ln41_1_fu_303_p1 = bitcast_ln41_2_fu_289_p1[51:0];

assign trunc_ln41_fu_274_p1 = bitcast_ln41_fu_271_p1[51:0];

assign trunc_ln42_fu_254_p1 = udiv_ln42_reg_649[54:0];

assign trunc_ln45_fu_365_p0 = p_7;

assign trunc_ln45_fu_365_p1 = trunc_ln45_fu_365_p0[31:0];

assign ush_fu_487_p3 = ((isNeg_fu_470_p3[0:0] == 1'b1) ? sext_ln1311_fu_483_p1 : add_ln510_fu_464_p2);

assign v_23_fu_235_p1 = p_13_q0[15:0];

assign v_5_fu_373_p2 = ($signed(32'd4294896184) - $signed(and_ln44_fu_368_p2));

assign val_fu_537_p3 = ((isNeg_fu_470_p3[0:0] == 1'b1) ? zext_ln662_fu_523_p1 : tmp_1_fu_527_p4);

assign xor_ln41_fu_278_p2 = (bitcast_ln41_fu_271_p1 ^ 64'd9223372036854775808);

assign zext_ln42_1_fu_257_p1 = trunc_ln42_fu_254_p1;

assign zext_ln42_fu_207_p1 = p;

assign zext_ln510_fu_461_p1 = tmp_5_reg_738;

assign zext_ln662_fu_523_p1 = tmp_fu_515_p3;

assign zext_ln68_fu_457_p1 = mantissa_fu_448_p4;

always @ (posedge ap_clk) begin
    select_ln49_reg_728[36:0] <= 37'b0000000000000000000000000000000000000;
    select_ln49_reg_728[63:41] <= 23'b01000000111001011000111;
end

endmodule //fn1
