-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (63 downto 0);
    p_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_11_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    p_11_ce0 : OUT STD_LOGIC;
    p_11_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.272000,HLS_SYN_LAT=79,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1377,HLS_SYN_LUT=2932,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (79 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (79 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (79 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (79 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (79 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (79 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (79 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (79 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (79 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (79 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (79 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_3CBC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000011110010111100";
    constant ap_const_lv64_7979 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000111100101111001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv64_6989 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000110100110001001";
    constant ap_const_lv64_333 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100110011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_11_load_reg_417 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln16_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln16_reg_433 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln21_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_438 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln21_fu_232_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln21_reg_448 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_fu_242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_reg_453 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_8_reg_458 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_258_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_9_reg_464 : STD_LOGIC_VECTOR (51 downto 0);
    signal val_fu_351_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_reg_469 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal result_V_2_fu_359_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_2_reg_475 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sub_ln20_fu_364_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln20_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln21_fu_391_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln21_reg_485 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_135_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln16_fu_138_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_148_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln16_fu_142_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln_fu_158_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln16_fu_166_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_fu_196_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln19_1_fu_200_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_210_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln19_fu_218_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_183_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln19_fu_226_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln20_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_fu_262_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_275_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_278_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_292_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_297_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_301_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_271_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_313_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_fu_317_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_7_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_323_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_341_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_376_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln20_fu_385_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal trunc_ln20_fu_401_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_397_ap_start : STD_LOGIC;
    signal grp_fu_397_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_uitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_sdiv_64ns_64ns_8_68_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    uitodp_32ns_64_6_no_dsp_1_U1 : component fn1_uitodp_32ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_135_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p1);

    sdiv_64ns_64ns_8_68_seq_1_U2 : component fn1_sdiv_64ns_64ns_8_68_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_397_ap_start,
        done => grp_fu_397_ap_done,
        din0 => sub_ln20_reg_480,
        din1 => add_ln21_reg_485,
        ce => ap_const_logic_1,
        dout => grp_fu_397_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln21_reg_438 = ap_const_lv1_0))) then
                add_ln21_reg_485 <= add_ln21_fu_391_p2;
                sub_ln20_reg_480 <= sub_ln20_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln21_reg_438 = ap_const_lv1_0))) then
                data_V_reg_453 <= data_V_fu_242_p2;
                tmp_8_reg_458 <= data_V_fu_242_p2(62 downto 52);
                tmp_9_reg_464 <= tmp_9_fu_258_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln21_reg_438 <= icmp_ln21_fu_177_p2;
                sub_ln16_reg_433 <= sub_ln16_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_11_load_reg_417 <= p_11_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln21_reg_438 = ap_const_lv1_0))) then
                result_V_2_reg_475 <= result_V_2_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_reg_438 = ap_const_lv1_0))) then
                sub_ln21_reg_448 <= sub_ln21_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_reg_438 = ap_const_lv1_0))) then
                val_reg_469 <= val_fu_351_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln16_fu_166_p2 <= std_logic_vector(unsigned(or_ln_fu_158_p3) + unsigned(ap_const_lv64_3CBC));
    add_ln21_fu_391_p2 <= std_logic_vector(unsigned(shl_ln20_fu_385_p2) + unsigned(ap_const_lv64_333));
    add_ln510_fu_278_p2 <= std_logic_vector(unsigned(zext_ln510_fu_275_p1) + unsigned(ap_const_lv12_C01));
    and_ln19_fu_226_p2 <= (shl_ln_fu_210_p3 and select_ln19_fu_218_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv8_FF when (icmp_ln21_reg_438(0) = '1') else 
        trunc_ln20_fu_401_p1;
    bitcast_ln20_fu_238_p1 <= grp_fu_135_p1;
    data_V_fu_242_p2 <= (bitcast_ln20_fu_238_p1 xor ap_const_lv64_8000000000000000);
    empty_fu_183_p1 <= p(6 - 1 downto 0);
    grp_fu_135_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_9),32));

    grp_fu_397_ap_start_assign_proc : process(icmp_ln21_reg_438, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln21_reg_438 = ap_const_lv1_0))) then 
            grp_fu_397_ap_start <= ap_const_logic_1;
        else 
            grp_fu_397_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln16_fu_191_p2 <= "1" when (unsigned(sub_ln16_reg_433) < unsigned(ap_const_lv64_7979)) else "0";
    icmp_ln21_fu_177_p2 <= "1" when (p = ap_const_lv64_0) else "0";
    isNeg_fu_284_p3 <= add_ln510_fu_278_p2(11 downto 11);
    mantissa_fu_262_p4 <= ((ap_const_lv1_1 & tmp_9_reg_464) & ap_const_lv1_0);
    or_ln16_fu_142_p2 <= (trunc_ln16_fu_138_p1 or p_13);
    or_ln_fu_158_p3 <= (tmp_fu_148_p4 & or_ln16_fu_142_p2);

    p_11_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_11_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_11_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        else 
            p_11_address0 <= "XXX";
        end if; 
    end process;


    p_11_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_11_ce0 <= ap_const_logic_1;
        else 
            p_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_369_p3 <= data_V_reg_453(63 downto 63);
    r_V_1_fu_323_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_271_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_313_p1(31-1 downto 0)))));
    r_V_fu_317_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_271_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_313_p1(31-1 downto 0)))));
    result_V_2_fu_359_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_reg_469));
    result_V_fu_376_p3 <= 
        result_V_2_reg_475 when (p_Result_s_fu_369_p3(0) = '1') else 
        val_reg_469;
    select_ln19_fu_218_p3 <= 
        ap_const_lv6_3F when (icmp_ln16_fu_191_p2(0) = '1') else 
        ap_const_lv6_0;
        sext_ln1311_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_292_p2),12));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_309_p1),169));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_301_p3),32));

    shl_ln20_fu_385_p2 <= std_logic_vector(shift_left(unsigned(result_V_fu_376_p3),to_integer(unsigned('0' & zext_ln20_fu_382_p1(31-1 downto 0)))));
    shl_ln_fu_210_p3 <= (xor_ln19_fu_204_p2 & ap_const_lv5_0);
    sub_ln1311_fu_292_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_8_reg_458));
    sub_ln16_fu_172_p2 <= std_logic_vector(unsigned(add_ln16_fu_166_p2) - unsigned(p_11_load_reg_417));
    sub_ln20_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv64_6989) - unsigned(p));
    sub_ln21_fu_232_p2 <= std_logic_vector(unsigned(empty_fu_183_p1) - unsigned(and_ln19_fu_226_p2));
    tmp_5_fu_341_p4 <= r_V_1_fu_323_p2(116 downto 53);
    tmp_7_fu_329_p3 <= r_V_fu_317_p2(53 downto 53);
    tmp_9_fu_258_p1 <= data_V_fu_242_p2(52 - 1 downto 0);
    tmp_fu_148_p4 <= p(63 downto 16);
    trunc_ln16_fu_138_p1 <= p(16 - 1 downto 0);
    trunc_ln19_1_fu_200_p1 <= p_11_q0(1 - 1 downto 0);
    trunc_ln19_fu_196_p1 <= p_9(1 - 1 downto 0);
    trunc_ln20_fu_401_p1 <= grp_fu_397_p2(8 - 1 downto 0);
    ush_fu_301_p3 <= 
        sext_ln1311_fu_297_p1 when (isNeg_fu_284_p3(0) = '1') else 
        add_ln510_fu_278_p2;
    val_fu_351_p3 <= 
        zext_ln662_fu_337_p1 when (isNeg_fu_284_p3(0) = '1') else 
        tmp_5_fu_341_p4;
    xor_ln19_fu_204_p2 <= (trunc_ln19_fu_196_p1 xor trunc_ln19_1_fu_200_p1);
    zext_ln15_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_262_p4),169));
    zext_ln20_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln21_reg_448),64));
    zext_ln510_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_458),12));
    zext_ln662_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_329_p3),64));
end behav;
