// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.272000,HLS_SYN_LAT=79,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1377,HLS_SYN_LUT=2932,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_9,
        p_11_address0,
        p_11_ce0,
        p_11_q0,
        p_13,
        ap_return
);

parameter    ap_ST_fsm_state1 = 80'd1;
parameter    ap_ST_fsm_state2 = 80'd2;
parameter    ap_ST_fsm_state3 = 80'd4;
parameter    ap_ST_fsm_state4 = 80'd8;
parameter    ap_ST_fsm_state5 = 80'd16;
parameter    ap_ST_fsm_state6 = 80'd32;
parameter    ap_ST_fsm_state7 = 80'd64;
parameter    ap_ST_fsm_state8 = 80'd128;
parameter    ap_ST_fsm_state9 = 80'd256;
parameter    ap_ST_fsm_state10 = 80'd512;
parameter    ap_ST_fsm_state11 = 80'd1024;
parameter    ap_ST_fsm_state12 = 80'd2048;
parameter    ap_ST_fsm_state13 = 80'd4096;
parameter    ap_ST_fsm_state14 = 80'd8192;
parameter    ap_ST_fsm_state15 = 80'd16384;
parameter    ap_ST_fsm_state16 = 80'd32768;
parameter    ap_ST_fsm_state17 = 80'd65536;
parameter    ap_ST_fsm_state18 = 80'd131072;
parameter    ap_ST_fsm_state19 = 80'd262144;
parameter    ap_ST_fsm_state20 = 80'd524288;
parameter    ap_ST_fsm_state21 = 80'd1048576;
parameter    ap_ST_fsm_state22 = 80'd2097152;
parameter    ap_ST_fsm_state23 = 80'd4194304;
parameter    ap_ST_fsm_state24 = 80'd8388608;
parameter    ap_ST_fsm_state25 = 80'd16777216;
parameter    ap_ST_fsm_state26 = 80'd33554432;
parameter    ap_ST_fsm_state27 = 80'd67108864;
parameter    ap_ST_fsm_state28 = 80'd134217728;
parameter    ap_ST_fsm_state29 = 80'd268435456;
parameter    ap_ST_fsm_state30 = 80'd536870912;
parameter    ap_ST_fsm_state31 = 80'd1073741824;
parameter    ap_ST_fsm_state32 = 80'd2147483648;
parameter    ap_ST_fsm_state33 = 80'd4294967296;
parameter    ap_ST_fsm_state34 = 80'd8589934592;
parameter    ap_ST_fsm_state35 = 80'd17179869184;
parameter    ap_ST_fsm_state36 = 80'd34359738368;
parameter    ap_ST_fsm_state37 = 80'd68719476736;
parameter    ap_ST_fsm_state38 = 80'd137438953472;
parameter    ap_ST_fsm_state39 = 80'd274877906944;
parameter    ap_ST_fsm_state40 = 80'd549755813888;
parameter    ap_ST_fsm_state41 = 80'd1099511627776;
parameter    ap_ST_fsm_state42 = 80'd2199023255552;
parameter    ap_ST_fsm_state43 = 80'd4398046511104;
parameter    ap_ST_fsm_state44 = 80'd8796093022208;
parameter    ap_ST_fsm_state45 = 80'd17592186044416;
parameter    ap_ST_fsm_state46 = 80'd35184372088832;
parameter    ap_ST_fsm_state47 = 80'd70368744177664;
parameter    ap_ST_fsm_state48 = 80'd140737488355328;
parameter    ap_ST_fsm_state49 = 80'd281474976710656;
parameter    ap_ST_fsm_state50 = 80'd562949953421312;
parameter    ap_ST_fsm_state51 = 80'd1125899906842624;
parameter    ap_ST_fsm_state52 = 80'd2251799813685248;
parameter    ap_ST_fsm_state53 = 80'd4503599627370496;
parameter    ap_ST_fsm_state54 = 80'd9007199254740992;
parameter    ap_ST_fsm_state55 = 80'd18014398509481984;
parameter    ap_ST_fsm_state56 = 80'd36028797018963968;
parameter    ap_ST_fsm_state57 = 80'd72057594037927936;
parameter    ap_ST_fsm_state58 = 80'd144115188075855872;
parameter    ap_ST_fsm_state59 = 80'd288230376151711744;
parameter    ap_ST_fsm_state60 = 80'd576460752303423488;
parameter    ap_ST_fsm_state61 = 80'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 80'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 80'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 80'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 80'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 80'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 80'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 80'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 80'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 80'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 80'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 80'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 80'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 80'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 80'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 80'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 80'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 80'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 80'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 80'd604462909807314587353088;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
input  [15:0] p_9;
output  [2:0] p_11_address0;
output   p_11_ce0;
input  [63:0] p_11_q0;
input  [15:0] p_13;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] p_11_address0;
reg p_11_ce0;

(* fsm_encoding = "none" *) reg   [79:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] p_11_load_reg_417;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [63:0] sub_ln16_fu_172_p2;
reg   [63:0] sub_ln16_reg_433;
wire   [0:0] icmp_ln21_fu_177_p2;
reg   [0:0] icmp_ln21_reg_438;
wire    ap_CS_fsm_state4;
wire   [5:0] sub_ln21_fu_232_p2;
reg   [5:0] sub_ln21_reg_448;
wire   [63:0] data_V_fu_242_p2;
reg   [63:0] data_V_reg_453;
wire    ap_CS_fsm_state9;
reg   [10:0] tmp_8_reg_458;
wire   [51:0] tmp_9_fu_258_p1;
reg   [51:0] tmp_9_reg_464;
wire   [63:0] val_fu_351_p3;
reg   [63:0] val_reg_469;
wire    ap_CS_fsm_state10;
wire   [63:0] result_V_2_fu_359_p2;
reg   [63:0] result_V_2_reg_475;
wire    ap_CS_fsm_state11;
wire   [63:0] sub_ln20_fu_364_p2;
reg   [63:0] sub_ln20_reg_480;
wire    ap_CS_fsm_state12;
wire   [63:0] add_ln21_fu_391_p2;
reg   [63:0] add_ln21_reg_485;
wire   [31:0] grp_fu_135_p0;
wire   [15:0] trunc_ln16_fu_138_p1;
wire   [47:0] tmp_fu_148_p4;
wire   [15:0] or_ln16_fu_142_p2;
wire   [63:0] or_ln_fu_158_p3;
wire   [63:0] add_ln16_fu_166_p2;
wire   [0:0] trunc_ln19_fu_196_p1;
wire   [0:0] trunc_ln19_1_fu_200_p1;
wire   [0:0] xor_ln19_fu_204_p2;
wire   [0:0] icmp_ln16_fu_191_p2;
wire   [5:0] shl_ln_fu_210_p3;
wire   [5:0] select_ln19_fu_218_p3;
wire   [5:0] empty_fu_183_p1;
wire   [5:0] and_ln19_fu_226_p2;
wire   [63:0] grp_fu_135_p1;
wire   [63:0] bitcast_ln20_fu_238_p1;
wire   [53:0] mantissa_fu_262_p4;
wire   [11:0] zext_ln510_fu_275_p1;
wire   [11:0] add_ln510_fu_278_p2;
wire   [10:0] sub_ln1311_fu_292_p2;
wire   [0:0] isNeg_fu_284_p3;
wire  signed [11:0] sext_ln1311_fu_297_p1;
wire   [11:0] ush_fu_301_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_309_p1;
wire   [168:0] zext_ln15_fu_271_p1;
wire   [168:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_313_p1;
wire   [168:0] r_V_fu_317_p2;
wire   [0:0] tmp_7_fu_329_p3;
wire   [168:0] r_V_1_fu_323_p2;
wire   [63:0] zext_ln662_fu_337_p1;
wire   [63:0] tmp_5_fu_341_p4;
wire   [0:0] p_Result_s_fu_369_p3;
wire   [63:0] result_V_fu_376_p3;
wire   [63:0] zext_ln20_fu_382_p1;
wire   [63:0] shl_ln20_fu_385_p2;
wire    ap_CS_fsm_state13;
wire   [7:0] grp_fu_397_p2;
wire    ap_CS_fsm_state80;
wire   [7:0] trunc_ln20_fu_401_p1;
reg    grp_fu_397_ap_start;
wire    grp_fu_397_ap_done;
reg   [79:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 80'd1;
end

fn1_uitodp_32ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
uitodp_32ns_64_6_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_135_p0),
    .ce(1'b1),
    .dout(grp_fu_135_p1)
);

fn1_sdiv_64ns_64ns_8_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 8 ))
sdiv_64ns_64ns_8_68_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_397_ap_start),
    .done(grp_fu_397_ap_done),
    .din0(sub_ln20_reg_480),
    .din1(add_ln21_reg_485),
    .ce(1'b1),
    .dout(grp_fu_397_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln21_reg_438 == 1'd0))) begin
        add_ln21_reg_485 <= add_ln21_fu_391_p2;
        sub_ln20_reg_480 <= sub_ln20_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln21_reg_438 == 1'd0))) begin
        data_V_reg_453 <= data_V_fu_242_p2;
        tmp_8_reg_458 <= {{data_V_fu_242_p2[62:52]}};
        tmp_9_reg_464 <= tmp_9_fu_258_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln21_reg_438 <= icmp_ln21_fu_177_p2;
        sub_ln16_reg_433 <= sub_ln16_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_11_load_reg_417 <= p_11_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln21_reg_438 == 1'd0))) begin
        result_V_2_reg_475 <= result_V_2_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_reg_438 == 1'd0))) begin
        sub_ln21_reg_448 <= sub_ln21_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_reg_438 == 1'd0))) begin
        val_reg_469 <= val_fu_351_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln21_reg_438 == 1'd0))) begin
        grp_fu_397_ap_start = 1'b1;
    end else begin
        grp_fu_397_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_11_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_11_address0 = 64'd3;
    end else begin
        p_11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_11_ce0 = 1'b1;
    end else begin
        p_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_166_p2 = (or_ln_fu_158_p3 + 64'd15548);

assign add_ln21_fu_391_p2 = (shl_ln20_fu_385_p2 + 64'd819);

assign add_ln510_fu_278_p2 = ($signed(zext_ln510_fu_275_p1) + $signed(12'd3073));

assign and_ln19_fu_226_p2 = (shl_ln_fu_210_p3 & select_ln19_fu_218_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = ((icmp_ln21_reg_438[0:0] == 1'b1) ? 8'd255 : trunc_ln20_fu_401_p1);

assign bitcast_ln20_fu_238_p1 = grp_fu_135_p1;

assign data_V_fu_242_p2 = (bitcast_ln20_fu_238_p1 ^ 64'd9223372036854775808);

assign empty_fu_183_p1 = p[5:0];

assign grp_fu_135_p0 = p_9;

assign icmp_ln16_fu_191_p2 = ((sub_ln16_reg_433 < 64'd31097) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_177_p2 = ((p == 64'd0) ? 1'b1 : 1'b0);

assign isNeg_fu_284_p3 = add_ln510_fu_278_p2[32'd11];

assign mantissa_fu_262_p4 = {{{{1'd1}, {tmp_9_reg_464}}}, {1'd0}};

assign or_ln16_fu_142_p2 = (trunc_ln16_fu_138_p1 | p_13);

assign or_ln_fu_158_p3 = {{tmp_fu_148_p4}, {or_ln16_fu_142_p2}};

assign p_Result_s_fu_369_p3 = data_V_reg_453[32'd63];

assign r_V_1_fu_323_p2 = zext_ln15_fu_271_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_313_p1;

assign r_V_fu_317_p2 = zext_ln15_fu_271_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_313_p1;

assign result_V_2_fu_359_p2 = (64'd0 - val_reg_469);

assign result_V_fu_376_p3 = ((p_Result_s_fu_369_p3[0:0] == 1'b1) ? result_V_2_reg_475 : val_reg_469);

assign select_ln19_fu_218_p3 = ((icmp_ln16_fu_191_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign sext_ln1311_fu_297_p1 = $signed(sub_ln1311_fu_292_p2);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_313_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_309_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_309_p1 = $signed(ush_fu_301_p3);

assign shl_ln20_fu_385_p2 = result_V_fu_376_p3 << zext_ln20_fu_382_p1;

assign shl_ln_fu_210_p3 = {{xor_ln19_fu_204_p2}, {5'd0}};

assign sub_ln1311_fu_292_p2 = (11'd1023 - tmp_8_reg_458);

assign sub_ln16_fu_172_p2 = (add_ln16_fu_166_p2 - p_11_load_reg_417);

assign sub_ln20_fu_364_p2 = (64'd27017 - p);

assign sub_ln21_fu_232_p2 = (empty_fu_183_p1 - and_ln19_fu_226_p2);

assign tmp_5_fu_341_p4 = {{r_V_1_fu_323_p2[116:53]}};

assign tmp_7_fu_329_p3 = r_V_fu_317_p2[32'd53];

assign tmp_9_fu_258_p1 = data_V_fu_242_p2[51:0];

assign tmp_fu_148_p4 = {{p[63:16]}};

assign trunc_ln16_fu_138_p1 = p[15:0];

assign trunc_ln19_1_fu_200_p1 = p_11_q0[0:0];

assign trunc_ln19_fu_196_p1 = p_9[0:0];

assign trunc_ln20_fu_401_p1 = grp_fu_397_p2[7:0];

assign ush_fu_301_p3 = ((isNeg_fu_284_p3[0:0] == 1'b1) ? sext_ln1311_fu_297_p1 : add_ln510_fu_278_p2);

assign val_fu_351_p3 = ((isNeg_fu_284_p3[0:0] == 1'b1) ? zext_ln662_fu_337_p1 : tmp_5_fu_341_p4);

assign xor_ln19_fu_204_p2 = (trunc_ln19_fu_196_p1 ^ trunc_ln19_1_fu_200_p1);

assign zext_ln15_fu_271_p1 = mantissa_fu_262_p4;

assign zext_ln20_fu_382_p1 = sub_ln21_reg_448;

assign zext_ln510_fu_275_p1 = tmp_8_reg_458;

assign zext_ln662_fu_337_p1 = tmp_7_fu_329_p3;

endmodule //fn1
