// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1734,HLS_SYN_LUT=1911,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_4,
        p_6,
        p_8,
        p_11,
        ap_return
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
input  [63:0] p_4;
input  [7:0] p_6;
input  [15:0] p_8;
input  [63:0] p_11;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] add_ln18_fu_126_p2;
reg   [63:0] add_ln18_reg_353;
wire  signed [8:0] empty_fu_137_p1;
wire    ap_CS_fsm_state6;
wire  signed [8:0] mul_ln14_fu_141_p2;
wire    ap_CS_fsm_state8;
wire  signed [8:0] grp_fu_345_p3;
reg  signed [8:0] add_ln14_reg_373;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_123_p1;
reg   [31:0] conv9_reg_383;
wire    ap_CS_fsm_state15;
reg   [7:0] tmp_8_reg_388;
wire    ap_CS_fsm_state20;
wire   [22:0] tmp_9_fu_211_p1;
reg   [22:0] tmp_9_reg_394;
wire   [63:0] grp_fu_132_p2;
reg   [63:0] urem_ln18_reg_399;
wire    ap_CS_fsm_state21;
wire   [0:0] isNeg_fu_224_p3;
reg   [0:0] isNeg_reg_404;
wire   [8:0] ush_fu_241_p3;
reg   [8:0] ush_reg_409;
wire  signed [63:0] sub_ln18_fu_255_p2;
reg  signed [63:0] sub_ln18_reg_414;
wire    ap_CS_fsm_state22;
wire   [7:0] lshr_ln19_fu_331_p2;
reg   [7:0] lshr_ln19_reg_419;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state16;
wire   [63:0] grp_fu_123_p0;
wire   [15:0] grp_fu_132_p0;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_147_p3;
wire   [4:0] tmp_3_fu_155_p4;
wire   [0:0] trunc_ln13_fu_165_p1;
wire   [8:0] and_ln_fu_169_p6;
wire   [31:0] grp_fu_118_p2;
wire   [31:0] data_V_fu_197_p1;
wire   [8:0] zext_ln341_fu_215_p1;
wire   [8:0] add_ln341_fu_218_p2;
wire   [7:0] sub_ln1311_fu_232_p2;
wire  signed [8:0] sext_ln1311_fu_237_p1;
wire   [63:0] xor_ln18_fu_249_p2;
wire   [24:0] mantissa_fu_260_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i21_cast_cast_cast_fu_273_p1;
wire   [54:0] zext_ln68_fu_269_p1;
wire   [54:0] sh_prom_i_i_i_i_i21_cast_cast_cast_cast_fu_276_p1;
wire   [54:0] r_V_fu_280_p2;
wire   [0:0] tmp_7_fu_292_p3;
wire   [54:0] r_V_1_fu_286_p2;
wire   [7:0] zext_ln662_fu_300_p1;
wire   [7:0] tmp_5_fu_304_p4;
wire   [0:0] icmp_ln20_fu_321_p2;
wire   [7:0] val_fu_314_p3;
wire   [7:0] zext_ln19_fu_327_p1;
wire   [7:0] grp_fu_340_p1;
wire   [8:0] grp_fu_345_p2;
reg    grp_fu_132_ap_start;
wire    grp_fu_132_ap_done;
wire   [63:0] grp_fu_340_p2;
wire    ap_CS_fsm_state27;
reg   [26:0] ap_NS_fsm;
wire   [63:0] grp_fu_340_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

fn1_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv9_reg_383),
    .din1(32'd3292871104),
    .ce(1'b1),
    .dout(grp_fu_118_p2)
);

fn1_uitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
uitofp_64ns_32_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_123_p0),
    .ce(1'b1),
    .dout(grp_fu_123_p1)
);

fn1_urem_16ns_64ns_64_20_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
urem_16ns_64ns_64_20_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_132_ap_start),
    .done(grp_fu_132_ap_done),
    .din0(grp_fu_132_p0),
    .din1(add_ln18_reg_353),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

fn1_mul_9s_9ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9ns_9_1_1_U4(
    .din0(empty_fu_137_p1),
    .din1(9'd203),
    .dout(mul_ln14_fu_141_p2)
);

fn1_mul_64s_8ns_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 64 ))
mul_64s_8ns_64_5_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln18_reg_414),
    .din1(grp_fu_340_p1),
    .ce(1'b1),
    .dout(grp_fu_340_p2)
);

fn1_mac_muladd_9s_9s_9ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mac_muladd_9s_9s_9ns_9_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln14_fu_141_p2),
    .din1(empty_fu_137_p1),
    .din2(grp_fu_345_p2),
    .ce(1'b1),
    .dout(grp_fu_345_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln14_reg_373 <= grp_fu_345_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln18_reg_353 <= add_ln18_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv9_reg_383 <= grp_fu_123_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        isNeg_reg_404 <= add_ln341_fu_218_p2[32'd8];
        urem_ln18_reg_399 <= grp_fu_132_p2;
        ush_reg_409 <= ush_fu_241_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        lshr_ln19_reg_419 <= lshr_ln19_fu_331_p2;
        sub_ln18_reg_414 <= sub_ln18_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_8_reg_388 <= {{data_V_fu_197_p1[30:23]}};
        tmp_9_reg_394 <= tmp_9_fu_211_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_132_ap_start = 1'b1;
    end else begin
        grp_fu_132_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_126_p2 = (p_4 + 64'd867);

assign add_ln341_fu_218_p2 = ($signed(zext_ln341_fu_215_p1) + $signed(9'd385));

assign and_ln_fu_169_p6 = {{{{{tmp_fu_147_p3}, {1'd0}}, {tmp_3_fu_155_p4}}, {1'd0}}, {trunc_ln13_fu_165_p1}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = grp_fu_340_p2;

assign data_V_fu_197_p1 = grp_fu_118_p2;

assign empty_fu_137_p1 = p_11[8:0];

assign grp_fu_123_p0 = {{add_ln14_reg_373}, {55'd0}};

assign grp_fu_132_p0 = 64'd30898;

assign grp_fu_340_p1 = grp_fu_340_p10;

assign grp_fu_340_p10 = lshr_ln19_reg_419;

assign grp_fu_345_p2 = (and_ln_fu_169_p6 + 9'd6);

assign icmp_ln20_fu_321_p2 = ((p_6 == 8'd0) ? 1'b1 : 1'b0);

assign isNeg_fu_224_p3 = add_ln341_fu_218_p2[32'd8];

assign lshr_ln19_fu_331_p2 = val_fu_314_p3 >> zext_ln19_fu_327_p1;

assign mantissa_fu_260_p4 = {{{{1'd1}, {tmp_9_reg_394}}}, {1'd0}};

assign r_V_1_fu_286_p2 = zext_ln68_fu_269_p1 << sh_prom_i_i_i_i_i21_cast_cast_cast_cast_fu_276_p1;

assign r_V_fu_280_p2 = zext_ln68_fu_269_p1 >> sh_prom_i_i_i_i_i21_cast_cast_cast_cast_fu_276_p1;

assign sext_ln1311_fu_237_p1 = $signed(sub_ln1311_fu_232_p2);

assign sh_prom_i_i_i_i_i21_cast_cast_cast_cast_fu_276_p1 = $unsigned(sh_prom_i_i_i_i_i21_cast_cast_cast_fu_273_p1);

assign sh_prom_i_i_i_i_i21_cast_cast_cast_fu_273_p1 = $signed(ush_reg_409);

assign sub_ln1311_fu_232_p2 = (8'd127 - tmp_8_reg_388);

assign sub_ln18_fu_255_p2 = (xor_ln18_fu_249_p2 - urem_ln18_reg_399);

assign tmp_3_fu_155_p4 = {{p_8[6:2]}};

assign tmp_5_fu_304_p4 = {{r_V_1_fu_286_p2[31:24]}};

assign tmp_7_fu_292_p3 = r_V_fu_280_p2[32'd24];

assign tmp_9_fu_211_p1 = data_V_fu_197_p1[22:0];

assign tmp_fu_147_p3 = p_8[32'd8];

assign trunc_ln13_fu_165_p1 = p_8[0:0];

assign ush_fu_241_p3 = ((isNeg_fu_224_p3[0:0] == 1'b1) ? sext_ln1311_fu_237_p1 : add_ln341_fu_218_p2);

assign val_fu_314_p3 = ((isNeg_reg_404[0:0] == 1'b1) ? zext_ln662_fu_300_p1 : tmp_5_fu_304_p4);

assign xor_ln18_fu_249_p2 = (p ^ 64'd18446744073709551615);

assign zext_ln19_fu_327_p1 = icmp_ln20_fu_321_p2;

assign zext_ln341_fu_215_p1 = tmp_8_reg_388;

assign zext_ln662_fu_300_p1 = tmp_7_fu_292_p3;

assign zext_ln68_fu_269_p1 = mantissa_fu_260_p4;

endmodule //fn1
