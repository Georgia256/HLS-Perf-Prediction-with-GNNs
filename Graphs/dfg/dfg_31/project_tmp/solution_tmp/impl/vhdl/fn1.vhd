-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_ce0 : OUT STD_LOGIC;
    p_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=32,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1361,HLS_SYN_LUT=2521,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_C1B06520E7000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000110110000011001010010000011100111000000000000000000000000";
    constant ap_const_lv8_31 : STD_LOGIC_VECTOR (7 downto 0) := "00110001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv33_9D : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv31_7FFFB449 : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111011010001001001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_97_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_11_reg_308 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_92_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Result_s_reg_328 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal val_fu_228_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_reg_333 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_290_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln23_reg_344 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal sub_ln28_fu_258_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln28_reg_349 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_97_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_105_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal data_V_fu_111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_132_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_136_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_2_fu_122_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_fu_150_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_154_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_168_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_174_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_178_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_146_p1 : STD_LOGIC_VECTOR (120 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_190_p1 : STD_LOGIC_VECTOR (120 downto 0);
    signal r_V_fu_194_p2 : STD_LOGIC_VECTOR (120 downto 0);
    signal tmp_fu_206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_200_p2 : STD_LOGIC_VECTOR (120 downto 0);
    signal zext_ln662_fu_214_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_218_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_2_fu_236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_fu_241_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_105_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln20_fu_251_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln28_fu_254_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln28_2_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_fu_267_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_280_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_280_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_105_ap_start : STD_LOGIC;
    signal grp_fu_105_ap_done : STD_LOGIC;
    signal grp_fu_280_ap_start : STD_LOGIC;
    signal grp_fu_280_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_dadd_64ns_64ns_64_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_uitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_srem_8ns_7ns_8_12_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fn1_sdiv_11s_33ns_8_15_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fn1_mac_muladd_16s_16s_1ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    dadd_64ns_64ns_64_7_full_dsp_1_U1 : component fn1_dadd_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_11_reg_308,
        din1 => ap_const_lv64_C1B06520E7000000,
        ce => ap_const_logic_1,
        dout => grp_fu_92_p2);

    uitodp_32ns_64_6_no_dsp_1_U2 : component fn1_uitodp_32ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_97_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_97_p1);

    srem_8ns_7ns_8_12_seq_1_U3 : component fn1_srem_8ns_7ns_8_12_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_105_ap_start,
        done => grp_fu_105_ap_done,
        din0 => p_q0,
        din1 => grp_fu_105_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_105_p2);

    sdiv_11s_33ns_8_15_seq_1_U4 : component fn1_sdiv_11s_33ns_8_15_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 33,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_280_ap_start,
        done => grp_fu_280_ap_done,
        din0 => grp_fu_280_p0,
        din1 => grp_fu_280_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p2);

    mac_muladd_16s_16s_1ns_31_4_1_U5 : component fn1_mac_muladd_16s_16s_1ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 1,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => result_V_fu_241_p3,
        din1 => grp_fu_290_p1,
        din2 => grp_fu_290_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln23_reg_344 <= grp_fu_290_p3;
                sub_ln28_reg_349 <= sub_ln28_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                dc_reg_323 <= grp_fu_92_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_Result_s_reg_328 <= data_V_fu_111_p1(63 downto 63);
                val_reg_333 <= val_fu_228_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                v_11_reg_308 <= grp_fu_97_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln510_fu_154_p2 <= std_logic_vector(unsigned(zext_ln510_fu_150_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_280_p2(8 - 1 downto 0);
    data_V_fu_111_p1 <= dc_reg_323;

    grp_fu_105_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_105_ap_start <= ap_const_logic_1;
        else 
            grp_fu_105_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_105_p1 <= ap_const_lv8_31(7 - 1 downto 0);

    grp_fu_280_ap_start_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_280_ap_start <= ap_const_logic_1;
        else 
            grp_fu_280_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_280_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln28_reg_349),11));

    grp_fu_280_p1 <= std_logic_vector(unsigned(zext_ln28_fu_267_p1) + unsigned(ap_const_lv33_9D));
    grp_fu_290_p1 <= ap_const_lv31_7FFFB449(16 - 1 downto 0);
    grp_fu_290_p2 <= ap_const_lv31_1(1 - 1 downto 0);
    grp_fu_97_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_4),32));
    isNeg_fu_160_p3 <= add_ln510_fu_154_p2(11 downto 11);
    mantissa_fu_136_p4 <= ((ap_const_lv1_1 & tmp_3_fu_132_p1) & ap_const_lv1_0);
    p_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    p_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_ce0 <= ap_const_logic_1;
        else 
            p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_200_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_146_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_190_p1(31-1 downto 0)))));
    r_V_fu_194_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_146_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_190_p1(31-1 downto 0)))));
    result_V_2_fu_236_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_reg_333));
    result_V_fu_241_p3 <= 
        result_V_2_fu_236_p2 when (p_Result_s_reg_328(0) = '1') else 
        val_reg_333;
        sext_ln1311_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_168_p2),12));

        sext_ln28_2_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_reg_344),32));

        sext_ln28_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_105_p2),10));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_186_p1),121));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_178_p3),32));

    sub_ln1311_fu_168_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_2_fu_122_p4));
    sub_ln28_fu_258_p2 <= std_logic_vector(unsigned(zext_ln20_fu_251_p1) - unsigned(sext_ln28_fu_254_p1));
    tmp_1_fu_218_p4 <= r_V_1_fu_200_p2(68 downto 53);
    tmp_2_fu_122_p4 <= data_V_fu_111_p1(62 downto 52);
    tmp_3_fu_132_p1 <= data_V_fu_111_p1(52 - 1 downto 0);
    tmp_fu_206_p3 <= r_V_fu_194_p2(53 downto 53);
    ush_fu_178_p3 <= 
        sext_ln1311_fu_174_p1 when (isNeg_fu_160_p3(0) = '1') else 
        add_ln510_fu_154_p2;
    val_fu_228_p3 <= 
        zext_ln662_fu_214_p1 when (isNeg_fu_160_p3(0) = '1') else 
        tmp_1_fu_218_p4;
    zext_ln15_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_136_p4),121));
    zext_ln20_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_4),10));
    zext_ln28_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln28_2_fu_264_p1),33));
    zext_ln510_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_122_p4),12));
    zext_ln662_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_206_p3),16));
end behav;
