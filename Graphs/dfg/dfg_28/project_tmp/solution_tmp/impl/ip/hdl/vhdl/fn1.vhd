-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (7 downto 0);
    p_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.757875,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=646,HLS_SYN_LUT=568,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv33_FFFFEB6F : STD_LOGIC_VECTOR (32 downto 0) := "011111111111111111110101101101111";
    constant ap_const_lv17_B4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010110100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv16_4048 : STD_LOGIC_VECTOR (15 downto 0) := "0100000001001000";
    constant ap_const_lv16_D567 : STD_LOGIC_VECTOR (15 downto 0) := "1101010101100111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_70_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_9_reg_155 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln18_fu_50_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_1_fu_60_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_70_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_70_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal v_5_fu_46_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_fu_80_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln21_fu_84_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_94_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_94_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_94_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln20_fu_103_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln21_fu_107_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_fu_100_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln21_1_fu_112_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln21_fu_116_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_70_ap_start : STD_LOGIC;
    signal grp_fu_70_ap_done : STD_LOGIC;
    signal grp_fu_94_ap_start : STD_LOGIC;
    signal grp_fu_94_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_70_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_urem_1ns_33ns_1_5_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fn1_srem_9s_18ns_8_13_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    urem_1ns_33ns_1_5_seq_1_U1 : component fn1_urem_1ns_33ns_1_5_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 1,
        din1_WIDTH => 33,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_70_ap_start,
        done => grp_fu_70_ap_done,
        din0 => grp_fu_70_p0,
        din1 => grp_fu_70_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_70_p2);

    srem_9s_18ns_8_13_seq_1_U2 : component fn1_srem_9s_18ns_8_13_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_94_ap_start,
        done => grp_fu_94_ap_done,
        din0 => grp_fu_94_p0,
        din1 => grp_fu_94_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_94_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                v_9_reg_155 <= grp_fu_70_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln21_fu_84_p2 <= std_logic_vector(unsigned(zext_ln21_fu_80_p1) + unsigned(ap_const_lv17_B4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(signed(sext_ln21_1_fu_112_p1) + signed(select_ln21_fu_116_p3));

    grp_fu_70_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_70_ap_start <= ap_const_logic_1;
        else 
            grp_fu_70_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_70_p0 <= grp_fu_70_p00(1 - 1 downto 0);
    grp_fu_70_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln18_fu_50_p2),33));
    grp_fu_70_p1 <= std_logic_vector(unsigned(zext_ln18_1_fu_60_p1) + unsigned(ap_const_lv33_FFFFEB6F));

    grp_fu_94_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_94_ap_start <= ap_const_logic_1;
        else 
            grp_fu_94_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_94_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(v_5_fu_46_p1),9));

    grp_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_84_p2),18));
    icmp_ln18_fu_50_p2 <= "1" when (p = ap_const_lv8_0) else "0";
    or_ln21_fu_107_p2 <= (trunc_ln20_fu_103_p1 or p);
    select_ln21_fu_116_p3 <= 
        ap_const_lv16_4048 when (trunc_ln11_fu_100_p1(0) = '1') else 
        ap_const_lv16_D567;
        sext_ln21_1_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln21_fu_107_p2),16));

    trunc_ln11_fu_100_p1 <= v_9_reg_155(1 - 1 downto 0);
    trunc_ln20_fu_103_p1 <= grp_fu_94_p2(8 - 1 downto 0);
    v_5_fu_46_p1 <= p_7(8 - 1 downto 0);
    zext_ln18_1_fu_60_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_7),33));
    zext_ln21_fu_80_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_7),17));
end behav;
