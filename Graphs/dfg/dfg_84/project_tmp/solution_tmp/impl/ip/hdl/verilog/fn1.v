// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1301,HLS_SYN_LUT=2319,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        ap_return
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_85_p1;
reg   [63:0] conv6_reg_338;
wire    ap_CS_fsm_state6;
wire   [10:0] zext_ln9_fu_96_p1;
reg   [10:0] zext_ln9_reg_343;
wire    ap_CS_fsm_state7;
wire   [11:0] sub_ln23_fu_148_p2;
reg   [11:0] sub_ln23_reg_349;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_88_p1;
reg   [63:0] conv5_reg_364;
wire    ap_CS_fsm_state13;
wire   [63:0] grp_fu_80_p2;
reg   [63:0] add_reg_369;
reg   [10:0] tmp_10_reg_374;
wire    ap_CS_fsm_state20;
wire   [51:0] tmp_11_fu_182_p1;
reg   [51:0] tmp_11_reg_380;
wire   [10:0] grp_fu_163_p2;
reg   [10:0] urem_ln25_reg_385;
reg   [2:0] tmp_reg_390;
wire   [7:0] or_ln26_fu_296_p2;
reg   [7:0] or_ln26_reg_395;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [42:0] grp_fu_312_p2;
reg   [42:0] mul_ln27_reg_405;
wire    ap_CS_fsm_state23;
reg   [63:0] grp_fu_80_p0;
reg   [63:0] grp_fu_80_p1;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_85_p0;
wire  signed [31:0] grp_fu_88_p0;
wire   [7:0] mul_ln23_fu_102_p0;
wire   [7:0] mul_ln23_fu_102_p1;
wire   [10:0] mul_ln23_fu_102_p2;
wire   [0:0] tmp_2_fu_108_p3;
wire   [2:0] tmp_5_fu_116_p4;
wire   [3:0] trunc_ln23_fu_126_p1;
wire   [10:0] and_ln_fu_130_p6;
wire   [11:0] zext_ln9_1_fu_99_p1;
wire   [11:0] zext_ln23_fu_144_p1;
wire   [7:0] grp_fu_163_p0;
wire   [10:0] grp_fu_163_p1;
wire   [63:0] data_V_fu_168_p1;
wire   [53:0] mantissa_fu_196_p4;
wire   [11:0] zext_ln510_fu_209_p1;
wire   [11:0] add_ln510_fu_212_p2;
wire   [10:0] sub_ln1311_fu_226_p2;
wire   [0:0] isNeg_fu_218_p3;
wire  signed [11:0] sext_ln1311_fu_231_p1;
wire   [11:0] ush_fu_235_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_243_p1;
wire   [112:0] zext_ln68_fu_205_p1;
wire   [112:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_247_p1;
wire   [112:0] r_V_fu_251_p2;
wire   [0:0] tmp_8_fu_263_p3;
wire   [112:0] r_V_1_fu_257_p2;
wire   [7:0] zext_ln662_fu_271_p1;
wire   [7:0] tmp_9_fu_275_p4;
wire   [7:0] trunc_ln26_fu_293_p1;
wire   [7:0] val_fu_285_p3;
wire   [10:0] tmp_1_fu_302_p3;
wire   [10:0] grp_fu_312_p0;
wire  signed [31:0] grp_fu_312_p1;
wire    ap_CS_fsm_state24;
wire   [42:0] result_fu_318_p2;
reg   [1:0] grp_fu_80_opcode;
reg    grp_fu_163_ap_start;
wire    grp_fu_163_ap_done;
reg   [23:0] ap_NS_fsm;
wire   [42:0] grp_fu_312_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

fn1_dadddsub_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_7_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_80_p0),
    .din1(grp_fu_80_p1),
    .opcode(grp_fu_80_opcode),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

fn1_uitodp_32ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
uitodp_32ns_64_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_85_p0),
    .ce(1'b1),
    .dout(grp_fu_85_p1)
);

fn1_sitodp_32s_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_6_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_88_p0),
    .ce(1'b1),
    .dout(grp_fu_88_p1)
);

fn1_mul_8ns_8ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
mul_8ns_8ns_11_1_1_U4(
    .din0(mul_ln23_fu_102_p0),
    .din1(mul_ln23_fu_102_p1),
    .dout(mul_ln23_fu_102_p2)
);

fn1_urem_8ns_11ns_11_12_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
urem_8ns_11ns_11_12_seq_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_163_ap_start),
    .done(grp_fu_163_ap_done),
    .din0(grp_fu_163_p0),
    .din1(grp_fu_163_p1),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

fn1_mul_11ns_32s_43_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 43 ))
mul_11ns_32s_43_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_312_p0),
    .din1(grp_fu_312_p1),
    .ce(1'b1),
    .dout(grp_fu_312_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_reg_369 <= grp_fu_80_p2;
        conv5_reg_364 <= grp_fu_88_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv6_reg_338 <= grp_fu_85_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        mul_ln27_reg_405 <= grp_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        or_ln26_reg_395 <= or_ln26_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sub_ln23_reg_349 <= sub_ln23_fu_148_p2;
        zext_ln9_reg_343[7 : 0] <= zext_ln9_fu_96_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_10_reg_374 <= {{data_V_fu_168_p1[62:52]}};
        tmp_11_reg_380 <= tmp_11_fu_182_p1;
        tmp_reg_390 <= {{grp_fu_163_p2[10:8]}};
        urem_ln25_reg_385 <= grp_fu_163_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_163_ap_start = 1'b1;
    end else begin
        grp_fu_163_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_80_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_80_opcode = 2'd0;
    end else begin
        grp_fu_80_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_80_p0 = conv5_reg_364;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_80_p0 = conv6_reg_338;
    end else begin
        grp_fu_80_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_80_p1 = add_reg_369;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_80_p1 = 64'd5171723365488073026;
    end else begin
        grp_fu_80_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln510_fu_212_p2 = ($signed(zext_ln510_fu_209_p1) + $signed(12'd3073));

assign and_ln_fu_130_p6 = {{{{{tmp_2_fu_108_p3}, {2'd0}}, {tmp_5_fu_116_p4}}, {1'd0}}, {trunc_ln23_fu_126_p1}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = $signed(result_fu_318_p2);

assign data_V_fu_168_p1 = grp_fu_80_p2;

assign grp_fu_163_p0 = zext_ln9_reg_343;

assign grp_fu_163_p1 = (zext_ln9_reg_343 + 11'd970);

assign grp_fu_312_p0 = grp_fu_312_p00;

assign grp_fu_312_p00 = tmp_1_fu_302_p3;

assign grp_fu_312_p1 = 43'd8794332887363;

assign grp_fu_85_p0 = p;

assign grp_fu_88_p0 = $signed(sub_ln23_reg_349);

assign isNeg_fu_218_p3 = add_ln510_fu_212_p2[32'd11];

assign mantissa_fu_196_p4 = {{{{1'd1}, {tmp_11_reg_380}}}, {1'd0}};

assign mul_ln23_fu_102_p0 = zext_ln9_fu_96_p1;

assign mul_ln23_fu_102_p1 = zext_ln9_fu_96_p1;

assign or_ln26_fu_296_p2 = (val_fu_285_p3 | trunc_ln26_fu_293_p1);

assign r_V_1_fu_257_p2 = zext_ln68_fu_205_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_247_p1;

assign r_V_fu_251_p2 = zext_ln68_fu_205_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_247_p1;

assign result_fu_318_p2 = (mul_ln27_reg_405 ^ 43'd8796092986502);

assign sext_ln1311_fu_231_p1 = $signed(sub_ln1311_fu_226_p2);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_247_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_243_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_243_p1 = $signed(ush_fu_235_p3);

assign sub_ln1311_fu_226_p2 = (11'd1023 - tmp_10_reg_374);

assign sub_ln23_fu_148_p2 = (zext_ln9_1_fu_99_p1 - zext_ln23_fu_144_p1);

assign tmp_11_fu_182_p1 = data_V_fu_168_p1[51:0];

assign tmp_1_fu_302_p3 = {{tmp_reg_390}, {or_ln26_reg_395}};

assign tmp_2_fu_108_p3 = mul_ln23_fu_102_p2[32'd10];

assign tmp_5_fu_116_p4 = {{mul_ln23_fu_102_p2[7:5]}};

assign tmp_8_fu_263_p3 = r_V_fu_251_p2[32'd53];

assign tmp_9_fu_275_p4 = {{r_V_1_fu_257_p2[60:53]}};

assign trunc_ln23_fu_126_p1 = mul_ln23_fu_102_p2[3:0];

assign trunc_ln26_fu_293_p1 = urem_ln25_reg_385[7:0];

assign ush_fu_235_p3 = ((isNeg_fu_218_p3[0:0] == 1'b1) ? sext_ln1311_fu_231_p1 : add_ln510_fu_212_p2);

assign val_fu_285_p3 = ((isNeg_fu_218_p3[0:0] == 1'b1) ? zext_ln662_fu_271_p1 : tmp_9_fu_275_p4);

assign zext_ln23_fu_144_p1 = and_ln_fu_130_p6;

assign zext_ln510_fu_209_p1 = tmp_10_reg_374;

assign zext_ln662_fu_271_p1 = tmp_8_fu_263_p3;

assign zext_ln68_fu_205_p1 = mantissa_fu_196_p4;

assign zext_ln9_1_fu_99_p1 = p;

assign zext_ln9_fu_96_p1 = p;

always @ (posedge ap_clk) begin
    zext_ln9_reg_343[10:8] <= 3'b000;
end

endmodule //fn1
