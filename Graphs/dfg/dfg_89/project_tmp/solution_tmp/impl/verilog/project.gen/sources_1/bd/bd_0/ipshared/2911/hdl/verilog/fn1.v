// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=125,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2150,HLS_SYN_LUT=3572,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_4_address0,
        p_4_ce0,
        p_4_q0,
        p_9,
        p_15,
        ap_return
);

parameter    ap_ST_fsm_state1 = 126'd1;
parameter    ap_ST_fsm_state2 = 126'd2;
parameter    ap_ST_fsm_state3 = 126'd4;
parameter    ap_ST_fsm_state4 = 126'd8;
parameter    ap_ST_fsm_state5 = 126'd16;
parameter    ap_ST_fsm_state6 = 126'd32;
parameter    ap_ST_fsm_state7 = 126'd64;
parameter    ap_ST_fsm_state8 = 126'd128;
parameter    ap_ST_fsm_state9 = 126'd256;
parameter    ap_ST_fsm_state10 = 126'd512;
parameter    ap_ST_fsm_state11 = 126'd1024;
parameter    ap_ST_fsm_state12 = 126'd2048;
parameter    ap_ST_fsm_state13 = 126'd4096;
parameter    ap_ST_fsm_state14 = 126'd8192;
parameter    ap_ST_fsm_state15 = 126'd16384;
parameter    ap_ST_fsm_state16 = 126'd32768;
parameter    ap_ST_fsm_state17 = 126'd65536;
parameter    ap_ST_fsm_state18 = 126'd131072;
parameter    ap_ST_fsm_state19 = 126'd262144;
parameter    ap_ST_fsm_state20 = 126'd524288;
parameter    ap_ST_fsm_state21 = 126'd1048576;
parameter    ap_ST_fsm_state22 = 126'd2097152;
parameter    ap_ST_fsm_state23 = 126'd4194304;
parameter    ap_ST_fsm_state24 = 126'd8388608;
parameter    ap_ST_fsm_state25 = 126'd16777216;
parameter    ap_ST_fsm_state26 = 126'd33554432;
parameter    ap_ST_fsm_state27 = 126'd67108864;
parameter    ap_ST_fsm_state28 = 126'd134217728;
parameter    ap_ST_fsm_state29 = 126'd268435456;
parameter    ap_ST_fsm_state30 = 126'd536870912;
parameter    ap_ST_fsm_state31 = 126'd1073741824;
parameter    ap_ST_fsm_state32 = 126'd2147483648;
parameter    ap_ST_fsm_state33 = 126'd4294967296;
parameter    ap_ST_fsm_state34 = 126'd8589934592;
parameter    ap_ST_fsm_state35 = 126'd17179869184;
parameter    ap_ST_fsm_state36 = 126'd34359738368;
parameter    ap_ST_fsm_state37 = 126'd68719476736;
parameter    ap_ST_fsm_state38 = 126'd137438953472;
parameter    ap_ST_fsm_state39 = 126'd274877906944;
parameter    ap_ST_fsm_state40 = 126'd549755813888;
parameter    ap_ST_fsm_state41 = 126'd1099511627776;
parameter    ap_ST_fsm_state42 = 126'd2199023255552;
parameter    ap_ST_fsm_state43 = 126'd4398046511104;
parameter    ap_ST_fsm_state44 = 126'd8796093022208;
parameter    ap_ST_fsm_state45 = 126'd17592186044416;
parameter    ap_ST_fsm_state46 = 126'd35184372088832;
parameter    ap_ST_fsm_state47 = 126'd70368744177664;
parameter    ap_ST_fsm_state48 = 126'd140737488355328;
parameter    ap_ST_fsm_state49 = 126'd281474976710656;
parameter    ap_ST_fsm_state50 = 126'd562949953421312;
parameter    ap_ST_fsm_state51 = 126'd1125899906842624;
parameter    ap_ST_fsm_state52 = 126'd2251799813685248;
parameter    ap_ST_fsm_state53 = 126'd4503599627370496;
parameter    ap_ST_fsm_state54 = 126'd9007199254740992;
parameter    ap_ST_fsm_state55 = 126'd18014398509481984;
parameter    ap_ST_fsm_state56 = 126'd36028797018963968;
parameter    ap_ST_fsm_state57 = 126'd72057594037927936;
parameter    ap_ST_fsm_state58 = 126'd144115188075855872;
parameter    ap_ST_fsm_state59 = 126'd288230376151711744;
parameter    ap_ST_fsm_state60 = 126'd576460752303423488;
parameter    ap_ST_fsm_state61 = 126'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 126'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 126'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 126'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 126'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 126'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 126'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 126'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 126'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 126'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 126'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 126'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 126'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 126'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 126'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 126'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 126'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 126'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 126'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 126'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 126'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 126'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 126'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 126'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 126'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 126'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 126'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 126'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 126'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 126'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 126'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 126'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 126'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 126'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 126'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 126'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 126'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 126'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 126'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 126'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 126'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 126'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 126'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 126'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 126'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 126'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 126'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 126'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 126'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 126'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 126'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 126'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 126'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 126'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 126'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 126'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 126'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 126'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 126'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 126'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 126'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 126'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 126'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 126'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 126'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 126'd42535295865117307932921825928971026432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
output  [2:0] p_4_address0;
output   p_4_ce0;
input  [31:0] p_4_q0;
input  [31:0] p_9;
input  [7:0] p_15;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] p_4_address0;
reg p_4_ce0;

(* fsm_encoding = "none" *) reg   [125:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_89_p2;
reg   [31:0] reg_132;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state36;
wire   [63:0] grp_fu_115_p2;
reg   [63:0] reg_138;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state111;
wire   [31:0] grp_fu_105_p1;
reg   [31:0] conv9_reg_204;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_95_p2;
reg   [31:0] mul_reg_209;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_100_p2;
reg   [31:0] div_reg_214;
wire    ap_CS_fsm_state31;
wire   [31:0] bitcast_ln17_fu_144_p1;
wire    ap_CS_fsm_state37;
wire   [63:0] xor_ln19_fu_153_p2;
reg   [63:0] xor_ln19_reg_229;
wire    ap_CS_fsm_state38;
wire   [63:0] grp_fu_112_p1;
reg   [63:0] conv_reg_234;
wire    ap_CS_fsm_state39;
wire   [63:0] grp_fu_125_p2;
reg   [63:0] result_1_reg_244;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state102;
wire   [31:0] bitcast_ln23_fu_163_p1;
wire    ap_CS_fsm_state103;
wire   [63:0] grp_fu_109_p1;
reg   [63:0] conv2_reg_259;
wire   [63:0] xor_ln22_fu_180_p2;
reg   [63:0] xor_ln22_reg_264;
wire    ap_CS_fsm_state113;
wire   [63:0] grp_fu_120_p2;
reg   [63:0] mul1_reg_269;
wire    ap_CS_fsm_state118;
wire   [63:0] grp_fu_129_p1;
reg   [63:0] conv1_reg_274;
wire    ap_CS_fsm_state119;
wire   [63:0] xor_ln22_1_fu_189_p2;
reg   [63:0] xor_ln22_1_reg_279;
wire   [63:0] bitcast_ln22_1_fu_195_p1;
wire    ap_CS_fsm_state120;
reg   [31:0] grp_fu_89_p0;
reg   [31:0] grp_fu_89_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state16;
reg   [31:0] grp_fu_109_p0;
reg   [63:0] grp_fu_115_p0;
reg   [63:0] grp_fu_115_p1;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state105;
reg   [63:0] grp_fu_120_p0;
reg   [63:0] grp_fu_120_p1;
wire    ap_CS_fsm_state112;
wire   [63:0] grp_fu_125_p0;
wire    ap_CS_fsm_state114;
wire   [63:0] bitcast_ln19_fu_149_p1;
wire   [63:0] add_ln22_fu_168_p2;
wire   [63:0] and_ln22_fu_174_p2;
wire   [63:0] bitcast_ln22_fu_186_p1;
reg   [1:0] grp_fu_89_opcode;
reg   [1:0] grp_fu_115_opcode;
wire    ap_CS_fsm_state126;
reg   [125:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 126'd1;
end

fn1_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_89_p0),
    .din1(grp_fu_89_p1),
    .opcode(grp_fu_89_opcode),
    .ce(1'b1),
    .dout(grp_fu_89_p2)
);

fn1_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv9_reg_204),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_95_p2)
);

fn1_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1099956224),
    .din1(reg_132),
    .ce(1'b1),
    .dout(grp_fu_100_p2)
);

fn1_uitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_6_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_9),
    .ce(1'b1),
    .dout(grp_fu_105_p1)
);

fn1_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_109_p0),
    .ce(1'b1),
    .dout(grp_fu_109_p1)
);

fn1_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_132),
    .ce(1'b1),
    .dout(grp_fu_112_p1)
);

fn1_dadddsub_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_7_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_115_p0),
    .din1(grp_fu_115_p1),
    .opcode(grp_fu_115_opcode),
    .ce(1'b1),
    .dout(grp_fu_115_p2)
);

fn1_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_120_p0),
    .din1(grp_fu_120_p1),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

fn1_ddiv_64ns_64ns_64_59_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 59 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_59_no_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_125_p0),
    .din1(conv_reg_234),
    .ce(1'b1),
    .dout(grp_fu_125_p2)
);

fn1_uitodp_64ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
uitodp_64ns_64_6_no_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln22_reg_264),
    .ce(1'b1),
    .dout(grp_fu_129_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        conv1_reg_274 <= grp_fu_129_p1;
        xor_ln22_1_reg_279 <= xor_ln22_1_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        conv2_reg_259 <= grp_fu_109_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv9_reg_204 <= grp_fu_105_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        conv_reg_234 <= grp_fu_112_p1;
        xor_ln19_reg_229 <= xor_ln19_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        div_reg_214 <= grp_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        mul1_reg_269 <= grp_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_reg_209 <= grp_fu_95_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_132 <= grp_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state104))) begin
        reg_138 <= grp_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        result_1_reg_244 <= grp_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        xor_ln22_reg_264 <= xor_ln22_fu_180_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        grp_fu_109_p0 = bitcast_ln23_fu_163_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_109_p0 = bitcast_ln17_fu_144_p1;
    end else begin
        grp_fu_109_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_fu_115_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_115_opcode = 2'd0;
    end else begin
        grp_fu_115_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_fu_115_p0 = conv2_reg_259;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_115_p0 = result_1_reg_244;
    end else begin
        grp_fu_115_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_fu_115_p1 = reg_138;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_115_p1 = 64'd13902013640489304064;
    end else begin
        grp_fu_115_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_fu_120_p0 = conv1_reg_274;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        grp_fu_120_p0 = reg_138;
    end else begin
        grp_fu_120_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_fu_120_p1 = bitcast_ln22_1_fu_195_p1;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        grp_fu_120_p1 = 64'd0;
    end else begin
        grp_fu_120_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_89_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_89_opcode = 2'd0;
    end else begin
        grp_fu_89_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_89_p0 = 32'd1133740032;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_89_p0 = mul_reg_209;
    end else begin
        grp_fu_89_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_89_p1 = div_reg_214;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_89_p1 = 32'd1073741824;
    end else begin
        grp_fu_89_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        p_4_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        p_4_address0 = 64'd7;
    end else begin
        p_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state36))) begin
        p_4_ce0 = 1'b1;
    end else begin
        p_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_168_p2 = ($signed(p) + $signed(64'd18446744073709494775));

assign and_ln22_fu_174_p2 = (p & add_ln22_fu_168_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_return = grp_fu_120_p2;

assign bitcast_ln17_fu_144_p1 = p_4_q0;

assign bitcast_ln19_fu_149_p1 = grp_fu_109_p1;

assign bitcast_ln22_1_fu_195_p1 = xor_ln22_1_reg_279;

assign bitcast_ln22_fu_186_p1 = mul1_reg_269;

assign bitcast_ln23_fu_163_p1 = p_4_q0;

assign grp_fu_125_p0 = xor_ln19_reg_229;

assign xor_ln19_fu_153_p2 = (bitcast_ln19_fu_149_p1 ^ 64'd9223372036854775808);

assign xor_ln22_1_fu_189_p2 = (bitcast_ln22_fu_186_p1 ^ 64'd9223372036854775808);

assign xor_ln22_fu_180_p2 = (64'd18446744073709551615 ^ and_ln22_fu_174_p2);

endmodule //fn1
