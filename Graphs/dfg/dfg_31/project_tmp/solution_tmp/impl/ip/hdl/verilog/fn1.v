// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=32,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1361,HLS_SYN_LUT=2521,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_address0,
        p_ce0,
        p_q0,
        p_4,
        ap_return
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] p_address0;
output   p_ce0;
input  [7:0] p_q0;
input  [7:0] p_4;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_ce0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_97_p1;
reg   [63:0] v_11_reg_308;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_92_p2;
reg   [63:0] dc_reg_323;
wire    ap_CS_fsm_state13;
reg   [0:0] p_Result_s_reg_328;
wire    ap_CS_fsm_state14;
wire   [15:0] val_fu_228_p3;
reg   [15:0] val_reg_333;
wire    ap_CS_fsm_state15;
wire  signed [30:0] grp_fu_290_p3;
reg  signed [30:0] add_ln23_reg_344;
wire    ap_CS_fsm_state18;
wire   [9:0] sub_ln28_fu_258_p2;
reg   [9:0] sub_ln28_reg_349;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_97_p0;
wire   [6:0] grp_fu_105_p1;
wire   [63:0] data_V_fu_111_p1;
wire   [51:0] tmp_3_fu_132_p1;
wire   [53:0] mantissa_fu_136_p4;
wire   [10:0] tmp_2_fu_122_p4;
wire   [11:0] zext_ln510_fu_150_p1;
wire   [11:0] add_ln510_fu_154_p2;
wire   [10:0] sub_ln1311_fu_168_p2;
wire   [0:0] isNeg_fu_160_p3;
wire  signed [11:0] sext_ln1311_fu_174_p1;
wire   [11:0] ush_fu_178_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_186_p1;
wire   [120:0] zext_ln15_fu_146_p1;
wire   [120:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_190_p1;
wire   [120:0] r_V_fu_194_p2;
wire   [0:0] tmp_fu_206_p3;
wire   [120:0] r_V_1_fu_200_p2;
wire   [15:0] zext_ln662_fu_214_p1;
wire   [15:0] tmp_1_fu_218_p4;
wire   [15:0] result_V_2_fu_236_p2;
wire  signed [15:0] result_V_fu_241_p3;
wire   [7:0] grp_fu_105_p2;
wire   [9:0] zext_ln20_fu_251_p1;
wire  signed [9:0] sext_ln28_fu_254_p1;
wire  signed [31:0] sext_ln28_2_fu_264_p1;
wire   [32:0] zext_ln28_fu_267_p1;
wire  signed [10:0] grp_fu_280_p0;
wire   [32:0] grp_fu_280_p1;
wire   [7:0] grp_fu_280_p2;
wire    ap_CS_fsm_state33;
wire  signed [15:0] grp_fu_290_p1;
wire   [0:0] grp_fu_290_p2;
wire    ap_CS_fsm_state17;
reg    grp_fu_105_ap_start;
wire    grp_fu_105_ap_done;
reg    grp_fu_280_ap_start;
wire    grp_fu_280_ap_done;
reg   [32:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

fn1_dadd_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_7_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_11_reg_308),
    .din1(64'd13956766437210062848),
    .ce(1'b1),
    .dout(grp_fu_92_p2)
);

fn1_uitodp_32ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
uitodp_32ns_64_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_97_p0),
    .ce(1'b1),
    .dout(grp_fu_97_p1)
);

fn1_srem_8ns_7ns_8_12_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
srem_8ns_7ns_8_12_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_105_ap_start),
    .done(grp_fu_105_ap_done),
    .din0(p_q0),
    .din1(grp_fu_105_p1),
    .ce(1'b1),
    .dout(grp_fu_105_p2)
);

fn1_sdiv_11s_33ns_8_15_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 8 ))
sdiv_11s_33ns_8_15_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_280_ap_start),
    .done(grp_fu_280_ap_done),
    .din0(grp_fu_280_p0),
    .din1(grp_fu_280_p1),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

fn1_mac_muladd_16s_16s_1ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_1ns_31_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(result_V_fu_241_p3),
    .din1(grp_fu_290_p1),
    .din2(grp_fu_290_p2),
    .ce(1'b1),
    .dout(grp_fu_290_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln23_reg_344 <= grp_fu_290_p3;
        sub_ln28_reg_349 <= sub_ln28_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        dc_reg_323 <= grp_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_Result_s_reg_328 <= data_V_fu_111_p1[32'd63];
        val_reg_333 <= val_fu_228_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v_11_reg_308 <= grp_fu_97_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_105_ap_start = 1'b1;
    end else begin
        grp_fu_105_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_280_ap_start = 1'b1;
    end else begin
        grp_fu_280_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln510_fu_154_p2 = ($signed(zext_ln510_fu_150_p1) + $signed(12'd3073));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = grp_fu_280_p2[7:0];

assign data_V_fu_111_p1 = dc_reg_323;

assign grp_fu_105_p1 = 8'd49;

assign grp_fu_280_p0 = $signed(sub_ln28_reg_349);

assign grp_fu_280_p1 = (zext_ln28_fu_267_p1 + 33'd157);

assign grp_fu_290_p1 = 31'd2147464265;

assign grp_fu_290_p2 = 31'd1;

assign grp_fu_97_p0 = p_4;

assign isNeg_fu_160_p3 = add_ln510_fu_154_p2[32'd11];

assign mantissa_fu_136_p4 = {{{{1'd1}, {tmp_3_fu_132_p1}}}, {1'd0}};

assign p_address0 = 64'd0;

assign r_V_1_fu_200_p2 = zext_ln15_fu_146_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_190_p1;

assign r_V_fu_194_p2 = zext_ln15_fu_146_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_190_p1;

assign result_V_2_fu_236_p2 = (16'd0 - val_reg_333);

assign result_V_fu_241_p3 = ((p_Result_s_reg_328[0:0] == 1'b1) ? result_V_2_fu_236_p2 : val_reg_333);

assign sext_ln1311_fu_174_p1 = $signed(sub_ln1311_fu_168_p2);

assign sext_ln28_2_fu_264_p1 = add_ln23_reg_344;

assign sext_ln28_fu_254_p1 = $signed(grp_fu_105_p2);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_190_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_186_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_186_p1 = $signed(ush_fu_178_p3);

assign sub_ln1311_fu_168_p2 = (11'd1023 - tmp_2_fu_122_p4);

assign sub_ln28_fu_258_p2 = ($signed(zext_ln20_fu_251_p1) - $signed(sext_ln28_fu_254_p1));

assign tmp_1_fu_218_p4 = {{r_V_1_fu_200_p2[68:53]}};

assign tmp_2_fu_122_p4 = {{data_V_fu_111_p1[62:52]}};

assign tmp_3_fu_132_p1 = data_V_fu_111_p1[51:0];

assign tmp_fu_206_p3 = r_V_fu_194_p2[32'd53];

assign ush_fu_178_p3 = ((isNeg_fu_160_p3[0:0] == 1'b1) ? sext_ln1311_fu_174_p1 : add_ln510_fu_154_p2);

assign val_fu_228_p3 = ((isNeg_fu_160_p3[0:0] == 1'b1) ? zext_ln662_fu_214_p1 : tmp_1_fu_218_p4);

assign zext_ln15_fu_146_p1 = mantissa_fu_136_p4;

assign zext_ln20_fu_251_p1 = p_4;

assign zext_ln28_fu_267_p1 = $unsigned(sext_ln28_2_fu_264_p1);

assign zext_ln510_fu_150_p1 = tmp_2_fu_122_p4;

assign zext_ln662_fu_214_p1 = tmp_fu_206_p3;

endmodule //fn1
