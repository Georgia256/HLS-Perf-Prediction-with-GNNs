-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (31 downto 0);
    p_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_11_ce0 : OUT STD_LOGIC;
    p_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_17_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_17_ce0 : OUT STD_LOGIC;
    p_17_we0 : OUT STD_LOGIC;
    p_17_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_17_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_17_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_17_ce1 : OUT STD_LOGIC;
    p_17_we1 : OUT STD_LOGIC;
    p_17_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_17_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=965,HLS_SYN_LUT=3121,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_4DF2E5F1 : STD_LOGIC_VECTOR (31 downto 0) := "01001101111100101110010111110001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv65_10DCEE6D4 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100001101110011101110011011010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv34_16F : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000101101111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_13_read_read_fu_92_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln22_reg_681 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_reg_686 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln22_2_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln22_2_reg_691 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln22_1_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln22_1_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln23_fu_225_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln23_reg_711 : STD_LOGIC_VECTOR (33 downto 0);
    signal data_V_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln23_4_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln24_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_22_reg_751 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_23_fu_272_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_23_reg_757 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_24_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_290_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_25_reg_768 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ush_fu_320_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_778 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_1_fu_337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_1_fu_354_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_reg_788 : STD_LOGIC_VECTOR (8 downto 0);
    signal v_7_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_7_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal val_1_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal p_Result_s_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_26_reg_813 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_554_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_27_reg_819 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_2_fu_567_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_2_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ush_2_fu_584_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_reg_829 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_2_fu_646_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_2_reg_834 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_136_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_7_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln22_fu_167_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_8_fu_172_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln22_1_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_fu_189_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_1_fu_202_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln23_fu_207_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln23_fu_211_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal xor_ln23_fu_215_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln23_1_fu_221_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal bitcast_ln22_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln22_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_fu_253_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_2_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln341_fu_294_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_297_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_311_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_fu_316_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln341_1_fu_328_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_1_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_1_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_1_fu_350_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_1_fu_371_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_prom_i_i_i_i_i83_cast_cast_cast_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_380_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal sh_prom_i_i_i_i_i83_cast_cast_cast_cast_fu_387_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_391_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_15_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_397_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_415_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_fu_432_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln24_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_447_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln24_fu_435_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln23_fu_455_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln23_3_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_fu_362_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_prom_i_i_i_i_i113_cast_cast_cast_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_1_fu_471_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal sh_prom_i_i_i_i_i113_cast_cast_cast_cast_fu_478_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_2_fu_482_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_16_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_488_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_1_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_506_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln25_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_3_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln341_2_fu_558_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_2_fu_561_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_2_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_2_fu_580_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_2_fu_592_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_prom_i_i_i_i_i140_cast_cast_cast_fu_605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_601_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal sh_prom_i_i_i_i_i140_cast_cast_cast_cast_fu_608_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal r_V_4_fu_612_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal tmp_21_fu_624_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_618_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal zext_ln662_2_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_636_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal result_V_2_fu_653_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_uitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_sitofp_64s_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_mul_32s_34ns_65_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component fn1_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_124_p0,
        din1 => ap_const_lv32_4DF2E5F1,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U2 : component fn1_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_129_p0,
        din1 => add1_reg_736,
        ce => ap_const_logic_1,
        dout => grp_fu_129_p2);

    uitofp_32ns_32_6_no_dsp_1_U3 : component fn1_uitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln25_reg_803,
        ce => ap_const_logic_1,
        dout => grp_fu_133_p1);

    sitofp_64s_32_6_no_dsp_1_U4 : component fn1_sitofp_64s_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_136_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p1);

    mul_32s_34ns_65_2_1_U5 : component fn1_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_13,
        din1 => grp_fu_143_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_143_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add1_reg_736 <= grp_fu_136_p1;
                add_reg_731 <= grp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln23_reg_711 <= add_ln23_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln25_reg_803 <= add_ln25_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                data_V_reg_716 <= p_11_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                icmp_ln24_reg_746 <= icmp_ln24_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                isNeg_1_reg_783 <= add_ln341_1_fu_331_p2(8 downto 8);
                isNeg_reg_773 <= add_ln341_fu_297_p2(8 downto 8);
                ush_1_reg_788 <= ush_1_fu_354_p3;
                ush_reg_778 <= ush_fu_320_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                isNeg_2_reg_824 <= add_ln341_2_fu_561_p2(8 downto 8);
                ush_2_reg_829 <= ush_2_fu_584_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln22_reg_681 <= grp_fu_143_p2;
                tmp_reg_686 <= grp_fu_143_p2(64 downto 61);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                p_Result_s_reg_808 <= data_V_3_fu_532_p1(31 downto 31);
                tmp_26_reg_813 <= data_V_3_fu_532_p1(30 downto 23);
                tmp_27_reg_819 <= tmp_27_fu_554_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln22_2_reg_691 <= sext_ln22_2_fu_186_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_675 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sub_ln22_1_reg_696 <= sub_ln22_1_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_22_reg_751 <= data_V_1_fu_258_p1(30 downto 23);
                tmp_23_reg_757 <= tmp_23_fu_272_p1;
                tmp_24_reg_762 <= data_V_2_fu_276_p1(30 downto 23);
                tmp_25_reg_768 <= tmp_25_fu_290_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_7_reg_675 <= tmp_7_fu_149_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                v_7_reg_793 <= v_7_fu_465_p2;
                val_1_reg_798 <= val_1_fu_516_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                val_2_reg_834 <= val_2_fu_646_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_fu_225_p2 <= std_logic_vector(signed(sext_ln23_1_fu_221_p1) + signed(ap_const_lv34_16F));
    add_ln25_fu_527_p2 <= std_logic_vector(unsigned(sub_ln25_fu_523_p2) + unsigned(val_1_reg_798));
    add_ln341_1_fu_331_p2 <= std_logic_vector(unsigned(zext_ln341_1_fu_328_p1) + unsigned(ap_const_lv9_181));
    add_ln341_2_fu_561_p2 <= std_logic_vector(unsigned(zext_ln341_2_fu_558_p1) + unsigned(ap_const_lv9_181));
    add_ln341_fu_297_p2 <= std_logic_vector(unsigned(zext_ln341_fu_294_p1) + unsigned(ap_const_lv9_181));
    and_ln23_fu_455_p2 <= (xor_ln24_fu_435_p2 and select_ln23_fu_447_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        result_V_2_fu_653_p2 when (p_Result_s_reg_808(0) = '1') else 
        val_2_reg_834;
    bitcast_ln22_fu_239_p1 <= add_reg_731;
    data_V_1_fu_258_p1 <= grp_fu_136_p1;
    data_V_2_fu_276_p1 <= grp_fu_129_p2;
    data_V_3_fu_532_p1 <= grp_fu_133_p1;
    grp_fu_124_p0 <= data_V_reg_716;
    grp_fu_129_p0 <= xor_ln22_fu_242_p2;

    grp_fu_136_p0_assign_proc : process(p_13_read_read_fu_92_p2, ap_CS_fsm_state5, sext_ln23_4_fu_231_p1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                        grp_fu_136_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_13_read_read_fu_92_p2),64));

        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_136_p0 <= sext_ln23_4_fu_231_p1;
        else 
            grp_fu_136_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_143_p1 <= ap_const_lv65_10DCEE6D4(34 - 1 downto 0);
    icmp_ln24_1_fu_441_p2 <= "1" when (p_15 = ap_const_lv32_0) else "0";
    icmp_ln24_fu_253_p0 <= p_13;
    icmp_ln24_fu_253_p2 <= "1" when (icmp_ln24_fu_253_p0 = ap_const_lv32_0) else "0";
    isNeg_1_fu_337_p3 <= add_ln341_1_fu_331_p2(8 downto 8);
    isNeg_2_fu_567_p3 <= add_ln341_2_fu_561_p2(8 downto 8);
    isNeg_fu_303_p3 <= add_ln341_fu_297_p2(8 downto 8);
    mantissa_1_fu_371_p4 <= ((ap_const_lv1_1 & tmp_25_reg_768) & ap_const_lv1_0);
    mantissa_2_fu_592_p4 <= ((ap_const_lv1_1 & tmp_27_reg_819) & ap_const_lv1_0);
    mantissa_fu_362_p4 <= ((ap_const_lv1_1 & tmp_23_reg_757) & ap_const_lv1_0);
    p_11_address0 <= ap_const_lv64_B(4 - 1 downto 0);

    p_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_11_ce0 <= ap_const_logic_1;
        else 
            p_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_13_read_read_fu_92_p2 <= p_13;
    p_17_address0 <= ap_const_lv1_0;
    p_17_address1 <= ap_const_lv1_0;
    p_17_ce0 <= ap_const_logic_0;
    p_17_ce1 <= ap_const_logic_0;
    p_17_d0 <= ap_const_lv64_0;
    p_17_d1 <= ap_const_lv64_0;
    p_17_we0 <= ap_const_logic_0;
    p_17_we1 <= ap_const_logic_0;
    r_V_1_fu_397_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_380_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i83_cast_cast_cast_cast_fu_387_p1(31-1 downto 0)))));
    r_V_2_fu_482_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_1_fu_471_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i113_cast_cast_cast_cast_fu_478_p1(31-1 downto 0)))));
    r_V_3_fu_488_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_1_fu_471_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i113_cast_cast_cast_cast_fu_478_p1(31-1 downto 0)))));
    r_V_4_fu_612_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_601_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i140_cast_cast_cast_cast_fu_608_p1(31-1 downto 0)))));
    r_V_5_fu_618_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_601_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i140_cast_cast_cast_cast_fu_608_p1(31-1 downto 0)))));
    r_V_fu_391_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_380_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i83_cast_cast_cast_cast_fu_387_p1(31-1 downto 0)))));
    result_V_2_fu_653_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_2_reg_834));
    select_ln22_1_fu_202_p3 <= 
        sub_ln22_1_reg_696 when (tmp_7_reg_675(0) = '1') else 
        sext_ln22_2_reg_691;
    select_ln22_fu_189_p3 <= 
        sext_ln22_1_fu_182_p1 when (tmp_7_reg_675(0) = '1') else 
        sext_ln22_2_fu_186_p1;
    select_ln23_fu_447_p3 <= 
        ap_const_lv2_3 when (icmp_ln24_1_fu_441_p2(0) = '1') else 
        ap_const_lv2_0;
        sext_ln1311_1_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_345_p2),9));

        sext_ln1311_2_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_2_fu_575_p2),9));

        sext_ln1311_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_311_p2),9));

        sext_ln22_1_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_172_p4),32));

        sext_ln22_2_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_686),32));

        sext_ln23_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln23_fu_215_p2),34));

        sext_ln23_3_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln23_fu_455_p2),32));

        sext_ln23_4_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_reg_711),64));

        sext_ln23_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln22_1_fu_202_p3),33));

    sh_prom_i_i_i_i_i113_cast_cast_cast_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i113_cast_cast_cast_fu_475_p1),79));
        sh_prom_i_i_i_i_i113_cast_cast_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_778),32));

    sh_prom_i_i_i_i_i140_cast_cast_cast_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i140_cast_cast_cast_fu_605_p1),111));
        sh_prom_i_i_i_i_i140_cast_cast_cast_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_reg_829),32));

    sh_prom_i_i_i_i_i83_cast_cast_cast_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i83_cast_cast_cast_fu_384_p1),79));
        sh_prom_i_i_i_i_i83_cast_cast_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_reg_788),32));

    sub_ln1311_1_fu_345_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_24_reg_762));
    sub_ln1311_2_fu_575_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_26_reg_813));
    sub_ln1311_fu_311_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_22_reg_751));
    sub_ln22_1_fu_196_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln22_fu_189_p3));
    sub_ln22_fu_167_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln22_reg_681));
    sub_ln25_fu_523_p2 <= std_logic_vector(unsigned(p) - unsigned(v_7_reg_793));
    tmp_15_fu_403_p3 <= r_V_fu_391_p2(24 downto 24);
    tmp_16_fu_494_p3 <= r_V_2_fu_482_p2(24 downto 24);
    tmp_21_fu_624_p3 <= r_V_4_fu_612_p2(24 downto 24);
    tmp_23_fu_272_p1 <= data_V_1_fu_258_p1(23 - 1 downto 0);
    tmp_25_fu_290_p1 <= data_V_2_fu_276_p1(23 - 1 downto 0);
    tmp_27_fu_554_p1 <= data_V_3_fu_532_p1(23 - 1 downto 0);
    tmp_2_fu_636_p4 <= r_V_5_fu_618_p2(87 downto 24);
    tmp_6_fu_415_p4 <= r_V_1_fu_397_p2(55 downto 24);
    tmp_7_fu_149_p1 <= p_13;
    tmp_8_fu_172_p4 <= sub_ln22_fu_167_p2(64 downto 61);
    tmp_s_fu_506_p4 <= r_V_3_fu_488_p2(55 downto 24);
    ush_1_fu_354_p3 <= 
        sext_ln1311_1_fu_350_p1 when (isNeg_1_fu_337_p3(0) = '1') else 
        add_ln341_1_fu_331_p2;
    ush_2_fu_584_p3 <= 
        sext_ln1311_2_fu_580_p1 when (isNeg_2_fu_567_p3(0) = '1') else 
        add_ln341_2_fu_561_p2;
    ush_fu_320_p3 <= 
        sext_ln1311_fu_316_p1 when (isNeg_fu_303_p3(0) = '1') else 
        add_ln341_fu_297_p2;
    v_7_fu_465_p2 <= (val_fu_425_p3 and sext_ln23_3_fu_461_p1);
    val_1_fu_516_p3 <= 
        zext_ln662_1_fu_502_p1 when (isNeg_reg_773(0) = '1') else 
        tmp_s_fu_506_p4;
    val_2_fu_646_p3 <= 
        zext_ln662_2_fu_632_p1 when (isNeg_2_reg_824(0) = '1') else 
        tmp_2_fu_636_p4;
    val_fu_425_p3 <= 
        zext_ln662_fu_411_p1 when (isNeg_1_reg_783(0) = '1') else 
        tmp_6_fu_415_p4;
    xor_ln22_fu_242_p2 <= (bitcast_ln22_fu_239_p1 xor ap_const_lv32_80000000);
    xor_ln23_fu_215_p2 <= (zext_ln23_fu_211_p1 xor sext_ln23_fu_207_p1);
    xor_ln24_fu_435_p2 <= (zext_ln24_fu_432_p1 xor ap_const_lv2_3);
    zext_ln15_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_592_p4),111));
    zext_ln23_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p),33));
    zext_ln24_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln24_reg_746),2));
    zext_ln341_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_762),9));
    zext_ln341_2_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_813),9));
    zext_ln341_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_751),9));
    zext_ln662_1_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_494_p3),32));
    zext_ln662_2_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_624_p3),64));
    zext_ln662_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_403_p3),32));
    zext_ln68_1_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_362_p4),79));
    zext_ln68_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_371_p4),79));
end behav;
