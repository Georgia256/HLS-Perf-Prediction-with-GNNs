-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (63 downto 0);
    p_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_13 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_15 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=39,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1547,HLS_SYN_LUT=3962,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_40DDDF4000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000011011101110111110100000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv64_209C9D38F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000001000001001110010011101001110001111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv8_B2 : STD_LOGIC_VECTOR (7 downto 0) := "10110010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv8_reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub9_reg_444 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_9_reg_449 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_10_fu_152_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_10_reg_455 : STD_LOGIC_VECTOR (51 downto 0);
    signal val_fu_245_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_reg_460 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal sub_ln19_fu_259_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln19_reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal v_7_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_1_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_Result_s_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_12_fu_299_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_12_reg_505 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_1_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_1_fu_331_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_reg_515 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_1_fu_393_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_1_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal result_V_2_fu_400_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_2_reg_525 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_120_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_128_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal data_V_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_fu_156_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_169_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_172_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_186_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_178_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_191_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_195_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i20_cast_cast_cast_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_165_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i20_cast_cast_cast_cast_fu_207_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_fu_211_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_fu_223_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_217_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_235_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_fu_253_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln21_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln21_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_289_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_fu_303_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_307_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_1_fu_321_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_1_fu_327_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_1_fu_339_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_prom_i_i_i_i_i46_cast_cast_cast_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_348_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sh_prom_i_i_i_i_i46_cast_cast_cast_cast_fu_355_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_2_fu_359_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_365_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln662_1_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_383_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal mul_ln22_fu_411_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln22_fu_411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_uitofp_64ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_sitofp_64ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_dsub_64ns_64ns_64_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_uitodp_64ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component fn1_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv1_reg_434,
        din1 => v_7_reg_480,
        ce => ap_const_logic_1,
        dout => grp_fu_112_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component fn1_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_475,
        din1 => grp_fu_116_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_116_p2);

    uitofp_64ns_32_6_no_dsp_1_U3 : component fn1_uitofp_64ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_120_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p1);

    sitofp_64ns_32_6_no_dsp_1_U4 : component fn1_sitofp_64ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p1);

    dsub_64ns_64ns_64_7_full_dsp_1_U5 : component fn1_dsub_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_128_p0,
        din1 => grp_fu_128_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_128_p2);

    uitodp_64ns_64_6_no_dsp_1_U6 : component fn1_uitodp_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_5,
        ce => ap_const_logic_1,
        dout => grp_fu_134_p1);

    mul_8s_8s_8_1_1_U7 : component fn1_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => mul_ln22_fu_411_p0,
        din1 => ap_const_lv8_B2,
        dout => mul_ln22_fu_411_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_reg_485 <= grp_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                conv1_reg_434 <= grp_fu_120_p1;
                conv8_reg_429 <= grp_fu_134_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                conv_reg_475 <= grp_fu_124_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                dc_1_reg_495 <= grp_fu_116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                isNeg_1_reg_510 <= add_ln341_fu_307_p2(8 downto 8);
                p_Result_s_reg_500 <= data_V_1_fu_278_p1(31 downto 31);
                tmp_12_reg_505 <= tmp_12_fu_299_p1;
                ush_1_reg_515 <= ush_1_fu_331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (p_Result_s_reg_500 = ap_const_lv1_1))) then
                result_V_2_reg_525 <= result_V_2_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sub9_reg_444 <= grp_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                sub_ln19_reg_470 <= sub_ln19_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_10_reg_455 <= tmp_10_fu_152_p1;
                tmp_9_reg_449 <= data_V_fu_138_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                v_7_reg_480 <= grp_fu_120_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                val_1_reg_520 <= val_1_fu_393_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                val_reg_460 <= val_fu_245_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_fu_253_p2 <= std_logic_vector(unsigned(p) + unsigned(ap_const_lv64_209C9D38F));
    add_ln341_fu_307_p2 <= std_logic_vector(unsigned(zext_ln341_fu_303_p1) + unsigned(ap_const_lv9_181));
    add_ln510_fu_172_p2 <= std_logic_vector(unsigned(zext_ln510_fu_169_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (mul_ln22_fu_411_p2 or ap_const_lv8_1);
    bitcast_ln21_fu_264_p1 <= add_reg_485;
    data_V_1_fu_278_p1 <= dc_1_reg_495;
    data_V_fu_138_p1 <= grp_fu_128_p2;
    grp_fu_116_p1 <= xor_ln21_fu_267_p2;

    grp_fu_120_p0_assign_proc : process(ap_CS_fsm_state1, p_5, sub_ln19_reg_470, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_120_p0 <= sub_ln19_reg_470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_120_p0 <= p_5;
        else 
            grp_fu_120_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p0_assign_proc : process(conv8_reg_429, ap_CS_fsm_state7, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_128_p0 <= ap_const_lv64_40DDDF4000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_128_p0 <= conv8_reg_429;
        else 
            grp_fu_128_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p1_assign_proc : process(p_13, ap_CS_fsm_state7, sub9_reg_444, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_128_p1 <= sub9_reg_444;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_128_p1 <= p_13;
        else 
            grp_fu_128_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    isNeg_1_fu_313_p3 <= add_ln341_fu_307_p2(8 downto 8);
    isNeg_fu_178_p3 <= add_ln510_fu_172_p2(11 downto 11);
    mantissa_1_fu_339_p4 <= ((ap_const_lv1_1 & tmp_12_reg_505) & ap_const_lv1_0);
    mantissa_fu_156_p4 <= ((ap_const_lv1_1 & tmp_10_reg_455) & ap_const_lv1_0);
    mul_ln22_fu_411_p0 <= 
        result_V_2_reg_525 when (p_Result_s_reg_500(0) = '1') else 
        val_1_reg_520;
    r_V_1_fu_217_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_165_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i20_cast_cast_cast_cast_fu_207_p1(31-1 downto 0)))));
    r_V_2_fu_359_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_348_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i46_cast_cast_cast_cast_fu_355_p1(31-1 downto 0)))));
    r_V_3_fu_365_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_348_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i46_cast_cast_cast_cast_fu_355_p1(31-1 downto 0)))));
    r_V_fu_211_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_165_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i20_cast_cast_cast_cast_fu_207_p1(31-1 downto 0)))));
    result_V_2_fu_400_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(val_1_fu_393_p3));
        sext_ln1311_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_321_p2),9));

        sext_ln1311_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_186_p2),12));

    sh_prom_i_i_i_i_i20_cast_cast_cast_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i20_cast_cast_cast_fu_203_p1),169));
        sh_prom_i_i_i_i_i20_cast_cast_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_195_p3),32));

    sh_prom_i_i_i_i_i46_cast_cast_cast_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i46_cast_cast_cast_fu_352_p1),55));
        sh_prom_i_i_i_i_i46_cast_cast_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_reg_515),32));

    sub_ln1311_1_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_11_fu_289_p4));
    sub_ln1311_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_9_reg_449));
    sub_ln19_fu_259_p2 <= std_logic_vector(unsigned(add_ln19_fu_253_p2) - unsigned(val_reg_460));
    tmp_10_fu_152_p1 <= data_V_fu_138_p1(52 - 1 downto 0);
    tmp_11_fu_289_p4 <= data_V_1_fu_278_p1(30 downto 23);
    tmp_12_fu_299_p1 <= data_V_1_fu_278_p1(23 - 1 downto 0);
    tmp_1_fu_235_p4 <= r_V_1_fu_217_p2(116 downto 53);
    tmp_6_fu_383_p4 <= r_V_3_fu_365_p2(31 downto 24);
    tmp_8_fu_371_p3 <= r_V_2_fu_359_p2(24 downto 24);
    tmp_fu_223_p3 <= r_V_fu_211_p2(53 downto 53);
    ush_1_fu_331_p3 <= 
        sext_ln1311_1_fu_327_p1 when (isNeg_1_fu_313_p3(0) = '1') else 
        add_ln341_fu_307_p2;
    ush_fu_195_p3 <= 
        sext_ln1311_fu_191_p1 when (isNeg_fu_178_p3(0) = '1') else 
        add_ln510_fu_172_p2;
    val_1_fu_393_p3 <= 
        zext_ln662_1_fu_379_p1 when (isNeg_1_reg_510(0) = '1') else 
        tmp_6_fu_383_p4;
    val_fu_245_p3 <= 
        zext_ln662_fu_231_p1 when (isNeg_fu_178_p3(0) = '1') else 
        tmp_1_fu_235_p4;
    xor_ln21_fu_267_p2 <= (bitcast_ln21_fu_264_p1 xor ap_const_lv32_80000000);
    zext_ln15_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_339_p4),55));
    zext_ln341_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_289_p4),9));
    zext_ln510_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_449),12));
    zext_ln662_1_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_371_p3),8));
    zext_ln662_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_223_p3),64));
    zext_ln68_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_156_p4),169));
end behav;
