// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.005375,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=70,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_address0,
        p_ce0,
        p_q0,
        p_9,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] p_address0;
output   p_ce0;
input  [7:0] p_q0;
input  [63:0] p_9;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire  signed [11:0] sext_ln17_fu_64_p1;
wire   [11:0] add_ln17_fu_68_p2;
wire   [1:0] tmp_1_fu_74_p4;
wire   [4:0] tmp_2_fu_84_p4;
wire   [12:0] and_ln_fu_94_p6;
wire   [17:0] zext_ln16_fu_108_p1;
wire   [17:0] xor_ln16_fu_112_p2;
wire  signed [18:0] sext_ln16_fu_118_p1;
wire   [18:0] result_fu_122_p2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_68_p2 = ($signed(sext_ln17_fu_64_p1) + $signed(12'd2929));

assign and_ln_fu_94_p6 = {{{{{{{{2'd2}, {tmp_1_fu_74_p4}}}, {3'd0}}}, {tmp_2_fu_84_p4}}}, {1'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = $signed(result_fu_122_p2);

assign p_address0 = 64'd0;

assign result_fu_122_p2 = ($signed(19'd0) - $signed(sext_ln16_fu_118_p1));

assign sext_ln16_fu_118_p1 = $signed(xor_ln16_fu_112_p2);

assign sext_ln17_fu_64_p1 = $signed(p_q0);

assign tmp_1_fu_74_p4 = {{add_ln17_fu_68_p2[10:9]}};

assign tmp_2_fu_84_p4 = {{add_ln17_fu_68_p2[5:1]}};

assign xor_ln16_fu_112_p2 = (zext_ln16_fu_108_p1 ^ 18'd136698);

assign zext_ln16_fu_108_p1 = and_ln_fu_94_p6;

endmodule //fn1
