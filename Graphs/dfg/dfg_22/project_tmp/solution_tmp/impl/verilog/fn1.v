// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=39,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1547,HLS_SYN_LUT=3962,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_5,
        p_13,
        p_15,
        p_17,
        ap_return
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
input  [63:0] p_5;
input  [63:0] p_13;
input  [63:0] p_15;
input  [15:0] p_17;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_134_p1;
reg   [63:0] conv8_reg_429;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_120_p1;
reg   [31:0] conv1_reg_434;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_128_p2;
reg   [63:0] sub9_reg_444;
wire    ap_CS_fsm_state13;
reg   [10:0] tmp_9_reg_449;
wire    ap_CS_fsm_state20;
wire   [51:0] tmp_10_fu_152_p1;
reg   [51:0] tmp_10_reg_455;
wire   [63:0] val_fu_245_p3;
reg   [63:0] val_reg_460;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [63:0] sub_ln19_fu_259_p2;
reg   [63:0] sub_ln19_reg_470;
wire   [31:0] grp_fu_124_p1;
reg   [31:0] conv_reg_475;
wire    ap_CS_fsm_state27;
reg   [31:0] v_7_reg_480;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_112_p2;
reg   [31:0] add_reg_485;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_116_p2;
reg   [31:0] dc_1_reg_495;
wire    ap_CS_fsm_state37;
reg   [0:0] p_Result_s_reg_500;
wire    ap_CS_fsm_state38;
wire   [22:0] tmp_12_fu_299_p1;
reg   [22:0] tmp_12_reg_505;
wire   [0:0] isNeg_1_fu_313_p3;
reg   [0:0] isNeg_1_reg_510;
wire   [8:0] ush_1_fu_331_p3;
reg   [8:0] ush_1_reg_515;
wire   [7:0] val_1_fu_393_p3;
reg   [7:0] val_1_reg_520;
wire    ap_CS_fsm_state39;
wire   [7:0] result_V_2_fu_400_p2;
reg   [7:0] result_V_2_reg_525;
wire    ap_CS_fsm_state29;
wire   [31:0] grp_fu_116_p1;
reg   [63:0] grp_fu_120_p0;
wire    ap_CS_fsm_state23;
reg   [63:0] grp_fu_128_p0;
reg   [63:0] grp_fu_128_p1;
wire    ap_CS_fsm_state14;
wire   [63:0] data_V_fu_138_p1;
wire   [53:0] mantissa_fu_156_p4;
wire   [11:0] zext_ln510_fu_169_p1;
wire   [11:0] add_ln510_fu_172_p2;
wire   [10:0] sub_ln1311_fu_186_p2;
wire   [0:0] isNeg_fu_178_p3;
wire  signed [11:0] sext_ln1311_fu_191_p1;
wire   [11:0] ush_fu_195_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i20_cast_cast_cast_fu_203_p1;
wire   [168:0] zext_ln68_fu_165_p1;
wire   [168:0] sh_prom_i_i_i_i_i20_cast_cast_cast_cast_fu_207_p1;
wire   [168:0] r_V_fu_211_p2;
wire   [0:0] tmp_fu_223_p3;
wire   [168:0] r_V_1_fu_217_p2;
wire   [63:0] zext_ln662_fu_231_p1;
wire   [63:0] tmp_1_fu_235_p4;
wire   [63:0] add_ln19_fu_253_p2;
wire   [31:0] bitcast_ln21_fu_264_p1;
wire   [31:0] xor_ln21_fu_267_p2;
wire   [31:0] data_V_1_fu_278_p1;
wire   [7:0] tmp_11_fu_289_p4;
wire   [8:0] zext_ln341_fu_303_p1;
wire   [8:0] add_ln341_fu_307_p2;
wire   [7:0] sub_ln1311_1_fu_321_p2;
wire  signed [8:0] sext_ln1311_1_fu_327_p1;
wire   [24:0] mantissa_1_fu_339_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i46_cast_cast_cast_fu_352_p1;
wire   [54:0] zext_ln15_fu_348_p1;
wire   [54:0] sh_prom_i_i_i_i_i46_cast_cast_cast_cast_fu_355_p1;
wire   [54:0] r_V_2_fu_359_p2;
wire   [0:0] tmp_8_fu_371_p3;
wire   [54:0] r_V_3_fu_365_p2;
wire   [7:0] zext_ln662_1_fu_379_p1;
wire   [7:0] tmp_6_fu_383_p4;
wire    ap_CS_fsm_state40;
wire  signed [7:0] mul_ln22_fu_411_p0;
wire   [7:0] mul_ln22_fu_411_p2;
reg   [39:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
end

fn1_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv1_reg_434),
    .din1(v_7_reg_480),
    .ce(1'b1),
    .dout(grp_fu_112_p2)
);

fn1_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_475),
    .din1(grp_fu_116_p1),
    .ce(1'b1),
    .dout(grp_fu_116_p2)
);

fn1_uitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
uitofp_64ns_32_6_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_120_p0),
    .ce(1'b1),
    .dout(grp_fu_120_p1)
);

fn1_sitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
sitofp_64ns_32_6_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p),
    .ce(1'b1),
    .dout(grp_fu_124_p1)
);

fn1_dsub_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_7_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_128_p0),
    .din1(grp_fu_128_p1),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

fn1_uitodp_64ns_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
uitodp_64ns_64_6_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_5),
    .ce(1'b1),
    .dout(grp_fu_134_p1)
);

fn1_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U7(
    .din0(mul_ln22_fu_411_p0),
    .din1(8'd178),
    .dout(mul_ln22_fu_411_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        add_reg_485 <= grp_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_reg_434 <= grp_fu_120_p1;
        conv8_reg_429 <= grp_fu_134_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv_reg_475 <= grp_fu_124_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        dc_1_reg_495 <= grp_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        isNeg_1_reg_510 <= add_ln341_fu_307_p2[32'd8];
        p_Result_s_reg_500 <= data_V_1_fu_278_p1[32'd31];
        tmp_12_reg_505 <= tmp_12_fu_299_p1;
        ush_1_reg_515 <= ush_1_fu_331_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (p_Result_s_reg_500 == 1'd1))) begin
        result_V_2_reg_525 <= result_V_2_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sub9_reg_444 <= grp_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        sub_ln19_reg_470 <= sub_ln19_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_10_reg_455 <= tmp_10_fu_152_p1;
        tmp_9_reg_449 <= {{data_V_fu_138_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        v_7_reg_480 <= grp_fu_120_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        val_1_reg_520 <= val_1_fu_393_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        val_reg_460 <= val_fu_245_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_120_p0 = sub_ln19_reg_470;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_120_p0 = p_5;
    end else begin
        grp_fu_120_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_128_p0 = 64'd4674137454251343872;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_128_p0 = conv8_reg_429;
    end else begin
        grp_fu_128_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_128_p1 = sub9_reg_444;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_128_p1 = p_13;
    end else begin
        grp_fu_128_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_253_p2 = (p + 64'd8754156431);

assign add_ln341_fu_307_p2 = ($signed(zext_ln341_fu_303_p1) + $signed(9'd385));

assign add_ln510_fu_172_p2 = ($signed(zext_ln510_fu_169_p1) + $signed(12'd3073));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = (mul_ln22_fu_411_p2 | 8'd1);

assign bitcast_ln21_fu_264_p1 = add_reg_485;

assign data_V_1_fu_278_p1 = dc_1_reg_495;

assign data_V_fu_138_p1 = grp_fu_128_p2;

assign grp_fu_116_p1 = xor_ln21_fu_267_p2;

assign isNeg_1_fu_313_p3 = add_ln341_fu_307_p2[32'd8];

assign isNeg_fu_178_p3 = add_ln510_fu_172_p2[32'd11];

assign mantissa_1_fu_339_p4 = {{{{1'd1}, {tmp_12_reg_505}}}, {1'd0}};

assign mantissa_fu_156_p4 = {{{{1'd1}, {tmp_10_reg_455}}}, {1'd0}};

assign mul_ln22_fu_411_p0 = ((p_Result_s_reg_500[0:0] == 1'b1) ? result_V_2_reg_525 : val_1_reg_520);

assign r_V_1_fu_217_p2 = zext_ln68_fu_165_p1 << sh_prom_i_i_i_i_i20_cast_cast_cast_cast_fu_207_p1;

assign r_V_2_fu_359_p2 = zext_ln15_fu_348_p1 >> sh_prom_i_i_i_i_i46_cast_cast_cast_cast_fu_355_p1;

assign r_V_3_fu_365_p2 = zext_ln15_fu_348_p1 << sh_prom_i_i_i_i_i46_cast_cast_cast_cast_fu_355_p1;

assign r_V_fu_211_p2 = zext_ln68_fu_165_p1 >> sh_prom_i_i_i_i_i20_cast_cast_cast_cast_fu_207_p1;

assign result_V_2_fu_400_p2 = (8'd0 - val_1_fu_393_p3);

assign sext_ln1311_1_fu_327_p1 = $signed(sub_ln1311_1_fu_321_p2);

assign sext_ln1311_fu_191_p1 = $signed(sub_ln1311_fu_186_p2);

assign sh_prom_i_i_i_i_i20_cast_cast_cast_cast_fu_207_p1 = $unsigned(sh_prom_i_i_i_i_i20_cast_cast_cast_fu_203_p1);

assign sh_prom_i_i_i_i_i20_cast_cast_cast_fu_203_p1 = $signed(ush_fu_195_p3);

assign sh_prom_i_i_i_i_i46_cast_cast_cast_cast_fu_355_p1 = $unsigned(sh_prom_i_i_i_i_i46_cast_cast_cast_fu_352_p1);

assign sh_prom_i_i_i_i_i46_cast_cast_cast_fu_352_p1 = $signed(ush_1_reg_515);

assign sub_ln1311_1_fu_321_p2 = (8'd127 - tmp_11_fu_289_p4);

assign sub_ln1311_fu_186_p2 = (11'd1023 - tmp_9_reg_449);

assign sub_ln19_fu_259_p2 = (add_ln19_fu_253_p2 - val_reg_460);

assign tmp_10_fu_152_p1 = data_V_fu_138_p1[51:0];

assign tmp_11_fu_289_p4 = {{data_V_1_fu_278_p1[30:23]}};

assign tmp_12_fu_299_p1 = data_V_1_fu_278_p1[22:0];

assign tmp_1_fu_235_p4 = {{r_V_1_fu_217_p2[116:53]}};

assign tmp_6_fu_383_p4 = {{r_V_3_fu_365_p2[31:24]}};

assign tmp_8_fu_371_p3 = r_V_2_fu_359_p2[32'd24];

assign tmp_fu_223_p3 = r_V_fu_211_p2[32'd53];

assign ush_1_fu_331_p3 = ((isNeg_1_fu_313_p3[0:0] == 1'b1) ? sext_ln1311_1_fu_327_p1 : add_ln341_fu_307_p2);

assign ush_fu_195_p3 = ((isNeg_fu_178_p3[0:0] == 1'b1) ? sext_ln1311_fu_191_p1 : add_ln510_fu_172_p2);

assign val_1_fu_393_p3 = ((isNeg_1_reg_510[0:0] == 1'b1) ? zext_ln662_1_fu_379_p1 : tmp_6_fu_383_p4);

assign val_fu_245_p3 = ((isNeg_fu_178_p3[0:0] == 1'b1) ? zext_ln662_fu_231_p1 : tmp_1_fu_235_p4);

assign xor_ln21_fu_267_p2 = (bitcast_ln21_fu_264_p1 ^ 32'd2147483648);

assign zext_ln15_fu_348_p1 = mantissa_1_fu_339_p4;

assign zext_ln341_fu_303_p1 = tmp_11_fu_289_p4;

assign zext_ln510_fu_169_p1 = tmp_9_reg_449;

assign zext_ln662_1_fu_379_p1 = tmp_8_fu_371_p3;

assign zext_ln662_fu_231_p1 = tmp_fu_223_p3;

assign zext_ln68_fu_165_p1 = mantissa_fu_156_p4;

endmodule //fn1
