-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (63 downto 0);
    p_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.209250,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=376,HLS_SYN_LUT=2077,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_V_fu_83_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_reg_399 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_193_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_V_1_fu_201_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_reg_410 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_415 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_217_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_12_reg_421 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln16_1_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln16_1_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal val_1_fu_335_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_1_reg_431 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sdiv_ln16_reg_447 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_80_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_97_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_101_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_9_fu_87_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_fu_115_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_119_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_133_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_139_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_143_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_111_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_155_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_159_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_fu_171_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_165_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_1_fu_179_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_183_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_221_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln59_fu_233_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mantissa_1_fu_246_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_1_fu_259_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_1_fu_262_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_1_fu_276_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_1_fu_281_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_285_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i47_cast_cast_cast_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_255_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal sh_prom_i_i_i_i_i47_cast_cast_cast_cast_fu_297_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal r_V_2_fu_301_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_8_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_307_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln662_fu_321_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_325_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_346_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_4_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_fu_358_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln16_2_fu_369_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_fu_373_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_fu_379_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln16_1_fu_365_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_389_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_80_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_389_ap_start : STD_LOGIC;
    signal grp_fu_389_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_sitodp_32s_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_sdiv_9s_10ns_10_13_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    sitodp_32s_64_6_no_dsp_1_U1 : component fn1_sitodp_32s_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_80_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_80_p1);

    sdiv_9s_10ns_10_13_seq_1_U2 : component fn1_sdiv_9s_10ns_10_13_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_389_ap_start,
        done => grp_fu_389_ap_done,
        din0 => grp_fu_389_p0,
        din1 => grp_fu_389_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln16_1_reg_426 <= add_ln16_1_fu_240_p2;
                val_1_reg_431 <= val_1_fu_335_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                data_V_1_reg_410 <= data_V_1_fu_201_p2;
                data_V_reg_399 <= data_V_fu_83_p1;
                tmp_11_reg_415 <= data_V_1_fu_201_p2(62 downto 52);
                tmp_12_reg_421 <= tmp_12_fu_217_p1;
                val_reg_404 <= val_fu_193_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                sdiv_ln16_reg_447 <= grp_fu_389_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln16_1_fu_240_p2 <= std_logic_vector(unsigned(select_ln59_fu_233_p3) + unsigned(ap_const_lv8_A9));
    add_ln510_1_fu_262_p2 <= std_logic_vector(unsigned(zext_ln510_1_fu_259_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_fu_119_p2 <= std_logic_vector(unsigned(zext_ln510_fu_115_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_80_p1;
    data_V_1_fu_201_p2 <= (data_V_fu_83_p1 xor ap_const_lv64_8000000000000000);
    data_V_fu_83_p1 <= p;

    grp_fu_389_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_389_ap_start <= ap_const_logic_1;
        else 
            grp_fu_389_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_389_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_1_reg_426),9));

    grp_fu_389_p1 <= std_logic_vector(unsigned(zext_ln16_fu_379_p1) + unsigned(sext_ln16_1_fu_365_p1));
        grp_fu_80_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sdiv_ln16_reg_447),32));

    isNeg_1_fu_268_p3 <= add_ln510_1_fu_262_p2(11 downto 11);
    isNeg_fu_125_p3 <= add_ln510_fu_119_p2(11 downto 11);
    mantissa_1_fu_246_p4 <= ((ap_const_lv1_1 & tmp_12_reg_421) & ap_const_lv1_0);
    mantissa_fu_101_p4 <= ((ap_const_lv1_1 & tmp_10_fu_97_p1) & ap_const_lv1_0);
    p_Result_1_fu_346_p3 <= data_V_1_reg_410(63 downto 63);
    p_Result_s_fu_221_p3 <= data_V_reg_399(63 downto 63);
    r_V_1_fu_165_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_111_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_155_p1(31-1 downto 0)))));
    r_V_2_fu_301_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_255_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i47_cast_cast_cast_cast_fu_297_p1(31-1 downto 0)))));
    r_V_3_fu_307_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_255_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i47_cast_cast_cast_cast_fu_297_p1(31-1 downto 0)))));
    r_V_fu_159_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_111_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_155_p1(31-1 downto 0)))));
    result_V_2_fu_228_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(val_reg_404));
    result_V_4_fu_353_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(val_1_reg_431));
    result_V_fu_358_p3 <= 
        result_V_4_fu_353_p2 when (p_Result_1_fu_346_p3(0) = '1') else 
        val_1_reg_431;
    select_ln59_fu_233_p3 <= 
        result_V_2_fu_228_p2 when (p_Result_s_fu_221_p3(0) = '1') else 
        val_reg_404;
        sext_ln1311_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_276_p2),12));

        sext_ln1311_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_133_p2),12));

        sext_ln16_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_V_fu_358_p3),10));

        sext_ln16_2_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_5),9));

    sh_prom_i_i_i_i_i47_cast_cast_cast_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i47_cast_cast_cast_fu_293_p1),113));
        sh_prom_i_i_i_i_i47_cast_cast_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_285_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_151_p1),137));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_143_p3),32));

    sub_ln1311_1_fu_276_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_11_reg_415));
    sub_ln1311_fu_133_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_9_fu_87_p4));
    sub_ln16_fu_373_p2 <= std_logic_vector(unsigned(ap_const_lv9_80) - unsigned(sext_ln16_2_fu_369_p1));
    tmp_10_fu_97_p1 <= data_V_fu_83_p1(52 - 1 downto 0);
    tmp_12_fu_217_p1 <= data_V_1_fu_201_p2(52 - 1 downto 0);
    tmp_1_fu_183_p4 <= r_V_1_fu_165_p2(60 downto 53);
    tmp_2_fu_325_p4 <= r_V_3_fu_307_p2(60 downto 53);
    tmp_8_fu_313_p3 <= r_V_2_fu_301_p2(53 downto 53);
    tmp_9_fu_87_p4 <= data_V_fu_83_p1(62 downto 52);
    tmp_fu_171_p3 <= r_V_fu_159_p2(53 downto 53);
    ush_1_fu_285_p3 <= 
        sext_ln1311_1_fu_281_p1 when (isNeg_1_fu_268_p3(0) = '1') else 
        add_ln510_1_fu_262_p2;
    ush_fu_143_p3 <= 
        sext_ln1311_fu_139_p1 when (isNeg_fu_125_p3(0) = '1') else 
        add_ln510_fu_119_p2;
    val_1_fu_335_p3 <= 
        zext_ln662_fu_321_p1 when (isNeg_1_fu_268_p3(0) = '1') else 
        tmp_2_fu_325_p4;
    val_fu_193_p3 <= 
        zext_ln662_1_fu_179_p1 when (isNeg_fu_125_p3(0) = '1') else 
        tmp_1_fu_183_p4;
    zext_ln15_1_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_246_p4),113));
    zext_ln15_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_101_p4),137));
    zext_ln16_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln16_fu_373_p2),10));
    zext_ln510_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_415),12));
    zext_ln510_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_87_p4),12));
    zext_ln662_1_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_171_p3),8));
    zext_ln662_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_313_p3),8));
end behav;
