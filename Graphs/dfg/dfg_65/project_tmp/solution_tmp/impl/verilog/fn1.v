// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=60,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=714,HLS_SYN_LUT=3196,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_5,
        p_7,
        p_11,
        ap_return
);

parameter    ap_ST_fsm_state1 = 61'd1;
parameter    ap_ST_fsm_state2 = 61'd2;
parameter    ap_ST_fsm_state3 = 61'd4;
parameter    ap_ST_fsm_state4 = 61'd8;
parameter    ap_ST_fsm_state5 = 61'd16;
parameter    ap_ST_fsm_state6 = 61'd32;
parameter    ap_ST_fsm_state7 = 61'd64;
parameter    ap_ST_fsm_state8 = 61'd128;
parameter    ap_ST_fsm_state9 = 61'd256;
parameter    ap_ST_fsm_state10 = 61'd512;
parameter    ap_ST_fsm_state11 = 61'd1024;
parameter    ap_ST_fsm_state12 = 61'd2048;
parameter    ap_ST_fsm_state13 = 61'd4096;
parameter    ap_ST_fsm_state14 = 61'd8192;
parameter    ap_ST_fsm_state15 = 61'd16384;
parameter    ap_ST_fsm_state16 = 61'd32768;
parameter    ap_ST_fsm_state17 = 61'd65536;
parameter    ap_ST_fsm_state18 = 61'd131072;
parameter    ap_ST_fsm_state19 = 61'd262144;
parameter    ap_ST_fsm_state20 = 61'd524288;
parameter    ap_ST_fsm_state21 = 61'd1048576;
parameter    ap_ST_fsm_state22 = 61'd2097152;
parameter    ap_ST_fsm_state23 = 61'd4194304;
parameter    ap_ST_fsm_state24 = 61'd8388608;
parameter    ap_ST_fsm_state25 = 61'd16777216;
parameter    ap_ST_fsm_state26 = 61'd33554432;
parameter    ap_ST_fsm_state27 = 61'd67108864;
parameter    ap_ST_fsm_state28 = 61'd134217728;
parameter    ap_ST_fsm_state29 = 61'd268435456;
parameter    ap_ST_fsm_state30 = 61'd536870912;
parameter    ap_ST_fsm_state31 = 61'd1073741824;
parameter    ap_ST_fsm_state32 = 61'd2147483648;
parameter    ap_ST_fsm_state33 = 61'd4294967296;
parameter    ap_ST_fsm_state34 = 61'd8589934592;
parameter    ap_ST_fsm_state35 = 61'd17179869184;
parameter    ap_ST_fsm_state36 = 61'd34359738368;
parameter    ap_ST_fsm_state37 = 61'd68719476736;
parameter    ap_ST_fsm_state38 = 61'd137438953472;
parameter    ap_ST_fsm_state39 = 61'd274877906944;
parameter    ap_ST_fsm_state40 = 61'd549755813888;
parameter    ap_ST_fsm_state41 = 61'd1099511627776;
parameter    ap_ST_fsm_state42 = 61'd2199023255552;
parameter    ap_ST_fsm_state43 = 61'd4398046511104;
parameter    ap_ST_fsm_state44 = 61'd8796093022208;
parameter    ap_ST_fsm_state45 = 61'd17592186044416;
parameter    ap_ST_fsm_state46 = 61'd35184372088832;
parameter    ap_ST_fsm_state47 = 61'd70368744177664;
parameter    ap_ST_fsm_state48 = 61'd140737488355328;
parameter    ap_ST_fsm_state49 = 61'd281474976710656;
parameter    ap_ST_fsm_state50 = 61'd562949953421312;
parameter    ap_ST_fsm_state51 = 61'd1125899906842624;
parameter    ap_ST_fsm_state52 = 61'd2251799813685248;
parameter    ap_ST_fsm_state53 = 61'd4503599627370496;
parameter    ap_ST_fsm_state54 = 61'd9007199254740992;
parameter    ap_ST_fsm_state55 = 61'd18014398509481984;
parameter    ap_ST_fsm_state56 = 61'd36028797018963968;
parameter    ap_ST_fsm_state57 = 61'd72057594037927936;
parameter    ap_ST_fsm_state58 = 61'd144115188075855872;
parameter    ap_ST_fsm_state59 = 61'd288230376151711744;
parameter    ap_ST_fsm_state60 = 61'd576460752303423488;
parameter    ap_ST_fsm_state61 = 61'd1152921504606846976;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
input  [63:0] p_5;
input  [31:0] p_7;
input  [31:0] p_11;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [60:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_136_p1;
reg   [31:0] reg_143;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_120_p2;
reg   [31:0] reg_148;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state60;
wire   [31:0] p_7_read_read_fu_96_p2;
wire   [31:0] data_V_fu_158_p2;
reg   [31:0] data_V_reg_450;
wire    ap_CS_fsm_state12;
wire   [22:0] tmp_9_fu_174_p1;
reg   [22:0] tmp_9_reg_455;
wire   [0:0] isNeg_fu_188_p3;
reg   [0:0] isNeg_reg_460;
wire   [8:0] ush_fu_206_p3;
reg   [8:0] ush_reg_465;
wire   [63:0] val_fu_268_p3;
reg   [63:0] val_reg_470;
wire    ap_CS_fsm_state13;
wire   [63:0] add_ln14_fu_304_p2;
reg   [63:0] add_ln14_reg_476;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_128_p2;
reg   [31:0] div_reg_481;
wire    ap_CS_fsm_state41;
reg   [10:0] tmp_10_reg_486;
wire    ap_CS_fsm_state43;
wire   [51:0] tmp_11_fu_324_p1;
reg   [51:0] tmp_11_reg_492;
wire   [63:0] add_ln16_fu_425_p2;
reg   [63:0] add_ln16_reg_497;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_133_p1;
reg   [31:0] conv_reg_502;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
reg   [31:0] grp_fu_120_p0;
reg   [31:0] grp_fu_120_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state45;
reg   [63:0] grp_fu_136_p0;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state42;
wire   [31:0] bitcast_ln14_fu_154_p1;
wire   [7:0] tmp_8_fu_164_p4;
wire   [8:0] zext_ln341_fu_178_p1;
wire   [8:0] add_ln341_fu_182_p2;
wire   [7:0] sub_ln1311_fu_196_p2;
wire  signed [8:0] sext_ln1311_fu_202_p1;
wire   [24:0] mantissa_fu_214_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_227_p1;
wire   [110:0] zext_ln15_fu_223_p1;
wire   [110:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_230_p1;
wire   [110:0] r_V_fu_234_p2;
wire   [0:0] tmp_fu_246_p3;
wire   [110:0] r_V_1_fu_240_p2;
wire   [63:0] zext_ln662_fu_254_p1;
wire   [63:0] tmp_1_fu_258_p4;
wire   [0:0] icmp_ln14_fu_275_p2;
wire   [0:0] p_Result_s_fu_285_p3;
wire   [63:0] result_V_2_fu_292_p2;
wire   [63:0] result_V_fu_297_p3;
wire   [63:0] zext_ln14_fu_281_p1;
wire   [63:0] grp_fu_140_p1;
wire   [63:0] data_V_1_fu_310_p1;
wire   [53:0] mantissa_1_fu_328_p4;
wire   [11:0] zext_ln510_fu_341_p1;
wire   [11:0] add_ln510_fu_344_p2;
wire   [10:0] sub_ln1311_1_fu_358_p2;
wire   [0:0] isNeg_1_fu_350_p3;
wire  signed [11:0] sext_ln1311_1_fu_363_p1;
wire   [11:0] ush_1_fu_367_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i22_cast_cast_cast_fu_375_p1;
wire   [168:0] zext_ln68_fu_337_p1;
wire   [168:0] sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_379_p1;
wire   [168:0] r_V_2_fu_383_p2;
wire   [0:0] tmp_7_fu_395_p3;
wire   [168:0] r_V_3_fu_389_p2;
wire   [63:0] zext_ln662_1_fu_403_p1;
wire   [63:0] tmp_6_fu_407_p4;
wire   [63:0] val_1_fu_417_p3;
wire    ap_CS_fsm_state61;
wire   [31:0] bitcast_ln16_fu_431_p1;
wire   [31:0] xor_ln16_fu_435_p2;
reg   [60:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 61'd1;
end

fn1_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_120_p0),
    .din1(grp_fu_120_p1),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

fn1_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd3288343802),
    .din1(reg_148),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

fn1_uitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
uitofp_64ns_32_6_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln16_reg_497),
    .ce(1'b1),
    .dout(grp_fu_133_p1)
);

fn1_sitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
sitofp_64ns_32_6_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_136_p0),
    .ce(1'b1),
    .dout(grp_fu_136_p1)
);

fn1_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_reg_481),
    .ce(1'b1),
    .dout(grp_fu_140_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln14_reg_476 <= add_ln14_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        add_ln16_reg_497 <= add_ln16_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        conv_reg_502 <= grp_fu_133_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        data_V_reg_450 <= data_V_fu_158_p2;
        isNeg_reg_460 <= add_ln341_fu_182_p2[32'd8];
        tmp_9_reg_455 <= tmp_9_fu_174_p1;
        ush_reg_465 <= ush_fu_206_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        div_reg_481 <= grp_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_143 <= grp_fu_136_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_148 <= grp_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        tmp_10_reg_486 <= {{data_V_1_fu_310_p1[62:52]}};
        tmp_11_reg_492 <= tmp_11_fu_324_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        val_reg_470 <= val_fu_268_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_120_p0 = reg_148;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_120_p0 = conv_reg_502;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_120_p0 = reg_143;
    end else begin
        grp_fu_120_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_120_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_120_p1 = p_11;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_120_p1 = 32'd1145667584;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_120_p1 = 32'd3294786330;
    end else begin
        grp_fu_120_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_136_p0 = add_ln14_reg_476;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_136_p0 = $signed(p_7_read_read_fu_96_p2);
    end else begin
        grp_fu_136_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_304_p2 = (result_V_fu_297_p3 + zext_ln14_fu_281_p1);

assign add_ln16_fu_425_p2 = (val_1_fu_417_p3 + p);

assign add_ln341_fu_182_p2 = ($signed(zext_ln341_fu_178_p1) + $signed(9'd385));

assign add_ln510_fu_344_p2 = ($signed(zext_ln510_fu_341_p1) + $signed(12'd3073));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = xor_ln16_fu_435_p2;

assign bitcast_ln14_fu_154_p1 = reg_148;

assign bitcast_ln16_fu_431_p1 = reg_148;

assign data_V_1_fu_310_p1 = grp_fu_140_p1;

assign data_V_fu_158_p2 = (bitcast_ln14_fu_154_p1 ^ 32'd2147483648);

assign icmp_ln14_fu_275_p2 = ((p_5 == 64'd0) ? 1'b1 : 1'b0);

assign isNeg_1_fu_350_p3 = add_ln510_fu_344_p2[32'd11];

assign isNeg_fu_188_p3 = add_ln341_fu_182_p2[32'd8];

assign mantissa_1_fu_328_p4 = {{{{1'd1}, {tmp_11_reg_492}}}, {1'd0}};

assign mantissa_fu_214_p4 = {{{{1'd1}, {tmp_9_reg_455}}}, {1'd0}};

assign p_7_read_read_fu_96_p2 = p_7;

assign p_Result_s_fu_285_p3 = data_V_reg_450[32'd31];

assign r_V_1_fu_240_p2 = zext_ln15_fu_223_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_230_p1;

assign r_V_2_fu_383_p2 = zext_ln68_fu_337_p1 >> sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_379_p1;

assign r_V_3_fu_389_p2 = zext_ln68_fu_337_p1 << sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_379_p1;

assign r_V_fu_234_p2 = zext_ln15_fu_223_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_230_p1;

assign result_V_2_fu_292_p2 = (64'd0 - val_reg_470);

assign result_V_fu_297_p3 = ((p_Result_s_fu_285_p3[0:0] == 1'b1) ? result_V_2_fu_292_p2 : val_reg_470);

assign sext_ln1311_1_fu_363_p1 = $signed(sub_ln1311_1_fu_358_p2);

assign sext_ln1311_fu_202_p1 = $signed(sub_ln1311_fu_196_p2);

assign sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_379_p1 = $unsigned(sh_prom_i_i_i_i_i22_cast_cast_cast_fu_375_p1);

assign sh_prom_i_i_i_i_i22_cast_cast_cast_fu_375_p1 = $signed(ush_1_fu_367_p3);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_230_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_227_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_227_p1 = $signed(ush_reg_465);

assign sub_ln1311_1_fu_358_p2 = (11'd1023 - tmp_10_reg_486);

assign sub_ln1311_fu_196_p2 = (8'd127 - tmp_8_fu_164_p4);

assign tmp_11_fu_324_p1 = data_V_1_fu_310_p1[51:0];

assign tmp_1_fu_258_p4 = {{r_V_1_fu_240_p2[87:24]}};

assign tmp_6_fu_407_p4 = {{r_V_3_fu_389_p2[116:53]}};

assign tmp_7_fu_395_p3 = r_V_2_fu_383_p2[32'd53];

assign tmp_8_fu_164_p4 = {{data_V_fu_158_p2[30:23]}};

assign tmp_9_fu_174_p1 = data_V_fu_158_p2[22:0];

assign tmp_fu_246_p3 = r_V_fu_234_p2[32'd24];

assign ush_1_fu_367_p3 = ((isNeg_1_fu_350_p3[0:0] == 1'b1) ? sext_ln1311_1_fu_363_p1 : add_ln510_fu_344_p2);

assign ush_fu_206_p3 = ((isNeg_fu_188_p3[0:0] == 1'b1) ? sext_ln1311_fu_202_p1 : add_ln341_fu_182_p2);

assign val_1_fu_417_p3 = ((isNeg_1_fu_350_p3[0:0] == 1'b1) ? zext_ln662_1_fu_403_p1 : tmp_6_fu_407_p4);

assign val_fu_268_p3 = ((isNeg_reg_460[0:0] == 1'b1) ? zext_ln662_fu_254_p1 : tmp_1_fu_258_p4);

assign xor_ln16_fu_435_p2 = (bitcast_ln16_fu_431_p1 ^ 32'd2147483648);

assign zext_ln14_fu_281_p1 = icmp_ln14_fu_275_p2;

assign zext_ln15_fu_223_p1 = mantissa_fu_214_p4;

assign zext_ln341_fu_178_p1 = tmp_8_fu_164_p4;

assign zext_ln510_fu_341_p1 = tmp_10_reg_486;

assign zext_ln662_1_fu_403_p1 = tmp_7_fu_395_p3;

assign zext_ln662_fu_254_p1 = tmp_fu_246_p3;

assign zext_ln68_fu_337_p1 = mantissa_1_fu_328_p4;

endmodule //fn1
