// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2286,HLS_SYN_LUT=3583,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_11,
        p_15,
        ap_return
);

parameter    ap_ST_fsm_state1 = 107'd1;
parameter    ap_ST_fsm_state2 = 107'd2;
parameter    ap_ST_fsm_state3 = 107'd4;
parameter    ap_ST_fsm_state4 = 107'd8;
parameter    ap_ST_fsm_state5 = 107'd16;
parameter    ap_ST_fsm_state6 = 107'd32;
parameter    ap_ST_fsm_state7 = 107'd64;
parameter    ap_ST_fsm_state8 = 107'd128;
parameter    ap_ST_fsm_state9 = 107'd256;
parameter    ap_ST_fsm_state10 = 107'd512;
parameter    ap_ST_fsm_state11 = 107'd1024;
parameter    ap_ST_fsm_state12 = 107'd2048;
parameter    ap_ST_fsm_state13 = 107'd4096;
parameter    ap_ST_fsm_state14 = 107'd8192;
parameter    ap_ST_fsm_state15 = 107'd16384;
parameter    ap_ST_fsm_state16 = 107'd32768;
parameter    ap_ST_fsm_state17 = 107'd65536;
parameter    ap_ST_fsm_state18 = 107'd131072;
parameter    ap_ST_fsm_state19 = 107'd262144;
parameter    ap_ST_fsm_state20 = 107'd524288;
parameter    ap_ST_fsm_state21 = 107'd1048576;
parameter    ap_ST_fsm_state22 = 107'd2097152;
parameter    ap_ST_fsm_state23 = 107'd4194304;
parameter    ap_ST_fsm_state24 = 107'd8388608;
parameter    ap_ST_fsm_state25 = 107'd16777216;
parameter    ap_ST_fsm_state26 = 107'd33554432;
parameter    ap_ST_fsm_state27 = 107'd67108864;
parameter    ap_ST_fsm_state28 = 107'd134217728;
parameter    ap_ST_fsm_state29 = 107'd268435456;
parameter    ap_ST_fsm_state30 = 107'd536870912;
parameter    ap_ST_fsm_state31 = 107'd1073741824;
parameter    ap_ST_fsm_state32 = 107'd2147483648;
parameter    ap_ST_fsm_state33 = 107'd4294967296;
parameter    ap_ST_fsm_state34 = 107'd8589934592;
parameter    ap_ST_fsm_state35 = 107'd17179869184;
parameter    ap_ST_fsm_state36 = 107'd34359738368;
parameter    ap_ST_fsm_state37 = 107'd68719476736;
parameter    ap_ST_fsm_state38 = 107'd137438953472;
parameter    ap_ST_fsm_state39 = 107'd274877906944;
parameter    ap_ST_fsm_state40 = 107'd549755813888;
parameter    ap_ST_fsm_state41 = 107'd1099511627776;
parameter    ap_ST_fsm_state42 = 107'd2199023255552;
parameter    ap_ST_fsm_state43 = 107'd4398046511104;
parameter    ap_ST_fsm_state44 = 107'd8796093022208;
parameter    ap_ST_fsm_state45 = 107'd17592186044416;
parameter    ap_ST_fsm_state46 = 107'd35184372088832;
parameter    ap_ST_fsm_state47 = 107'd70368744177664;
parameter    ap_ST_fsm_state48 = 107'd140737488355328;
parameter    ap_ST_fsm_state49 = 107'd281474976710656;
parameter    ap_ST_fsm_state50 = 107'd562949953421312;
parameter    ap_ST_fsm_state51 = 107'd1125899906842624;
parameter    ap_ST_fsm_state52 = 107'd2251799813685248;
parameter    ap_ST_fsm_state53 = 107'd4503599627370496;
parameter    ap_ST_fsm_state54 = 107'd9007199254740992;
parameter    ap_ST_fsm_state55 = 107'd18014398509481984;
parameter    ap_ST_fsm_state56 = 107'd36028797018963968;
parameter    ap_ST_fsm_state57 = 107'd72057594037927936;
parameter    ap_ST_fsm_state58 = 107'd144115188075855872;
parameter    ap_ST_fsm_state59 = 107'd288230376151711744;
parameter    ap_ST_fsm_state60 = 107'd576460752303423488;
parameter    ap_ST_fsm_state61 = 107'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 107'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 107'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 107'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 107'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 107'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 107'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 107'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 107'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 107'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 107'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 107'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 107'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 107'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 107'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 107'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 107'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 107'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 107'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 107'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 107'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 107'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 107'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 107'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 107'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 107'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 107'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 107'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 107'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 107'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 107'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 107'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 107'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 107'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 107'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 107'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 107'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 107'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 107'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 107'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 107'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 107'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 107'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 107'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 107'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 107'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 107'd81129638414606681695789005144064;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
input  [31:0] p_11;
input  [31:0] p_15;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [106:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_106_p1;
reg   [31:0] reg_110;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state86;
wire  signed [7:0] empty_fu_116_p1;
reg  signed [7:0] empty_reg_481;
wire   [0:0] icmp_ln19_fu_120_p2;
reg   [0:0] icmp_ln19_reg_486;
wire   [63:0] sub_ln23_fu_126_p2;
reg   [63:0] sub_ln23_reg_492;
wire   [15:0] trunc_ln27_fu_132_p1;
reg   [15:0] trunc_ln27_reg_497;
wire   [29:0] grp_fu_136_p2;
reg   [29:0] udiv_ln23_reg_502;
wire    ap_CS_fsm_state36;
wire   [30:0] add_ln23_fu_148_p2;
reg   [30:0] add_ln23_reg_507;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state68;
wire   [7:0] v_fu_163_p1;
reg   [7:0] v_reg_522;
wire    ap_CS_fsm_state74;
reg   [7:0] tmp_12_reg_537;
wire    ap_CS_fsm_state78;
wire   [22:0] tmp_13_fu_181_p1;
reg   [22:0] tmp_13_reg_543;
wire   [0:0] isNeg_fu_194_p3;
reg   [0:0] isNeg_reg_548;
wire    ap_CS_fsm_state79;
wire   [8:0] ush_fu_211_p3;
reg   [8:0] ush_reg_553;
wire   [63:0] sub_ln19_fu_283_p2;
reg   [63:0] sub_ln19_reg_558;
wire    ap_CS_fsm_state80;
wire   [31:0] grp_fu_96_p2;
reg   [31:0] add_reg_563;
reg   [7:0] tmp_14_reg_568;
wire    ap_CS_fsm_state102;
wire   [22:0] tmp_15_fu_303_p1;
reg   [22:0] tmp_15_reg_574;
wire   [0:0] isNeg_1_fu_316_p3;
reg   [0:0] isNeg_1_reg_579;
wire    ap_CS_fsm_state103;
wire   [8:0] ush_1_fu_333_p3;
reg   [8:0] ush_1_reg_584;
wire  signed [7:0] v_13_fu_400_p2;
reg  signed [7:0] v_13_reg_589;
wire    ap_CS_fsm_state104;
wire  signed [7:0] sub_ln22_fu_420_p2;
reg  signed [7:0] sub_ln22_reg_594;
wire    ap_CS_fsm_state105;
wire   [7:0] grp_fu_157_p2;
reg   [7:0] udiv_ln23_1_reg_599;
wire   [15:0] add_ln25_1_fu_445_p2;
reg   [15:0] add_ln25_1_reg_604;
wire   [7:0] v_4_fu_453_p2;
reg   [7:0] v_4_reg_609;
wire    ap_CS_fsm_state106;
reg   [31:0] grp_fu_96_p0;
reg   [31:0] grp_fu_96_p1;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state87;
reg   [63:0] grp_fu_106_p0;
wire    ap_CS_fsm_state81;
wire   [30:0] grp_fu_136_p0;
wire    ap_CS_fsm_state2;
wire   [29:0] trunc_ln23_fu_141_p1;
wire   [30:0] zext_ln23_fu_144_p1;
wire   [30:0] grp_fu_157_p1;
wire   [31:0] data_V_fu_167_p1;
wire   [8:0] zext_ln341_fu_185_p1;
wire   [8:0] add_ln341_fu_188_p2;
wire   [7:0] sub_ln1311_fu_202_p2;
wire  signed [8:0] sext_ln1311_fu_207_p1;
wire   [24:0] mantissa_fu_222_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_235_p1;
wire   [110:0] zext_ln68_fu_231_p1;
wire   [110:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_238_p1;
wire   [110:0] r_V_fu_242_p2;
wire   [0:0] tmp_7_fu_254_p3;
wire   [110:0] r_V_1_fu_248_p2;
wire   [63:0] zext_ln662_fu_262_p1;
wire   [63:0] tmp_6_fu_266_p4;
wire   [63:0] zext_ln19_fu_219_p1;
wire   [63:0] val_fu_276_p3;
wire   [31:0] grp_fu_102_p2;
wire   [31:0] data_V_1_fu_289_p1;
wire   [8:0] zext_ln341_1_fu_307_p1;
wire   [8:0] add_ln341_1_fu_310_p2;
wire   [7:0] sub_ln1311_1_fu_324_p2;
wire  signed [8:0] sext_ln1311_1_fu_329_p1;
wire   [24:0] mantissa_1_fu_341_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i22_cast_cast_cast_fu_354_p1;
wire   [62:0] zext_ln68_1_fu_350_p1;
wire   [62:0] sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_357_p1;
wire   [62:0] r_V_2_fu_361_p2;
wire   [62:0] r_V_3_fu_367_p2;
wire   [7:0] tmp_fu_373_p4;
wire   [7:0] tmp_1_fu_383_p4;
wire   [7:0] select_ln1312_fu_393_p3;
wire   [7:0] mul_ln22_fu_410_p2;
wire   [7:0] add_ln22_fu_405_p2;
wire   [7:0] and_ln22_fu_414_p2;
wire   [7:0] sub_ln24_fu_425_p2;
wire   [7:0] and_ln24_fu_430_p2;
wire   [7:0] v_1_fu_435_p2;
wire   [15:0] zext_ln25_fu_441_p1;
wire  signed [7:0] v_4_fu_453_p1;
wire    ap_CS_fsm_state107;
wire   [0:0] xor_ln25_fu_461_p2;
wire   [15:0] zext_ln25_1_fu_466_p1;
wire   [15:0] add_ln25_fu_470_p2;
wire   [15:0] zext_ln26_fu_458_p1;
reg   [1:0] grp_fu_96_opcode;
reg    grp_fu_136_ap_start;
wire    grp_fu_136_ap_done;
reg    grp_fu_157_ap_start;
wire    grp_fu_157_ap_done;
reg   [106:0] ap_NS_fsm;
wire   [63:0] grp_fu_157_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 107'd1;
end

fn1_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_96_p0),
    .din1(grp_fu_96_p1),
    .opcode(grp_fu_96_opcode),
    .ce(1'b1),
    .dout(grp_fu_96_p2)
);

fn1_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_110),
    .din1(add_reg_563),
    .ce(1'b1),
    .dout(grp_fu_102_p2)
);

fn1_uitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
uitofp_64ns_32_6_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_106_p0),
    .ce(1'b1),
    .dout(grp_fu_106_p1)
);

fn1_udiv_31ns_64ns_30_35_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 35 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 30 ))
udiv_31ns_64ns_30_35_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_136_ap_start),
    .done(grp_fu_136_ap_done),
    .din0(grp_fu_136_p0),
    .din1(sub_ln23_reg_492),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

fn1_udiv_64s_31ns_8_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 8 ))
udiv_64s_31ns_8_68_seq_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_157_ap_start),
    .done(grp_fu_157_ap_done),
    .din0(64'd18446744073709497295),
    .din1(grp_fu_157_p1),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

fn1_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U6(
    .din0(v_13_reg_589),
    .din1(empty_reg_481),
    .dout(mul_ln22_fu_410_p2)
);

fn1_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U7(
    .din0(sub_ln22_reg_594),
    .din1(v_4_fu_453_p1),
    .dout(v_4_fu_453_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        add_ln23_reg_507 <= add_ln23_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        add_ln25_1_reg_604 <= add_ln25_1_fu_445_p2;
        sub_ln22_reg_594 <= sub_ln22_fu_420_p2;
        udiv_ln23_1_reg_599 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        add_reg_563 <= grp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_481 <= empty_fu_116_p1;
        icmp_ln19_reg_486 <= icmp_ln19_fu_120_p2;
        sub_ln23_reg_492 <= sub_ln23_fu_126_p2;
        trunc_ln27_reg_497 <= trunc_ln27_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        isNeg_1_reg_579 <= add_ln341_1_fu_310_p2[32'd8];
        ush_1_reg_584 <= ush_1_fu_333_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        isNeg_reg_548 <= add_ln341_fu_188_p2[32'd8];
        ush_reg_553 <= ush_fu_211_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state73))) begin
        reg_110 <= grp_fu_106_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        sub_ln19_reg_558 <= sub_ln19_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        tmp_12_reg_537 <= {{data_V_fu_167_p1[30:23]}};
        tmp_13_reg_543 <= tmp_13_fu_181_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        tmp_14_reg_568 <= {{data_V_1_fu_289_p1[30:23]}};
        tmp_15_reg_574 <= tmp_15_fu_303_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        udiv_ln23_reg_502 <= grp_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        v_13_reg_589 <= v_13_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        v_4_reg_609 <= v_4_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        v_reg_522 <= v_fu_163_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_106_p0 = sub_ln19_reg_558;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_106_p0 = p_11;
    end else begin
        grp_fu_106_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_136_ap_start = 1'b1;
    end else begin
        grp_fu_136_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_157_ap_start = 1'b1;
    end else begin
        grp_fu_157_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_96_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_96_opcode = 2'd0;
    end else begin
        grp_fu_96_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_96_p0 = p_15;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_96_p0 = reg_110;
    end else begin
        grp_fu_96_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_96_p1 = 32'd1149059072;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_96_p1 = p_15;
    end else begin
        grp_fu_96_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_405_p2 = (v_reg_522 + 8'd19);

assign add_ln23_fu_148_p2 = (zext_ln23_fu_144_p1 + 31'd874);

assign add_ln25_1_fu_445_p2 = (trunc_ln27_reg_497 + zext_ln25_fu_441_p1);

assign add_ln25_fu_470_p2 = (zext_ln25_1_fu_466_p1 + add_ln25_1_reg_604);

assign add_ln341_1_fu_310_p2 = ($signed(zext_ln341_1_fu_307_p1) + $signed(9'd385));

assign add_ln341_fu_188_p2 = ($signed(zext_ln341_fu_185_p1) + $signed(9'd385));

assign and_ln22_fu_414_p2 = (mul_ln22_fu_410_p2 & add_ln22_fu_405_p2);

assign and_ln24_fu_430_p2 = (v_reg_522 & sub_ln24_fu_425_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_return = (add_ln25_fu_470_p2 - zext_ln26_fu_458_p1);

assign data_V_1_fu_289_p1 = grp_fu_102_p2;

assign data_V_fu_167_p1 = grp_fu_96_p2;

assign empty_fu_116_p1 = p[7:0];

assign grp_fu_136_p0 = 64'd887619129;

assign grp_fu_157_p1 = grp_fu_157_p10;

assign grp_fu_157_p10 = add_ln23_reg_507;

assign icmp_ln19_fu_120_p2 = ((p == 64'd0) ? 1'b1 : 1'b0);

assign isNeg_1_fu_316_p3 = add_ln341_1_fu_310_p2[32'd8];

assign isNeg_fu_194_p3 = add_ln341_fu_188_p2[32'd8];

assign mantissa_1_fu_341_p4 = {{{{1'd1}, {tmp_15_reg_574}}}, {1'd0}};

assign mantissa_fu_222_p4 = {{{{1'd1}, {tmp_13_reg_543}}}, {1'd0}};

assign r_V_1_fu_248_p2 = zext_ln68_fu_231_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_238_p1;

assign r_V_2_fu_361_p2 = zext_ln68_1_fu_350_p1 >> sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_357_p1;

assign r_V_3_fu_367_p2 = zext_ln68_1_fu_350_p1 << sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_357_p1;

assign r_V_fu_242_p2 = zext_ln68_fu_231_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_238_p1;

assign select_ln1312_fu_393_p3 = ((isNeg_1_reg_579[0:0] == 1'b1) ? tmp_fu_373_p4 : tmp_1_fu_383_p4);

assign sext_ln1311_1_fu_329_p1 = $signed(sub_ln1311_1_fu_324_p2);

assign sext_ln1311_fu_207_p1 = $signed(sub_ln1311_fu_202_p2);

assign sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_357_p1 = $unsigned(sh_prom_i_i_i_i_i22_cast_cast_cast_fu_354_p1);

assign sh_prom_i_i_i_i_i22_cast_cast_cast_fu_354_p1 = $signed(ush_1_reg_584);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_238_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_235_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_235_p1 = $signed(ush_reg_553);

assign sub_ln1311_1_fu_324_p2 = (8'd127 - tmp_14_reg_568);

assign sub_ln1311_fu_202_p2 = (8'd127 - tmp_12_reg_537);

assign sub_ln19_fu_283_p2 = (zext_ln19_fu_219_p1 - val_fu_276_p3);

assign sub_ln22_fu_420_p2 = (and_ln22_fu_414_p2 - v_reg_522);

assign sub_ln23_fu_126_p2 = (64'd970726759 - p);

assign sub_ln24_fu_425_p2 = (8'd0 - v_reg_522);

assign tmp_13_fu_181_p1 = data_V_fu_167_p1[22:0];

assign tmp_15_fu_303_p1 = data_V_1_fu_289_p1[22:0];

assign tmp_1_fu_383_p4 = {{r_V_3_fu_367_p2[31:24]}};

assign tmp_6_fu_266_p4 = {{r_V_1_fu_248_p2[87:24]}};

assign tmp_7_fu_254_p3 = r_V_fu_242_p2[32'd24];

assign tmp_fu_373_p4 = {{r_V_2_fu_361_p2[31:24]}};

assign trunc_ln23_fu_141_p1 = udiv_ln23_reg_502[29:0];

assign trunc_ln27_fu_132_p1 = p[15:0];

assign ush_1_fu_333_p3 = ((isNeg_1_fu_316_p3[0:0] == 1'b1) ? sext_ln1311_1_fu_329_p1 : add_ln341_1_fu_310_p2);

assign ush_fu_211_p3 = ((isNeg_fu_194_p3[0:0] == 1'b1) ? sext_ln1311_fu_207_p1 : add_ln341_fu_188_p2);

assign v_13_fu_400_p2 = (v_reg_522 ^ select_ln1312_fu_393_p3);

assign v_1_fu_435_p2 = ($signed(and_ln24_fu_430_p2) + $signed(8'd255));

assign v_4_fu_453_p1 = udiv_ln23_1_reg_599[7:0];

assign v_fu_163_p1 = p_11[7:0];

assign val_fu_276_p3 = ((isNeg_reg_548[0:0] == 1'b1) ? zext_ln662_fu_262_p1 : tmp_6_fu_266_p4);

assign xor_ln25_fu_461_p2 = (icmp_ln19_reg_486 ^ 1'd1);

assign zext_ln19_fu_219_p1 = icmp_ln19_reg_486;

assign zext_ln23_fu_144_p1 = trunc_ln23_fu_141_p1;

assign zext_ln25_1_fu_466_p1 = xor_ln25_fu_461_p2;

assign zext_ln25_fu_441_p1 = v_1_fu_435_p2;

assign zext_ln26_fu_458_p1 = v_4_reg_609;

assign zext_ln341_1_fu_307_p1 = tmp_14_reg_568;

assign zext_ln341_fu_185_p1 = tmp_12_reg_537;

assign zext_ln662_fu_262_p1 = tmp_7_fu_254_p3;

assign zext_ln68_1_fu_350_p1 = mantissa_1_fu_341_p4;

assign zext_ln68_fu_231_p1 = mantissa_fu_222_p4;

endmodule //fn1
