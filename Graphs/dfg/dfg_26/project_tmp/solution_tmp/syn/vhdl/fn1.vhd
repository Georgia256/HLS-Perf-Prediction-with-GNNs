-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (63 downto 0);
    p_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_11 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1734,HLS_SYN_LUT=1911,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_C44539C0 : STD_LOGIC_VECTOR (31 downto 0) := "11000100010001010011100111000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_363 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001101100011";
    constant ap_const_lv64_78B2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000111100010110010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_CB : STD_LOGIC_VECTOR (8 downto 0) := "011001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln18_fu_126_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln18_reg_353 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_137_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mul_ln14_fu_141_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_345_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_reg_373 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv9_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_8_reg_388 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_9_fu_211_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_9_reg_394 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_132_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal urem_ln18_reg_399 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal isNeg_fu_224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_241_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_409 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_fu_255_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln18_reg_414 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal lshr_ln19_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln19_reg_419 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_123_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_132_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_147_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_155_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_fu_165_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_169_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln341_fu_215_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_218_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_fu_237_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln18_fu_249_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_fu_260_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_prom_i_i_i_i_i21_cast_cast_cast_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_269_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sh_prom_i_i_i_i_i21_cast_cast_cast_cast_fu_276_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_280_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_7_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_286_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln662_fu_300_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_304_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln20_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_fu_314_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln19_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_132_ap_start : STD_LOGIC;
    signal grp_fu_132_ap_done : STD_LOGIC;
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_340_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_uitofp_64ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fn1_urem_16ns_64ns_64_20_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_mul_9s_9ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component fn1_mul_64s_8ns_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fn1_mac_muladd_9s_9s_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component fn1_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv9_reg_383,
        din1 => ap_const_lv32_C44539C0,
        ce => ap_const_logic_1,
        dout => grp_fu_118_p2);

    uitofp_64ns_32_6_no_dsp_1_U2 : component fn1_uitofp_64ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_123_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_123_p1);

    urem_16ns_64ns_64_20_seq_1_U3 : component fn1_urem_16ns_64ns_64_20_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_132_ap_start,
        done => grp_fu_132_ap_done,
        din0 => grp_fu_132_p0,
        din1 => add_ln18_reg_353,
        ce => ap_const_logic_1,
        dout => grp_fu_132_p2);

    mul_9s_9ns_9_1_1_U4 : component fn1_mul_9s_9ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => empty_fu_137_p1,
        din1 => ap_const_lv9_CB,
        dout => mul_ln14_fu_141_p2);

    mul_64s_8ns_64_5_1_U5 : component fn1_mul_64s_8ns_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 8,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln18_reg_414,
        din1 => grp_fu_340_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_340_p2);

    mac_muladd_9s_9s_9ns_9_4_1_U6 : component fn1_mac_muladd_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln14_fu_141_p2,
        din1 => empty_fu_137_p1,
        din2 => grp_fu_345_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln14_reg_373 <= grp_fu_345_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln18_reg_353 <= add_ln18_fu_126_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                conv9_reg_383 <= grp_fu_123_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                isNeg_reg_404 <= add_ln341_fu_218_p2(8 downto 8);
                urem_ln18_reg_399 <= grp_fu_132_p2;
                ush_reg_409 <= ush_fu_241_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                lshr_ln19_reg_419 <= lshr_ln19_fu_331_p2;
                sub_ln18_reg_414 <= sub_ln18_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_8_reg_388 <= data_V_fu_197_p1(30 downto 23);
                tmp_9_reg_394 <= tmp_9_fu_211_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln18_fu_126_p2 <= std_logic_vector(unsigned(p_4) + unsigned(ap_const_lv64_363));
    add_ln341_fu_218_p2 <= std_logic_vector(unsigned(zext_ln341_fu_215_p1) + unsigned(ap_const_lv9_181));
    and_ln_fu_169_p6 <= ((((tmp_fu_147_p3 & ap_const_lv1_0) & tmp_3_fu_155_p4) & ap_const_lv1_0) & trunc_ln13_fu_165_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_340_p2;
    data_V_fu_197_p1 <= grp_fu_118_p2;
    empty_fu_137_p1 <= p_11(9 - 1 downto 0);
    grp_fu_123_p0 <= (add_ln14_reg_373 & ap_const_lv55_0);

    grp_fu_132_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_132_ap_start <= ap_const_logic_1;
        else 
            grp_fu_132_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_132_p0 <= ap_const_lv64_78B2(16 - 1 downto 0);
    grp_fu_340_p1 <= grp_fu_340_p10(8 - 1 downto 0);
    grp_fu_340_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln19_reg_419),64));
    grp_fu_345_p2 <= std_logic_vector(unsigned(and_ln_fu_169_p6) + unsigned(ap_const_lv9_6));
    icmp_ln20_fu_321_p2 <= "1" when (p_6 = ap_const_lv8_0) else "0";
    isNeg_fu_224_p3 <= add_ln341_fu_218_p2(8 downto 8);
    lshr_ln19_fu_331_p2 <= std_logic_vector(shift_right(unsigned(val_fu_314_p3),to_integer(unsigned('0' & zext_ln19_fu_327_p1(8-1 downto 0)))));
    mantissa_fu_260_p4 <= ((ap_const_lv1_1 & tmp_9_reg_394) & ap_const_lv1_0);
    r_V_1_fu_286_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_269_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i21_cast_cast_cast_cast_fu_276_p1(31-1 downto 0)))));
    r_V_fu_280_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_269_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i21_cast_cast_cast_cast_fu_276_p1(31-1 downto 0)))));
        sext_ln1311_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_232_p2),9));

    sh_prom_i_i_i_i_i21_cast_cast_cast_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i21_cast_cast_cast_fu_273_p1),55));
        sh_prom_i_i_i_i_i21_cast_cast_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_409),32));

    sub_ln1311_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_8_reg_388));
    sub_ln18_fu_255_p2 <= std_logic_vector(unsigned(xor_ln18_fu_249_p2) - unsigned(urem_ln18_reg_399));
    tmp_3_fu_155_p4 <= p_8(6 downto 2);
    tmp_5_fu_304_p4 <= r_V_1_fu_286_p2(31 downto 24);
    tmp_7_fu_292_p3 <= r_V_fu_280_p2(24 downto 24);
    tmp_9_fu_211_p1 <= data_V_fu_197_p1(23 - 1 downto 0);
    tmp_fu_147_p3 <= p_8(8 downto 8);
    trunc_ln13_fu_165_p1 <= p_8(1 - 1 downto 0);
    ush_fu_241_p3 <= 
        sext_ln1311_fu_237_p1 when (isNeg_fu_224_p3(0) = '1') else 
        add_ln341_fu_218_p2;
    val_fu_314_p3 <= 
        zext_ln662_fu_300_p1 when (isNeg_reg_404(0) = '1') else 
        tmp_5_fu_304_p4;
    xor_ln18_fu_249_p2 <= (p xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln19_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln20_fu_321_p2),8));
    zext_ln341_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_388),9));
    zext_ln662_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_292_p3),8));
    zext_ln68_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_260_p4),55));
end behav;
