// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.759091,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1047,HLS_SYN_LUT=966,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        ap_return
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_state2 = 42'd2;
parameter    ap_ST_fsm_state3 = 42'd4;
parameter    ap_ST_fsm_state4 = 42'd8;
parameter    ap_ST_fsm_state5 = 42'd16;
parameter    ap_ST_fsm_state6 = 42'd32;
parameter    ap_ST_fsm_state7 = 42'd64;
parameter    ap_ST_fsm_state8 = 42'd128;
parameter    ap_ST_fsm_state9 = 42'd256;
parameter    ap_ST_fsm_state10 = 42'd512;
parameter    ap_ST_fsm_state11 = 42'd1024;
parameter    ap_ST_fsm_state12 = 42'd2048;
parameter    ap_ST_fsm_state13 = 42'd4096;
parameter    ap_ST_fsm_state14 = 42'd8192;
parameter    ap_ST_fsm_state15 = 42'd16384;
parameter    ap_ST_fsm_state16 = 42'd32768;
parameter    ap_ST_fsm_state17 = 42'd65536;
parameter    ap_ST_fsm_state18 = 42'd131072;
parameter    ap_ST_fsm_state19 = 42'd262144;
parameter    ap_ST_fsm_state20 = 42'd524288;
parameter    ap_ST_fsm_state21 = 42'd1048576;
parameter    ap_ST_fsm_state22 = 42'd2097152;
parameter    ap_ST_fsm_state23 = 42'd4194304;
parameter    ap_ST_fsm_state24 = 42'd8388608;
parameter    ap_ST_fsm_state25 = 42'd16777216;
parameter    ap_ST_fsm_state26 = 42'd33554432;
parameter    ap_ST_fsm_state27 = 42'd67108864;
parameter    ap_ST_fsm_state28 = 42'd134217728;
parameter    ap_ST_fsm_state29 = 42'd268435456;
parameter    ap_ST_fsm_state30 = 42'd536870912;
parameter    ap_ST_fsm_state31 = 42'd1073741824;
parameter    ap_ST_fsm_state32 = 42'd2147483648;
parameter    ap_ST_fsm_state33 = 42'd4294967296;
parameter    ap_ST_fsm_state34 = 42'd8589934592;
parameter    ap_ST_fsm_state35 = 42'd17179869184;
parameter    ap_ST_fsm_state36 = 42'd34359738368;
parameter    ap_ST_fsm_state37 = 42'd68719476736;
parameter    ap_ST_fsm_state38 = 42'd137438953472;
parameter    ap_ST_fsm_state39 = 42'd274877906944;
parameter    ap_ST_fsm_state40 = 42'd549755813888;
parameter    ap_ST_fsm_state41 = 42'd1099511627776;
parameter    ap_ST_fsm_state42 = 42'd2199023255552;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [30:0] add_ln24_fu_84_p2;
reg   [30:0] add_ln24_reg_187;
wire    ap_CS_fsm_state2;
wire   [2:0] grp_fu_68_p2;
reg   [2:0] urem_ln20_reg_207;
wire    ap_CS_fsm_state12;
wire   [2:0] sub_ln19_fu_130_p2;
reg   [2:0] sub_ln19_reg_212;
wire    ap_CS_fsm_state22;
wire   [15:0] grp_fu_111_p2;
reg   [15:0] srem_ln24_reg_217;
wire    ap_CS_fsm_state23;
wire  signed [15:0] v_9_fu_46_p0;
wire  signed [15:0] trunc_ln10_fu_50_p0;
wire  signed [15:0] zext_ln19_fu_54_p0;
wire   [7:0] v_9_fu_46_p1;
wire   [10:0] zext_ln21_fu_58_p1;
wire   [7:0] grp_fu_68_p0;
wire   [10:0] grp_fu_68_p1;
wire   [3:0] trunc_ln10_fu_50_p1;
wire   [30:0] zext_ln19_fu_54_p1;
wire   [30:0] zext_ln24_fu_74_p1;
wire   [30:0] shl_ln24_fu_78_p2;
wire  signed [15:0] zext_ln19_1_fu_90_p0;
wire   [16:0] zext_ln19_1_fu_90_p1;
wire   [16:0] grp_fu_99_p1;
wire  signed [15:0] sext_ln24_fu_105_p0;
wire  signed [16:0] grp_fu_111_p0;
wire   [31:0] grp_fu_111_p1;
wire   [2:0] grp_fu_99_p2;
wire   [2:0] trunc_ln19_fu_117_p1;
wire   [2:0] xor_ln19_fu_121_p2;
wire   [2:0] trunc_ln19_1_fu_127_p1;
wire   [15:0] trunc_ln24_fu_143_p1;
wire   [7:0] v_7_fu_136_p3;
wire  signed [9:0] sext_ln25_fu_152_p1;
wire   [9:0] sub_ln25_fu_156_p2;
wire   [15:0] grp_fu_166_p0;
wire   [10:0] grp_fu_166_p1;
wire   [15:0] grp_fu_166_p2;
wire    ap_CS_fsm_state42;
reg    grp_fu_68_ap_start;
wire    grp_fu_68_ap_done;
reg    grp_fu_99_ap_start;
wire    grp_fu_99_ap_done;
reg    grp_fu_111_ap_start;
wire    grp_fu_111_ap_done;
reg    grp_fu_166_ap_start;
wire    grp_fu_166_ap_done;
reg   [41:0] ap_NS_fsm;
wire   [15:0] grp_fu_166_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 42'd1;
end

fn1_urem_8ns_11ns_3_12_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 3 ))
urem_8ns_11ns_3_12_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_68_ap_start),
    .done(grp_fu_68_ap_done),
    .din0(grp_fu_68_p0),
    .din1(grp_fu_68_p1),
    .ce(1'b1),
    .dout(grp_fu_68_p2)
);

fn1_sdiv_17s_17ns_3_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 3 ))
sdiv_17s_17ns_3_21_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_99_ap_start),
    .done(grp_fu_99_ap_done),
    .din0(17'd107305),
    .din1(grp_fu_99_p1),
    .ce(1'b1),
    .dout(grp_fu_99_p2)
);

fn1_srem_17s_32ns_16_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
srem_17s_32ns_16_21_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_111_ap_start),
    .done(grp_fu_111_ap_done),
    .din0(grp_fu_111_p0),
    .din1(grp_fu_111_p1),
    .ce(1'b1),
    .dout(grp_fu_111_p2)
);

fn1_srem_16ns_11ns_16_20_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 16 ))
srem_16ns_11ns_16_20_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_166_ap_start),
    .done(grp_fu_166_ap_done),
    .din0(grp_fu_166_p0),
    .din1(grp_fu_166_p1),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln24_reg_187 <= add_ln24_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        srem_ln24_reg_217 <= grp_fu_111_p2;
        sub_ln19_reg_212 <= sub_ln19_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        urem_ln20_reg_207 <= grp_fu_68_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_111_ap_start = 1'b1;
    end else begin
        grp_fu_111_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_166_ap_start = 1'b1;
    end else begin
        grp_fu_166_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_68_ap_start = 1'b1;
    end else begin
        grp_fu_68_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_99_ap_start = 1'b1;
    end else begin
        grp_fu_99_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_84_p2 = (shl_ln24_fu_78_p2 + 31'd919);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_return = $signed(grp_fu_166_p2);

assign grp_fu_111_p0 = sext_ln24_fu_105_p0;

assign grp_fu_111_p1 = add_ln24_reg_187;

assign grp_fu_166_p0 = (trunc_ln24_fu_143_p1 ^ 16'd65535);

assign grp_fu_166_p1 = grp_fu_166_p10;

assign grp_fu_166_p10 = sub_ln25_fu_156_p2;

assign grp_fu_68_p0 = 11'd111;

assign grp_fu_68_p1 = (zext_ln21_fu_58_p1 + 11'd960);

assign grp_fu_99_p1 = (zext_ln19_1_fu_90_p1 + 17'd315);

assign sext_ln24_fu_105_p0 = p;

assign sext_ln25_fu_152_p1 = $signed(v_7_fu_136_p3);

assign shl_ln24_fu_78_p2 = zext_ln19_fu_54_p1 << zext_ln24_fu_74_p1;

assign sub_ln19_fu_130_p2 = (xor_ln19_fu_121_p2 - trunc_ln19_1_fu_127_p1);

assign sub_ln25_fu_156_p2 = ($signed(10'd603) - $signed(sext_ln25_fu_152_p1));

assign trunc_ln10_fu_50_p0 = p;

assign trunc_ln10_fu_50_p1 = trunc_ln10_fu_50_p0[3:0];

assign trunc_ln19_1_fu_127_p1 = urem_ln20_reg_207[2:0];

assign trunc_ln19_fu_117_p1 = grp_fu_99_p2[2:0];

assign trunc_ln24_fu_143_p1 = srem_ln24_reg_217[15:0];

assign v_7_fu_136_p3 = {{sub_ln19_reg_212}, {5'd0}};

assign v_9_fu_46_p0 = p;

assign v_9_fu_46_p1 = v_9_fu_46_p0[7:0];

assign xor_ln19_fu_121_p2 = (trunc_ln19_fu_117_p1 ^ 3'd7);

assign zext_ln19_1_fu_90_p0 = p;

assign zext_ln19_1_fu_90_p1 = $unsigned(zext_ln19_1_fu_90_p0);

assign zext_ln19_fu_54_p0 = p;

assign zext_ln19_fu_54_p1 = $unsigned(zext_ln19_fu_54_p0);

assign zext_ln21_fu_58_p1 = v_9_fu_46_p1;

assign zext_ln24_fu_74_p1 = trunc_ln10_fu_50_p1;

endmodule //fn1
