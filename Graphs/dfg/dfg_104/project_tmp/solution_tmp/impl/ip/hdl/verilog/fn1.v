// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.986000,HLS_SYN_LAT=89,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1968,HLS_SYN_LUT=2910,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_5,
        p_7_address0,
        p_7_ce0,
        p_7_q0,
        p_9_address0,
        p_9_ce0,
        p_9_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 90'd1;
parameter    ap_ST_fsm_state2 = 90'd2;
parameter    ap_ST_fsm_state3 = 90'd4;
parameter    ap_ST_fsm_state4 = 90'd8;
parameter    ap_ST_fsm_state5 = 90'd16;
parameter    ap_ST_fsm_state6 = 90'd32;
parameter    ap_ST_fsm_state7 = 90'd64;
parameter    ap_ST_fsm_state8 = 90'd128;
parameter    ap_ST_fsm_state9 = 90'd256;
parameter    ap_ST_fsm_state10 = 90'd512;
parameter    ap_ST_fsm_state11 = 90'd1024;
parameter    ap_ST_fsm_state12 = 90'd2048;
parameter    ap_ST_fsm_state13 = 90'd4096;
parameter    ap_ST_fsm_state14 = 90'd8192;
parameter    ap_ST_fsm_state15 = 90'd16384;
parameter    ap_ST_fsm_state16 = 90'd32768;
parameter    ap_ST_fsm_state17 = 90'd65536;
parameter    ap_ST_fsm_state18 = 90'd131072;
parameter    ap_ST_fsm_state19 = 90'd262144;
parameter    ap_ST_fsm_state20 = 90'd524288;
parameter    ap_ST_fsm_state21 = 90'd1048576;
parameter    ap_ST_fsm_state22 = 90'd2097152;
parameter    ap_ST_fsm_state23 = 90'd4194304;
parameter    ap_ST_fsm_state24 = 90'd8388608;
parameter    ap_ST_fsm_state25 = 90'd16777216;
parameter    ap_ST_fsm_state26 = 90'd33554432;
parameter    ap_ST_fsm_state27 = 90'd67108864;
parameter    ap_ST_fsm_state28 = 90'd134217728;
parameter    ap_ST_fsm_state29 = 90'd268435456;
parameter    ap_ST_fsm_state30 = 90'd536870912;
parameter    ap_ST_fsm_state31 = 90'd1073741824;
parameter    ap_ST_fsm_state32 = 90'd2147483648;
parameter    ap_ST_fsm_state33 = 90'd4294967296;
parameter    ap_ST_fsm_state34 = 90'd8589934592;
parameter    ap_ST_fsm_state35 = 90'd17179869184;
parameter    ap_ST_fsm_state36 = 90'd34359738368;
parameter    ap_ST_fsm_state37 = 90'd68719476736;
parameter    ap_ST_fsm_state38 = 90'd137438953472;
parameter    ap_ST_fsm_state39 = 90'd274877906944;
parameter    ap_ST_fsm_state40 = 90'd549755813888;
parameter    ap_ST_fsm_state41 = 90'd1099511627776;
parameter    ap_ST_fsm_state42 = 90'd2199023255552;
parameter    ap_ST_fsm_state43 = 90'd4398046511104;
parameter    ap_ST_fsm_state44 = 90'd8796093022208;
parameter    ap_ST_fsm_state45 = 90'd17592186044416;
parameter    ap_ST_fsm_state46 = 90'd35184372088832;
parameter    ap_ST_fsm_state47 = 90'd70368744177664;
parameter    ap_ST_fsm_state48 = 90'd140737488355328;
parameter    ap_ST_fsm_state49 = 90'd281474976710656;
parameter    ap_ST_fsm_state50 = 90'd562949953421312;
parameter    ap_ST_fsm_state51 = 90'd1125899906842624;
parameter    ap_ST_fsm_state52 = 90'd2251799813685248;
parameter    ap_ST_fsm_state53 = 90'd4503599627370496;
parameter    ap_ST_fsm_state54 = 90'd9007199254740992;
parameter    ap_ST_fsm_state55 = 90'd18014398509481984;
parameter    ap_ST_fsm_state56 = 90'd36028797018963968;
parameter    ap_ST_fsm_state57 = 90'd72057594037927936;
parameter    ap_ST_fsm_state58 = 90'd144115188075855872;
parameter    ap_ST_fsm_state59 = 90'd288230376151711744;
parameter    ap_ST_fsm_state60 = 90'd576460752303423488;
parameter    ap_ST_fsm_state61 = 90'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 90'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 90'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 90'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 90'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 90'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 90'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 90'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 90'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 90'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 90'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 90'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 90'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 90'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 90'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 90'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 90'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 90'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 90'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 90'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 90'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 90'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 90'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 90'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 90'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 90'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 90'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 90'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 90'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 90'd618970019642690137449562112;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p;
input  [63:0] p_5;
output  [6:0] p_7_address0;
output   p_7_ce0;
input  [7:0] p_7_q0;
output  [0:0] p_9_address0;
output   p_9_ce0;
input  [63:0] p_9_q0;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] p_7_address0;
reg p_7_ce0;
reg p_9_ce0;

(* fsm_encoding = "none" *) reg   [89:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] tmp_8_reg_379;
wire    ap_CS_fsm_state2;
wire   [51:0] tmp_9_fu_151_p1;
reg   [51:0] tmp_9_reg_385;
wire  signed [63:0] val_fu_244_p3;
reg  signed [63:0] val_reg_390;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_fu_252_p2;
reg   [63:0] mul_ln14_reg_400;
reg   [7:0] p_7_load_1_reg_405;
wire    ap_CS_fsm_state9;
wire   [63:0] add_ln14_fu_257_p2;
reg   [63:0] add_ln14_reg_410;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state76;
wire   [7:0] v_fu_298_p2;
reg   [7:0] v_reg_425;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state88;
wire   [31:0] grp_fu_319_p2;
reg   [31:0] mul_ln15_reg_440;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire   [53:0] mantissa_fu_155_p4;
wire   [11:0] zext_ln510_fu_168_p1;
wire   [11:0] add_ln510_fu_171_p2;
wire   [10:0] sub_ln1311_fu_185_p2;
wire   [0:0] isNeg_fu_177_p3;
wire  signed [11:0] sext_ln1311_fu_190_p1;
wire   [11:0] ush_fu_194_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_202_p1;
wire   [168:0] zext_ln68_fu_164_p1;
wire   [168:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_206_p1;
wire   [168:0] r_V_fu_210_p2;
wire   [0:0] tmp_7_fu_222_p3;
wire   [168:0] r_V_1_fu_216_p2;
wire   [63:0] zext_ln662_fu_230_p1;
wire   [63:0] tmp_6_fu_234_p4;
wire   [30:0] grp_fu_252_p1;
wire    ap_CS_fsm_state4;
wire   [7:0] xor_ln14_fu_262_p2;
wire  signed [63:0] grp_fu_271_p0;
wire   [0:0] icmp_ln13_fu_276_p2;
wire   [6:0] or_ln_fu_282_p3;
wire   [7:0] grp_fu_271_p2;
wire   [7:0] trunc_ln14_fu_294_p1;
wire   [7:0] zext_ln14_fu_290_p1;
wire   [7:0] xor_ln15_fu_304_p2;
wire  signed [8:0] grp_fu_313_p0;
wire  signed [7:0] grp_fu_319_p1;
wire   [14:0] grp_fu_313_p2;
wire   [0:0] trunc_ln15_fu_330_p1;
wire   [0:0] icmp_ln15_fu_325_p2;
wire   [13:0] tmp_fu_340_p4;
wire   [0:0] or_ln15_fu_334_p2;
wire   [14:0] tmp_1_fu_350_p3;
wire   [63:0] sub_ln16_fu_362_p2;
wire  signed [63:0] sext_ln15_1_fu_358_p1;
reg    grp_fu_271_ap_start;
wire    grp_fu_271_ap_done;
reg    grp_fu_313_ap_start;
wire    grp_fu_313_ap_done;
reg   [89:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 90'd1;
end

fn1_mul_64s_31ns_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 64 ))
mul_64s_31ns_64_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(val_reg_390),
    .din1(grp_fu_252_p1),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

fn1_udiv_64s_64ns_8_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 8 ))
udiv_64s_64ns_8_68_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_271_ap_start),
    .done(grp_fu_271_ap_done),
    .din0(grp_fu_271_p0),
    .din1(add_ln14_reg_410),
    .ce(1'b1),
    .dout(grp_fu_271_p2)
);

fn1_srem_9s_15ns_15_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
srem_9s_15ns_15_13_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_313_ap_start),
    .done(grp_fu_313_ap_done),
    .din0(grp_fu_313_p0),
    .din1(15'd13774),
    .ce(1'b1),
    .dout(grp_fu_313_p2)
);

fn1_mul_32s_8s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
mul_32s_8s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p),
    .din1(grp_fu_319_p1),
    .ce(1'b1),
    .dout(grp_fu_319_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln14_reg_410 <= add_ln14_fu_257_p2;
        p_7_load_1_reg_405 <= p_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln14_reg_400 <= grp_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        mul_ln15_reg_440 <= grp_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_8_reg_379 <= {{p_9_q0[62:52]}};
        tmp_9_reg_385 <= tmp_9_fu_151_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        v_reg_425 <= v_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        val_reg_390 <= val_fu_244_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_271_ap_start = 1'b1;
    end else begin
        grp_fu_271_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_313_ap_start = 1'b1;
    end else begin
        grp_fu_313_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        p_7_address0 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_7_address0 = 64'd14;
    end else begin
        p_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state8))) begin
        p_7_ce0 = 1'b1;
    end else begin
        p_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_9_ce0 = 1'b1;
    end else begin
        p_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_257_p2 = (mul_ln14_reg_400 + 64'd173);

assign add_ln510_fu_171_p2 = ($signed(zext_ln510_fu_168_p1) + $signed(12'd3073));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_return = (sub_ln16_fu_362_p2 & sext_ln15_1_fu_358_p1);

assign grp_fu_252_p1 = 64'd795442954;

assign grp_fu_271_p0 = $signed(xor_ln14_fu_262_p2);

assign grp_fu_313_p0 = $signed(xor_ln15_fu_304_p2);

assign grp_fu_319_p1 = 32'd4294967223;

assign icmp_ln13_fu_276_p2 = ((p_7_q0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_325_p2 = ((mul_ln15_reg_440 == 32'd0) ? 1'b1 : 1'b0);

assign isNeg_fu_177_p3 = add_ln510_fu_171_p2[32'd11];

assign mantissa_fu_155_p4 = {{{{1'd1}, {tmp_9_reg_385}}}, {1'd0}};

assign or_ln15_fu_334_p2 = (trunc_ln15_fu_330_p1 | icmp_ln15_fu_325_p2);

assign or_ln_fu_282_p3 = {{6'd47}, {icmp_ln13_fu_276_p2}};

assign p_9_address0 = 64'd1;

assign r_V_1_fu_216_p2 = zext_ln68_fu_164_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_206_p1;

assign r_V_fu_210_p2 = zext_ln68_fu_164_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_206_p1;

assign sext_ln1311_fu_190_p1 = $signed(sub_ln1311_fu_185_p2);

assign sext_ln15_1_fu_358_p1 = $signed(tmp_1_fu_350_p3);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_206_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_202_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_202_p1 = $signed(ush_fu_194_p3);

assign sub_ln1311_fu_185_p2 = (11'd1023 - tmp_8_reg_379);

assign sub_ln16_fu_362_p2 = (64'd103 - p_5);

assign tmp_1_fu_350_p3 = {{tmp_fu_340_p4}, {or_ln15_fu_334_p2}};

assign tmp_6_fu_234_p4 = {{r_V_1_fu_216_p2[116:53]}};

assign tmp_7_fu_222_p3 = r_V_fu_210_p2[32'd53];

assign tmp_9_fu_151_p1 = p_9_q0[51:0];

assign tmp_fu_340_p4 = {{grp_fu_313_p2[14:1]}};

assign trunc_ln14_fu_294_p1 = grp_fu_271_p2[7:0];

assign trunc_ln15_fu_330_p1 = grp_fu_313_p2[0:0];

assign ush_fu_194_p3 = ((isNeg_fu_177_p3[0:0] == 1'b1) ? sext_ln1311_fu_190_p1 : add_ln510_fu_171_p2);

assign v_fu_298_p2 = (trunc_ln14_fu_294_p1 + zext_ln14_fu_290_p1);

assign val_fu_244_p3 = ((isNeg_fu_177_p3[0:0] == 1'b1) ? zext_ln662_fu_230_p1 : tmp_6_fu_234_p4);

assign xor_ln14_fu_262_p2 = (p_7_load_1_reg_405 ^ 8'd255);

assign xor_ln15_fu_304_p2 = (v_reg_425 ^ 8'd255);

assign zext_ln14_fu_290_p1 = or_ln_fu_282_p3;

assign zext_ln510_fu_168_p1 = tmp_8_reg_379;

assign zext_ln662_fu_230_p1 = tmp_7_fu_222_p3;

assign zext_ln68_fu_164_p1 = mantissa_fu_155_p4;

endmodule //fn1
