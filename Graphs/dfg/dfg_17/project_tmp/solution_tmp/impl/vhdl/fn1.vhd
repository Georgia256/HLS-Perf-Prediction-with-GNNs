-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fn1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.759091,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1047,HLS_SYN_LUT=966,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv11_3C0 : STD_LOGIC_VECTOR (10 downto 0) := "01111000000";
    constant ap_const_lv11_6F : STD_LOGIC_VECTOR (10 downto 0) := "00001101111";
    constant ap_const_lv31_397 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001110010111";
    constant ap_const_lv17_13B : STD_LOGIC_VECTOR (16 downto 0) := "00000000100111011";
    constant ap_const_lv17_1A329 : STD_LOGIC_VECTOR (16 downto 0) := "11010001100101001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv10_25B : STD_LOGIC_VECTOR (9 downto 0) := "1001011011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln24_fu_84_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln24_reg_187 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_68_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal urem_ln20_reg_207 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sub_ln19_fu_130_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln19_reg_212 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal srem_ln24_reg_217 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal v_9_fu_46_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln10_fu_50_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_fu_54_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal v_9_fu_46_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_fu_58_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_68_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_68_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln10_fu_50_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln19_fu_54_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln24_fu_74_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln24_fu_78_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln19_1_fu_90_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_1_fu_90_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_99_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_fu_105_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_111_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_99_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln19_fu_117_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln19_fu_121_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln19_1_fu_127_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln24_fu_143_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal v_7_fu_136_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln25_fu_152_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln25_fu_156_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_166_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_68_ap_start : STD_LOGIC;
    signal grp_fu_68_ap_done : STD_LOGIC;
    signal grp_fu_99_ap_start : STD_LOGIC;
    signal grp_fu_99_ap_done : STD_LOGIC;
    signal grp_fu_111_ap_start : STD_LOGIC;
    signal grp_fu_111_ap_done : STD_LOGIC;
    signal grp_fu_166_ap_start : STD_LOGIC;
    signal grp_fu_166_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_166_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fn1_urem_8ns_11ns_3_12_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component fn1_sdiv_17s_17ns_3_21_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component fn1_srem_17s_32ns_16_21_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fn1_srem_16ns_11ns_16_20_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    urem_8ns_11ns_3_12_seq_1_U1 : component fn1_urem_8ns_11ns_3_12_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_68_ap_start,
        done => grp_fu_68_ap_done,
        din0 => grp_fu_68_p0,
        din1 => grp_fu_68_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_68_p2);

    sdiv_17s_17ns_3_21_seq_1_U2 : component fn1_sdiv_17s_17ns_3_21_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_99_ap_start,
        done => grp_fu_99_ap_done,
        din0 => ap_const_lv17_1A329,
        din1 => grp_fu_99_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_99_p2);

    srem_17s_32ns_16_21_seq_1_U3 : component fn1_srem_17s_32ns_16_21_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_111_ap_start,
        done => grp_fu_111_ap_done,
        din0 => grp_fu_111_p0,
        din1 => grp_fu_111_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_111_p2);

    srem_16ns_11ns_16_20_seq_1_U4 : component fn1_srem_16ns_11ns_16_20_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_166_ap_start,
        done => grp_fu_166_ap_done,
        din0 => grp_fu_166_p0,
        din1 => grp_fu_166_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln24_reg_187 <= add_ln24_fu_84_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                srem_ln24_reg_217 <= grp_fu_111_p2;
                sub_ln19_reg_212 <= sub_ln19_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                urem_ln20_reg_207 <= grp_fu_68_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln24_fu_84_p2 <= std_logic_vector(unsigned(shl_ln24_fu_78_p2) + unsigned(ap_const_lv31_397));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);

    ap_done_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_166_p2),64));


    grp_fu_111_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_111_ap_start <= ap_const_logic_1;
        else 
            grp_fu_111_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_111_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_fu_105_p0),17));

    grp_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_reg_187),32));

    grp_fu_166_ap_start_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_166_ap_start <= ap_const_logic_1;
        else 
            grp_fu_166_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_166_p0 <= (trunc_ln24_fu_143_p1 xor ap_const_lv16_FFFF);
    grp_fu_166_p1 <= grp_fu_166_p10(11 - 1 downto 0);
    grp_fu_166_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln25_fu_156_p2),16));

    grp_fu_68_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_68_ap_start <= ap_const_logic_1;
        else 
            grp_fu_68_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_68_p0 <= ap_const_lv11_6F(8 - 1 downto 0);
    grp_fu_68_p1 <= std_logic_vector(unsigned(zext_ln21_fu_58_p1) + unsigned(ap_const_lv11_3C0));

    grp_fu_99_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_99_ap_start <= ap_const_logic_1;
        else 
            grp_fu_99_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_99_p1 <= std_logic_vector(unsigned(zext_ln19_1_fu_90_p1) + unsigned(ap_const_lv17_13B));
    sext_ln24_fu_105_p0 <= p;
        sext_ln25_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(v_7_fu_136_p3),10));

    shl_ln24_fu_78_p2 <= std_logic_vector(shift_left(unsigned(zext_ln19_fu_54_p1),to_integer(unsigned('0' & zext_ln24_fu_74_p1(31-1 downto 0)))));
    sub_ln19_fu_130_p2 <= std_logic_vector(unsigned(xor_ln19_fu_121_p2) - unsigned(trunc_ln19_1_fu_127_p1));
    sub_ln25_fu_156_p2 <= std_logic_vector(signed(ap_const_lv10_25B) - signed(sext_ln25_fu_152_p1));
    trunc_ln10_fu_50_p0 <= p;
    trunc_ln10_fu_50_p1 <= trunc_ln10_fu_50_p0(4 - 1 downto 0);
    trunc_ln19_1_fu_127_p1 <= urem_ln20_reg_207(3 - 1 downto 0);
    trunc_ln19_fu_117_p1 <= grp_fu_99_p2(3 - 1 downto 0);
    trunc_ln24_fu_143_p1 <= srem_ln24_reg_217(16 - 1 downto 0);
    v_7_fu_136_p3 <= (sub_ln19_reg_212 & ap_const_lv5_0);
    v_9_fu_46_p0 <= p;
    v_9_fu_46_p1 <= v_9_fu_46_p0(8 - 1 downto 0);
    xor_ln19_fu_121_p2 <= (trunc_ln19_fu_117_p1 xor ap_const_lv3_7);
    zext_ln19_1_fu_90_p0 <= p;
    zext_ln19_1_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_1_fu_90_p0),17));
    zext_ln19_fu_54_p0 <= p;
    zext_ln19_fu_54_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_fu_54_p0),31));
    zext_ln21_fu_58_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_9_fu_46_p1),11));
    zext_ln24_fu_74_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln10_fu_50_p1),31));
end behav;
