// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1973,HLS_SYN_LUT=2931,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_4_address0,
        p_4_ce0,
        p_4_q0,
        p_6,
        p_9,
        p_13_address0,
        p_13_ce0,
        p_13_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_state16 = 46'd32768;
parameter    ap_ST_fsm_state17 = 46'd65536;
parameter    ap_ST_fsm_state18 = 46'd131072;
parameter    ap_ST_fsm_state19 = 46'd262144;
parameter    ap_ST_fsm_state20 = 46'd524288;
parameter    ap_ST_fsm_state21 = 46'd1048576;
parameter    ap_ST_fsm_state22 = 46'd2097152;
parameter    ap_ST_fsm_state23 = 46'd4194304;
parameter    ap_ST_fsm_state24 = 46'd8388608;
parameter    ap_ST_fsm_state25 = 46'd16777216;
parameter    ap_ST_fsm_state26 = 46'd33554432;
parameter    ap_ST_fsm_state27 = 46'd67108864;
parameter    ap_ST_fsm_state28 = 46'd134217728;
parameter    ap_ST_fsm_state29 = 46'd268435456;
parameter    ap_ST_fsm_state30 = 46'd536870912;
parameter    ap_ST_fsm_state31 = 46'd1073741824;
parameter    ap_ST_fsm_state32 = 46'd2147483648;
parameter    ap_ST_fsm_state33 = 46'd4294967296;
parameter    ap_ST_fsm_state34 = 46'd8589934592;
parameter    ap_ST_fsm_state35 = 46'd17179869184;
parameter    ap_ST_fsm_state36 = 46'd34359738368;
parameter    ap_ST_fsm_state37 = 46'd68719476736;
parameter    ap_ST_fsm_state38 = 46'd137438953472;
parameter    ap_ST_fsm_state39 = 46'd274877906944;
parameter    ap_ST_fsm_state40 = 46'd549755813888;
parameter    ap_ST_fsm_state41 = 46'd1099511627776;
parameter    ap_ST_fsm_state42 = 46'd2199023255552;
parameter    ap_ST_fsm_state43 = 46'd4398046511104;
parameter    ap_ST_fsm_state44 = 46'd8796093022208;
parameter    ap_ST_fsm_state45 = 46'd17592186044416;
parameter    ap_ST_fsm_state46 = 46'd35184372088832;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p;
output  [3:0] p_4_address0;
output   p_4_ce0;
input  [31:0] p_4_q0;
input  [31:0] p_6;
input  [7:0] p_9;
output  [2:0] p_13_address0;
output   p_13_ce0;
input  [31:0] p_13_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] p_4_address0;
reg p_4_ce0;
reg p_13_ce0;

(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] p_4_load_reg_558;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_159_p2;
reg   [31:0] dc_reg_568;
wire    ap_CS_fsm_state7;
wire   [31:0] data_V_fu_168_p1;
reg   [31:0] data_V_reg_573;
wire    ap_CS_fsm_state8;
wire   [22:0] tmp_12_fu_181_p1;
reg   [22:0] tmp_12_reg_578;
wire   [0:0] isNeg_1_fu_195_p3;
reg   [0:0] isNeg_1_reg_583;
wire   [8:0] ush_1_fu_213_p3;
reg   [8:0] ush_1_reg_588;
wire   [7:0] val_1_fu_275_p3;
reg   [7:0] val_1_reg_593;
wire    ap_CS_fsm_state9;
wire   [7:0] result_V_2_fu_282_p2;
reg   [7:0] result_V_2_reg_598;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state17;
wire   [22:0] tmp_10_fu_345_p1;
reg   [22:0] tmp_10_reg_618;
wire    ap_CS_fsm_state18;
wire   [0:0] isNeg_fu_359_p3;
reg   [0:0] isNeg_reg_623;
wire   [8:0] ush_fu_377_p3;
reg   [8:0] ush_reg_628;
wire   [0:0] icmp_ln16_fu_446_p2;
reg   [0:0] icmp_ln16_reg_638;
wire    ap_CS_fsm_state19;
wire   [63:0] sub_ln17_fu_452_p2;
reg   [63:0] sub_ln17_reg_643;
wire    ap_CS_fsm_state20;
wire   [0:0] grp_fu_461_p2;
reg   [0:0] udiv_ln16_reg_653;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire   [8:0] grp_fu_491_p2;
reg   [8:0] srem_ln18_reg_668;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire   [23:0] result_2_fu_528_p2;
reg   [23:0] result_2_reg_678;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_159_p1;
wire   [7:0] tmp_11_fu_171_p4;
wire   [8:0] zext_ln341_1_fu_185_p1;
wire   [8:0] add_ln341_1_fu_189_p2;
wire   [7:0] sub_ln1311_1_fu_203_p2;
wire  signed [8:0] sext_ln1311_1_fu_209_p1;
wire   [24:0] mantissa_1_fu_221_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i22_cast_cast_cast_fu_234_p1;
wire   [54:0] zext_ln15_fu_230_p1;
wire   [54:0] sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_237_p1;
wire   [54:0] r_V_2_fu_241_p2;
wire   [0:0] tmp_8_fu_253_p3;
wire   [54:0] r_V_3_fu_247_p2;
wire   [7:0] zext_ln662_1_fu_261_p1;
wire   [7:0] tmp_6_fu_265_p4;
wire   [0:0] p_Result_s_fu_288_p3;
wire   [7:0] result_V_fu_295_p3;
wire  signed [8:0] sext_ln20_fu_301_p1;
wire   [8:0] add_ln20_fu_305_p2;
wire   [0:0] icmp_ln21_fu_315_p2;
wire  signed [31:0] grp_fu_329_p0;
wire   [10:0] grp_fu_329_p1;
wire   [7:0] tmp_9_fu_335_p4;
wire   [8:0] zext_ln341_fu_349_p1;
wire   [8:0] add_ln341_fu_353_p2;
wire   [7:0] sub_ln1311_fu_367_p2;
wire  signed [8:0] sext_ln1311_fu_373_p1;
wire   [24:0] mantissa_fu_385_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_398_p1;
wire   [110:0] zext_ln68_fu_394_p1;
wire   [110:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_401_p1;
wire   [110:0] r_V_fu_405_p2;
wire   [0:0] tmp_fu_417_p3;
wire   [110:0] r_V_1_fu_411_p2;
wire   [63:0] zext_ln662_fu_425_p1;
wire   [63:0] tmp_1_fu_429_p4;
wire   [63:0] val_fu_439_p3;
wire   [0:0] grp_fu_461_p0;
wire  signed [8:0] sext_ln18_fu_469_p1;
wire   [8:0] sub_ln18_fu_473_p2;
wire   [0:0] v_11_fu_466_p1;
wire  signed [9:0] grp_fu_491_p0;
wire   [10:0] grp_fu_491_p1;
wire   [8:0] trunc_ln19_fu_497_p1;
wire  signed [9:0] sext_ln19_1_fu_500_p1;
wire  signed [2:0] grp_fu_510_p0;
wire   [9:0] grp_fu_510_p1;
wire   [9:0] grp_fu_510_p2;
wire   [22:0] grp_fu_329_p2;
wire   [22:0] trunc_ln21_fu_520_p1;
wire   [23:0] zext_ln21_fu_524_p1;
wire  signed [23:0] sext_ln13_fu_516_p1;
wire   [31:0] trunc_ln22_fu_537_p1;
wire   [31:0] add_ln22_fu_541_p2;
wire  signed [31:0] sext_ln13_1_fu_534_p1;
reg    grp_fu_329_ap_start;
wire    grp_fu_329_ap_done;
reg    grp_fu_461_ap_start;
wire    grp_fu_461_ap_done;
reg    grp_fu_491_ap_start;
wire    grp_fu_491_ap_done;
reg    grp_fu_510_ap_start;
wire    grp_fu_510_ap_done;
reg   [45:0] ap_NS_fsm;
wire   [31:0] grp_fu_329_p10;
wire   [63:0] grp_fu_461_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'd1;
end

fn1_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1197170432),
    .din1(grp_fu_159_p1),
    .ce(1'b1),
    .dout(grp_fu_159_p2)
);

fn1_udiv_32s_11ns_23_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 23 ))
udiv_32s_11ns_23_36_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_329_ap_start),
    .done(grp_fu_329_ap_done),
    .din0(grp_fu_329_p0),
    .din1(grp_fu_329_p1),
    .ce(1'b1),
    .dout(grp_fu_329_p2)
);

fn1_udiv_1ns_64ns_1_5_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
udiv_1ns_64ns_1_5_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_461_ap_start),
    .done(grp_fu_461_ap_done),
    .din0(grp_fu_461_p0),
    .din1(sub_ln17_reg_643),
    .ce(1'b1),
    .dout(grp_fu_461_p2)
);

fn1_srem_10s_11ns_9_14_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 9 ))
srem_10s_11ns_9_14_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_491_ap_start),
    .done(grp_fu_491_ap_done),
    .din0(grp_fu_491_p0),
    .din1(grp_fu_491_p1),
    .ce(1'b1),
    .dout(grp_fu_491_p2)
);

fn1_srem_3s_10ns_10_7_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
srem_3s_10ns_10_7_seq_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_510_ap_start),
    .done(grp_fu_510_ap_done),
    .din0(grp_fu_510_p0),
    .din1(grp_fu_510_p1),
    .ce(1'b1),
    .dout(grp_fu_510_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_V_reg_573 <= data_V_fu_168_p1;
        isNeg_1_reg_583 <= add_ln341_1_fu_189_p2[32'd8];
        tmp_12_reg_578 <= tmp_12_fu_181_p1;
        ush_1_reg_588 <= ush_1_fu_213_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        dc_reg_568 <= grp_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        icmp_ln16_reg_638 <= icmp_ln16_fu_446_p2;
        sub_ln17_reg_643 <= sub_ln17_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        isNeg_reg_623 <= add_ln341_fu_353_p2[32'd8];
        tmp_10_reg_618 <= tmp_10_fu_345_p1;
        ush_reg_628 <= ush_fu_377_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_4_load_reg_558 <= p_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        result_2_reg_678 <= result_2_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        result_V_2_reg_598 <= result_V_2_fu_282_p2;
        val_1_reg_593 <= val_1_fu_275_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        srem_ln18_reg_668 <= grp_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        udiv_ln16_reg_653 <= grp_fu_461_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_329_ap_start = 1'b1;
    end else begin
        grp_fu_329_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_461_ap_start = 1'b1;
    end else begin
        grp_fu_461_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_491_ap_start = 1'b1;
    end else begin
        grp_fu_491_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_510_ap_start = 1'b1;
    end else begin
        grp_fu_510_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        p_13_ce0 = 1'b1;
    end else begin
        p_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_4_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_4_address0 = 64'd4;
    end else begin
        p_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_4_ce0 = 1'b1;
    end else begin
        p_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_305_p2 = ($signed(sext_ln20_fu_301_p1) + $signed(9'd427));

assign add_ln22_fu_541_p2 = (trunc_ln22_fu_537_p1 + 32'd1);

assign add_ln341_1_fu_189_p2 = ($signed(zext_ln341_1_fu_185_p1) + $signed(9'd385));

assign add_ln341_fu_353_p2 = ($signed(zext_ln341_fu_349_p1) + $signed(9'd385));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = ($signed(add_ln22_fu_541_p2) - $signed(sext_ln13_1_fu_534_p1));

assign data_V_fu_168_p1 = dc_reg_568;

assign grp_fu_159_p1 = p_4_load_reg_558;

assign grp_fu_329_p0 = $signed(add_ln20_fu_305_p2);

assign grp_fu_329_p1 = grp_fu_329_p10;

assign grp_fu_329_p10 = ((icmp_ln21_fu_315_p2[0:0] == 1'b1) ? 32'd712 : 32'd711);

assign grp_fu_461_p0 = grp_fu_461_p00;

assign grp_fu_461_p00 = icmp_ln16_reg_638;

assign grp_fu_491_p0 = $signed(sub_ln18_fu_473_p2);

assign grp_fu_491_p1 = ((v_11_fu_466_p1[0:0] == 1'b1) ? 11'd971 : 11'd972);

assign grp_fu_510_p0 = 10'd1022;

assign grp_fu_510_p1 = ($signed(sext_ln19_1_fu_500_p1) + $signed(10'd194));

assign icmp_ln16_fu_446_p2 = ((p_13_q0 == 32'd4294967295) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_315_p2 = ((p_6 < 32'd67) ? 1'b1 : 1'b0);

assign isNeg_1_fu_195_p3 = add_ln341_1_fu_189_p2[32'd8];

assign isNeg_fu_359_p3 = add_ln341_fu_353_p2[32'd8];

assign mantissa_1_fu_221_p4 = {{{{1'd1}, {tmp_12_reg_578}}}, {1'd0}};

assign mantissa_fu_385_p4 = {{{{1'd1}, {tmp_10_reg_618}}}, {1'd0}};

assign p_13_address0 = 64'd3;

assign p_Result_s_fu_288_p3 = data_V_reg_573[32'd31];

assign r_V_1_fu_411_p2 = zext_ln68_fu_394_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_401_p1;

assign r_V_2_fu_241_p2 = zext_ln15_fu_230_p1 >> sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_237_p1;

assign r_V_3_fu_247_p2 = zext_ln15_fu_230_p1 << sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_237_p1;

assign r_V_fu_405_p2 = zext_ln68_fu_394_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_401_p1;

assign result_2_fu_528_p2 = (zext_ln21_fu_524_p1 ^ sext_ln13_fu_516_p1);

assign result_V_2_fu_282_p2 = (8'd0 - val_1_fu_275_p3);

assign result_V_fu_295_p3 = ((p_Result_s_fu_288_p3[0:0] == 1'b1) ? result_V_2_reg_598 : val_1_reg_593);

assign sext_ln1311_1_fu_209_p1 = $signed(sub_ln1311_1_fu_203_p2);

assign sext_ln1311_fu_373_p1 = $signed(sub_ln1311_fu_367_p2);

assign sext_ln13_1_fu_534_p1 = $signed(result_2_reg_678);

assign sext_ln13_fu_516_p1 = $signed(grp_fu_510_p2);

assign sext_ln18_fu_469_p1 = $signed(p_9);

assign sext_ln19_1_fu_500_p1 = $signed(trunc_ln19_fu_497_p1);

assign sext_ln20_fu_301_p1 = $signed(result_V_fu_295_p3);

assign sh_prom_i_i_i_i_i22_cast_cast_cast_cast_fu_237_p1 = $unsigned(sh_prom_i_i_i_i_i22_cast_cast_cast_fu_234_p1);

assign sh_prom_i_i_i_i_i22_cast_cast_cast_fu_234_p1 = $signed(ush_1_reg_588);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_401_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_398_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_398_p1 = $signed(ush_reg_628);

assign sub_ln1311_1_fu_203_p2 = (8'd127 - tmp_11_fu_171_p4);

assign sub_ln1311_fu_367_p2 = (8'd127 - tmp_9_fu_335_p4);

assign sub_ln17_fu_452_p2 = (64'd420 - val_fu_439_p3);

assign sub_ln18_fu_473_p2 = ($signed(9'd0) - $signed(sext_ln18_fu_469_p1));

assign tmp_10_fu_345_p1 = p_4_q0[22:0];

assign tmp_11_fu_171_p4 = {{data_V_fu_168_p1[30:23]}};

assign tmp_12_fu_181_p1 = data_V_fu_168_p1[22:0];

assign tmp_1_fu_429_p4 = {{r_V_1_fu_411_p2[87:24]}};

assign tmp_6_fu_265_p4 = {{r_V_3_fu_247_p2[31:24]}};

assign tmp_8_fu_253_p3 = r_V_2_fu_241_p2[32'd24];

assign tmp_9_fu_335_p4 = {{p_4_q0[30:23]}};

assign tmp_fu_417_p3 = r_V_fu_405_p2[32'd24];

assign trunc_ln19_fu_497_p1 = srem_ln18_reg_668[8:0];

assign trunc_ln21_fu_520_p1 = grp_fu_329_p2[22:0];

assign trunc_ln22_fu_537_p1 = p[31:0];

assign ush_1_fu_213_p3 = ((isNeg_1_fu_195_p3[0:0] == 1'b1) ? sext_ln1311_1_fu_209_p1 : add_ln341_1_fu_189_p2);

assign ush_fu_377_p3 = ((isNeg_fu_359_p3[0:0] == 1'b1) ? sext_ln1311_fu_373_p1 : add_ln341_fu_353_p2);

assign v_11_fu_466_p1 = udiv_ln16_reg_653[0:0];

assign val_1_fu_275_p3 = ((isNeg_1_reg_583[0:0] == 1'b1) ? zext_ln662_1_fu_261_p1 : tmp_6_fu_265_p4);

assign val_fu_439_p3 = ((isNeg_reg_623[0:0] == 1'b1) ? zext_ln662_fu_425_p1 : tmp_1_fu_429_p4);

assign zext_ln15_fu_230_p1 = mantissa_1_fu_221_p4;

assign zext_ln21_fu_524_p1 = trunc_ln21_fu_520_p1;

assign zext_ln341_1_fu_185_p1 = tmp_11_fu_171_p4;

assign zext_ln341_fu_349_p1 = tmp_9_fu_335_p4;

assign zext_ln662_1_fu_261_p1 = tmp_8_fu_253_p3;

assign zext_ln662_fu_425_p1 = tmp_fu_417_p3;

assign zext_ln68_fu_394_p1 = mantissa_fu_385_p4;

endmodule //fn1
