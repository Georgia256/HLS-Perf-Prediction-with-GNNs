// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=43,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1480,HLS_SYN_LUT=3419,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_5,
        p_13,
        p_15,
        ap_return
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p;
input  [31:0] p_5;
input  [15:0] p_13;
input  [63:0] p_15;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [22:0] tmp_9_fu_154_p1;
reg   [22:0] tmp_9_reg_429;
wire   [0:0] isNeg_fu_168_p3;
reg   [0:0] isNeg_reg_434;
wire   [8:0] ush_fu_186_p3;
reg   [8:0] ush_reg_439;
wire  signed [63:0] sub_ln17_fu_271_p2;
reg  signed [63:0] sub_ln17_reg_444;
wire    ap_CS_fsm_state2;
wire  signed [63:0] xor_ln17_fu_277_p2;
reg  signed [63:0] xor_ln17_reg_449;
wire   [63:0] grp_fu_283_p2;
reg   [63:0] v_7_1_reg_454;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_129_p1;
reg   [31:0] conv9_reg_459;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_120_p2;
reg   [31:0] add_reg_464;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_125_p2;
reg   [31:0] div_reg_469;
wire    ap_CS_fsm_state34;
wire   [63:0] grp_fu_132_p1;
reg   [63:0] conv_reg_474;
wire    ap_CS_fsm_state36;
reg   [10:0] tmp_10_reg_479;
wire    ap_CS_fsm_state43;
wire   [51:0] tmp_11_fu_301_p1;
reg   [51:0] tmp_11_reg_485;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state37;
wire   [31:0] data_V_fu_140_p1;
wire   [7:0] tmp_8_fu_144_p4;
wire   [8:0] zext_ln341_fu_158_p1;
wire   [8:0] add_ln341_fu_162_p2;
wire   [7:0] sub_ln1311_fu_176_p2;
wire  signed [8:0] sext_ln1311_fu_182_p1;
wire   [24:0] mantissa_fu_194_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_207_p1;
wire   [110:0] zext_ln68_fu_203_p1;
wire   [110:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_210_p1;
wire   [110:0] r_V_fu_214_p2;
wire   [0:0] tmp_fu_226_p3;
wire   [110:0] r_V_1_fu_220_p2;
wire   [63:0] zext_ln662_fu_234_p1;
wire   [63:0] tmp_1_fu_238_p4;
wire   [16:0] shl_ln_fu_255_p3;
wire  signed [31:0] sext_ln17_fu_263_p1;
wire   [63:0] zext_ln17_fu_267_p1;
wire   [63:0] val_fu_248_p3;
wire    ap_CS_fsm_state3;
wire   [63:0] grp_fu_135_p2;
wire   [63:0] data_V_1_fu_287_p1;
wire   [53:0] mantissa_1_fu_309_p4;
wire   [11:0] zext_ln510_fu_322_p1;
wire   [11:0] add_ln510_fu_325_p2;
wire   [10:0] sub_ln1311_1_fu_339_p2;
wire   [0:0] isNeg_1_fu_331_p3;
wire  signed [11:0] sext_ln1311_1_fu_344_p1;
wire   [11:0] ush_1_fu_348_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i26_cast_cast_cast_fu_356_p1;
wire   [136:0] zext_ln68_1_fu_318_p1;
wire   [136:0] sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_360_p1;
wire   [136:0] r_V_2_fu_364_p2;
wire   [0:0] tmp_7_fu_376_p3;
wire   [15:0] trunc_ln18_fu_305_p1;
wire   [136:0] r_V_3_fu_370_p2;
wire   [15:0] zext_ln662_1_fu_384_p1;
wire   [15:0] tmp_6_fu_394_p4;
wire   [15:0] select_ln1312_fu_404_p3;
wire   [15:0] sub_ln18_fu_388_p2;
wire   [15:0] and_ln18_fu_412_p2;
reg   [43:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
end

fn1_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv9_reg_459),
    .din1(32'd1146339328),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

fn1_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_5),
    .din1(add_reg_464),
    .ce(1'b1),
    .dout(grp_fu_125_p2)
);

fn1_uitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
uitofp_64ns_32_6_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_7_1_reg_454),
    .ce(1'b1),
    .dout(grp_fu_129_p1)
);

fn1_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_reg_469),
    .ce(1'b1),
    .dout(grp_fu_132_p1)
);

fn1_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_474),
    .din1(64'd13976992769642216817),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

fn1_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln17_reg_444),
    .din1(xor_ln17_reg_449),
    .ce(1'b1),
    .dout(grp_fu_283_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_reg_464 <= grp_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv9_reg_459 <= grp_fu_129_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        conv_reg_474 <= grp_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        div_reg_469 <= grp_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        isNeg_reg_434 <= add_ln341_fu_162_p2[32'd8];
        tmp_9_reg_429 <= tmp_9_fu_154_p1;
        ush_reg_439 <= ush_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln17_reg_444 <= sub_ln17_fu_271_p2;
        xor_ln17_reg_449 <= xor_ln17_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        tmp_10_reg_479 <= {{data_V_1_fu_287_p1[62:52]}};
        tmp_11_reg_485 <= tmp_11_fu_301_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v_7_1_reg_454 <= grp_fu_283_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln341_fu_162_p2 = ($signed(zext_ln341_fu_158_p1) + $signed(9'd385));

assign add_ln510_fu_325_p2 = ($signed(zext_ln510_fu_322_p1) + $signed(12'd3073));

assign and_ln18_fu_412_p2 = (sub_ln18_fu_388_p2 & select_ln1312_fu_404_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_return = (16'd65535 ^ and_ln18_fu_412_p2);

assign data_V_1_fu_287_p1 = grp_fu_135_p2;

assign data_V_fu_140_p1 = p_5;

assign isNeg_1_fu_331_p3 = add_ln510_fu_325_p2[32'd11];

assign isNeg_fu_168_p3 = add_ln341_fu_162_p2[32'd8];

assign mantissa_1_fu_309_p4 = {{{{1'd1}, {tmp_11_reg_485}}}, {1'd0}};

assign mantissa_fu_194_p4 = {{{{1'd1}, {tmp_9_reg_429}}}, {1'd0}};

assign r_V_1_fu_220_p2 = zext_ln68_fu_203_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_210_p1;

assign r_V_2_fu_364_p2 = zext_ln68_1_fu_318_p1 >> sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_360_p1;

assign r_V_3_fu_370_p2 = zext_ln68_1_fu_318_p1 << sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_360_p1;

assign r_V_fu_214_p2 = zext_ln68_fu_203_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_210_p1;

assign select_ln1312_fu_404_p3 = ((isNeg_1_fu_331_p3[0:0] == 1'b1) ? zext_ln662_1_fu_384_p1 : tmp_6_fu_394_p4);

assign sext_ln1311_1_fu_344_p1 = $signed(sub_ln1311_1_fu_339_p2);

assign sext_ln1311_fu_182_p1 = $signed(sub_ln1311_fu_176_p2);

assign sext_ln17_fu_263_p1 = $signed(shl_ln_fu_255_p3);

assign sh_prom_i_i_i_i_i26_cast_cast_cast_cast_fu_360_p1 = $unsigned(sh_prom_i_i_i_i_i26_cast_cast_cast_fu_356_p1);

assign sh_prom_i_i_i_i_i26_cast_cast_cast_fu_356_p1 = $signed(ush_1_fu_348_p3);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_210_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_207_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_207_p1 = $signed(ush_reg_439);

assign shl_ln_fu_255_p3 = {{p_13}, {1'd0}};

assign sub_ln1311_1_fu_339_p2 = (11'd1023 - tmp_10_reg_479);

assign sub_ln1311_fu_176_p2 = (8'd127 - tmp_8_fu_144_p4);

assign sub_ln17_fu_271_p2 = (zext_ln17_fu_267_p1 - val_fu_248_p3);

assign sub_ln18_fu_388_p2 = (16'd18736 - trunc_ln18_fu_305_p1);

assign tmp_11_fu_301_p1 = data_V_1_fu_287_p1[51:0];

assign tmp_1_fu_238_p4 = {{r_V_1_fu_220_p2[87:24]}};

assign tmp_6_fu_394_p4 = {{r_V_3_fu_370_p2[68:53]}};

assign tmp_7_fu_376_p3 = r_V_2_fu_364_p2[32'd53];

assign tmp_8_fu_144_p4 = {{data_V_fu_140_p1[30:23]}};

assign tmp_9_fu_154_p1 = data_V_fu_140_p1[22:0];

assign tmp_fu_226_p3 = r_V_fu_214_p2[32'd24];

assign trunc_ln18_fu_305_p1 = p[15:0];

assign ush_1_fu_348_p3 = ((isNeg_1_fu_331_p3[0:0] == 1'b1) ? sext_ln1311_1_fu_344_p1 : add_ln510_fu_325_p2);

assign ush_fu_186_p3 = ((isNeg_fu_168_p3[0:0] == 1'b1) ? sext_ln1311_fu_182_p1 : add_ln341_fu_162_p2);

assign val_fu_248_p3 = ((isNeg_reg_434[0:0] == 1'b1) ? zext_ln662_fu_234_p1 : tmp_1_fu_238_p4);

assign xor_ln17_fu_277_p2 = (p_15 ^ 64'd18446744073709551615);

assign zext_ln17_fu_267_p1 = $unsigned(sext_ln17_fu_263_p1);

assign zext_ln341_fu_158_p1 = tmp_8_fu_144_p4;

assign zext_ln510_fu_322_p1 = tmp_10_reg_479;

assign zext_ln662_1_fu_384_p1 = tmp_7_fu_376_p3;

assign zext_ln662_fu_234_p1 = tmp_fu_226_p3;

assign zext_ln68_1_fu_318_p1 = mantissa_1_fu_309_p4;

assign zext_ln68_fu_203_p1 = mantissa_fu_194_p4;

endmodule //fn1
