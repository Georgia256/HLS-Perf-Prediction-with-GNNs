// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1050,HLS_SYN_LUT=1739,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_5,
        p_7,
        ap_return
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p;
input  [63:0] p_5;
input  [7:0] p_7;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_80_p2;
reg   [31:0] reg_96;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire   [63:0] xor_ln15_fu_116_p2;
reg   [63:0] xor_ln15_reg_280;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_93_p1;
reg   [31:0] conv5_reg_285;
wire    ap_CS_fsm_state19;
wire   [29:0] xor_ln13_fu_126_p2;
reg   [29:0] xor_ln13_reg_290;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_85_p2;
reg   [31:0] mul_reg_300;
wire   [31:0] grp_fu_90_p1;
reg   [31:0] conv2_reg_305;
reg   [0:0] p_Result_s_reg_310;
wire    ap_CS_fsm_state34;
wire   [22:0] tmp_3_fu_158_p1;
reg   [22:0] tmp_3_reg_315;
wire   [0:0] isNeg_fu_172_p3;
reg   [0:0] isNeg_reg_320;
wire   [8:0] ush_fu_190_p3;
reg   [8:0] ush_reg_325;
wire   [15:0] val_fu_252_p3;
reg   [15:0] val_reg_330;
wire    ap_CS_fsm_state35;
reg   [31:0] grp_fu_80_p0;
reg   [31:0] grp_fu_80_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state20;
wire  signed [31:0] grp_fu_90_p0;
wire    ap_CS_fsm_state14;
wire  signed [31:0] add_ln14_fu_101_p0;
wire   [17:0] grp_fu_107_p0;
wire   [31:0] grp_fu_107_p1;
wire  signed [31:0] sext_ln15_fu_113_p0;
wire  signed [63:0] sext_ln15_fu_113_p1;
wire   [29:0] grp_fu_107_p2;
wire   [29:0] trunc_ln13_fu_122_p1;
wire   [31:0] data_V_fu_136_p1;
wire   [7:0] tmp_2_fu_148_p4;
wire   [8:0] zext_ln341_fu_162_p1;
wire   [8:0] add_ln341_fu_166_p2;
wire   [7:0] sub_ln1311_fu_180_p2;
wire  signed [8:0] sext_ln1311_fu_186_p1;
wire   [24:0] mantissa_fu_198_p4;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_211_p1;
wire   [62:0] zext_ln15_fu_207_p1;
wire   [62:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_214_p1;
wire   [62:0] r_V_fu_218_p2;
wire   [0:0] tmp_fu_230_p3;
wire   [62:0] r_V_1_fu_224_p2;
wire   [15:0] zext_ln662_fu_238_p1;
wire   [15:0] tmp_1_fu_242_p4;
wire    ap_CS_fsm_state36;
wire   [15:0] result_V_2_fu_259_p2;
reg   [1:0] grp_fu_80_opcode;
reg    grp_fu_107_ap_start;
wire    grp_fu_107_ap_done;
reg   [35:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
end

fn1_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_80_p0),
    .din1(grp_fu_80_p1),
    .opcode(grp_fu_80_opcode),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

fn1_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv5_reg_285),
    .din1(32'd1135319875),
    .ce(1'b1),
    .dout(grp_fu_85_p2)
);

fn1_uitofp_32s_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32s_32_6_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_90_p0),
    .ce(1'b1),
    .dout(grp_fu_90_p1)
);

fn1_sitofp_64ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
sitofp_64ns_32_6_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln15_reg_280),
    .ce(1'b1),
    .dout(grp_fu_93_p1)
);

fn1_srem_18ns_32ns_30_22_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 30 ))
srem_18ns_32ns_30_22_seq_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_107_ap_start),
    .done(grp_fu_107_ap_done),
    .din0(grp_fu_107_p0),
    .din1(grp_fu_107_p1),
    .ce(1'b1),
    .dout(grp_fu_107_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        conv2_reg_305 <= grp_fu_90_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv5_reg_285 <= grp_fu_93_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        isNeg_reg_320 <= add_ln341_fu_166_p2[32'd8];
        p_Result_s_reg_310 <= data_V_fu_136_p1[32'd31];
        tmp_3_reg_315 <= tmp_3_fu_158_p1;
        ush_reg_325 <= ush_fu_190_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        mul_reg_300 <= grp_fu_85_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_96 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        val_reg_330 <= val_fu_252_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        xor_ln13_reg_290 <= xor_ln13_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xor_ln15_reg_280 <= xor_ln15_fu_116_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_107_ap_start = 1'b1;
    end else begin
        grp_fu_107_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_80_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_80_opcode = 2'd0;
    end else begin
        grp_fu_80_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_80_p0 = conv2_reg_305;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_80_p0 = mul_reg_300;
    end else begin
        grp_fu_80_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_80_p1 = reg_96;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_80_p1 = 32'd0;
    end else begin
        grp_fu_80_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_101_p0 = p;

assign add_ln341_fu_166_p2 = ($signed(zext_ln341_fu_162_p1) + $signed(9'd385));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_return = ((p_Result_s_reg_310[0:0] == 1'b1) ? result_V_2_fu_259_p2 : val_reg_330);

assign data_V_fu_136_p1 = reg_96;

assign grp_fu_107_p0 = 32'd47207;

assign grp_fu_107_p1 = ($signed(add_ln14_fu_101_p0) + $signed(32'd240));

assign grp_fu_90_p0 = $signed(xor_ln13_reg_290);

assign isNeg_fu_172_p3 = add_ln341_fu_166_p2[32'd8];

assign mantissa_fu_198_p4 = {{{{1'd1}, {tmp_3_reg_315}}}, {1'd0}};

assign r_V_1_fu_224_p2 = zext_ln15_fu_207_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_214_p1;

assign r_V_fu_218_p2 = zext_ln15_fu_207_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_214_p1;

assign result_V_2_fu_259_p2 = (16'd0 - val_reg_330);

assign sext_ln1311_fu_186_p1 = $signed(sub_ln1311_fu_180_p2);

assign sext_ln15_fu_113_p0 = p;

assign sext_ln15_fu_113_p1 = sext_ln15_fu_113_p0;

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_214_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_211_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_211_p1 = $signed(ush_reg_325);

assign sub_ln1311_fu_180_p2 = (8'd127 - tmp_2_fu_148_p4);

assign tmp_1_fu_242_p4 = {{r_V_1_fu_224_p2[39:24]}};

assign tmp_2_fu_148_p4 = {{data_V_fu_136_p1[30:23]}};

assign tmp_3_fu_158_p1 = data_V_fu_136_p1[22:0];

assign tmp_fu_230_p3 = r_V_fu_218_p2[32'd24];

assign trunc_ln13_fu_122_p1 = grp_fu_107_p2[29:0];

assign ush_fu_190_p3 = ((isNeg_fu_172_p3[0:0] == 1'b1) ? sext_ln1311_fu_186_p1 : add_ln341_fu_166_p2);

assign val_fu_252_p3 = ((isNeg_reg_320[0:0] == 1'b1) ? zext_ln662_fu_238_p1 : tmp_1_fu_242_p4);

assign xor_ln13_fu_126_p2 = (trunc_ln13_fu_122_p1 ^ 30'd593539151);

assign xor_ln15_fu_116_p2 = (sext_ln15_fu_113_p1 ^ p_5);

assign zext_ln15_fu_207_p1 = mantissa_fu_198_p4;

assign zext_ln341_fu_162_p1 = tmp_2_fu_148_p4;

assign zext_ln662_fu_238_p1 = tmp_fu_230_p3;

endmodule //fn1
