// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fn1_fn1,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.340000,HLS_SYN_LAT=80,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1003,HLS_SYN_LUT=1012,HLS_VERSION=2020_2}" *)

module fn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p,
        p_11,
        ap_return
);

parameter    ap_ST_fsm_state1 = 81'd1;
parameter    ap_ST_fsm_state2 = 81'd2;
parameter    ap_ST_fsm_state3 = 81'd4;
parameter    ap_ST_fsm_state4 = 81'd8;
parameter    ap_ST_fsm_state5 = 81'd16;
parameter    ap_ST_fsm_state6 = 81'd32;
parameter    ap_ST_fsm_state7 = 81'd64;
parameter    ap_ST_fsm_state8 = 81'd128;
parameter    ap_ST_fsm_state9 = 81'd256;
parameter    ap_ST_fsm_state10 = 81'd512;
parameter    ap_ST_fsm_state11 = 81'd1024;
parameter    ap_ST_fsm_state12 = 81'd2048;
parameter    ap_ST_fsm_state13 = 81'd4096;
parameter    ap_ST_fsm_state14 = 81'd8192;
parameter    ap_ST_fsm_state15 = 81'd16384;
parameter    ap_ST_fsm_state16 = 81'd32768;
parameter    ap_ST_fsm_state17 = 81'd65536;
parameter    ap_ST_fsm_state18 = 81'd131072;
parameter    ap_ST_fsm_state19 = 81'd262144;
parameter    ap_ST_fsm_state20 = 81'd524288;
parameter    ap_ST_fsm_state21 = 81'd1048576;
parameter    ap_ST_fsm_state22 = 81'd2097152;
parameter    ap_ST_fsm_state23 = 81'd4194304;
parameter    ap_ST_fsm_state24 = 81'd8388608;
parameter    ap_ST_fsm_state25 = 81'd16777216;
parameter    ap_ST_fsm_state26 = 81'd33554432;
parameter    ap_ST_fsm_state27 = 81'd67108864;
parameter    ap_ST_fsm_state28 = 81'd134217728;
parameter    ap_ST_fsm_state29 = 81'd268435456;
parameter    ap_ST_fsm_state30 = 81'd536870912;
parameter    ap_ST_fsm_state31 = 81'd1073741824;
parameter    ap_ST_fsm_state32 = 81'd2147483648;
parameter    ap_ST_fsm_state33 = 81'd4294967296;
parameter    ap_ST_fsm_state34 = 81'd8589934592;
parameter    ap_ST_fsm_state35 = 81'd17179869184;
parameter    ap_ST_fsm_state36 = 81'd34359738368;
parameter    ap_ST_fsm_state37 = 81'd68719476736;
parameter    ap_ST_fsm_state38 = 81'd137438953472;
parameter    ap_ST_fsm_state39 = 81'd274877906944;
parameter    ap_ST_fsm_state40 = 81'd549755813888;
parameter    ap_ST_fsm_state41 = 81'd1099511627776;
parameter    ap_ST_fsm_state42 = 81'd2199023255552;
parameter    ap_ST_fsm_state43 = 81'd4398046511104;
parameter    ap_ST_fsm_state44 = 81'd8796093022208;
parameter    ap_ST_fsm_state45 = 81'd17592186044416;
parameter    ap_ST_fsm_state46 = 81'd35184372088832;
parameter    ap_ST_fsm_state47 = 81'd70368744177664;
parameter    ap_ST_fsm_state48 = 81'd140737488355328;
parameter    ap_ST_fsm_state49 = 81'd281474976710656;
parameter    ap_ST_fsm_state50 = 81'd562949953421312;
parameter    ap_ST_fsm_state51 = 81'd1125899906842624;
parameter    ap_ST_fsm_state52 = 81'd2251799813685248;
parameter    ap_ST_fsm_state53 = 81'd4503599627370496;
parameter    ap_ST_fsm_state54 = 81'd9007199254740992;
parameter    ap_ST_fsm_state55 = 81'd18014398509481984;
parameter    ap_ST_fsm_state56 = 81'd36028797018963968;
parameter    ap_ST_fsm_state57 = 81'd72057594037927936;
parameter    ap_ST_fsm_state58 = 81'd144115188075855872;
parameter    ap_ST_fsm_state59 = 81'd288230376151711744;
parameter    ap_ST_fsm_state60 = 81'd576460752303423488;
parameter    ap_ST_fsm_state61 = 81'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 81'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 81'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 81'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 81'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 81'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 81'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 81'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 81'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 81'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 81'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 81'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 81'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 81'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 81'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 81'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 81'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 81'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 81'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 81'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 81'd1208925819614629174706176;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p;
input  [15:0] p_11;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [80:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] grp_fu_60_p2;
reg   [8:0] urem_ln20_reg_112;
wire    ap_CS_fsm_state12;
wire   [15:0] mul_ln20_fu_78_p2;
reg   [15:0] mul_ln20_reg_117;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire  signed [7:0] sext_ln18_fu_46_p0;
wire   [7:0] v_4_fu_42_p1;
wire  signed [8:0] sext_ln18_fu_46_p1;
wire   [7:0] grp_fu_60_p0;
wire   [8:0] grp_fu_60_p1;
wire  signed [7:0] v_fu_66_p0;
wire  signed [7:0] v_fu_66_p2;
wire   [8:0] mul_ln20_fu_78_p0;
wire  signed [63:0] grp_fu_87_p0;
wire   [16:0] grp_fu_87_p1;
wire   [7:0] grp_fu_87_p2;
wire    ap_CS_fsm_state81;
reg    grp_fu_60_ap_start;
wire    grp_fu_60_ap_done;
reg    grp_fu_87_ap_start;
wire    grp_fu_87_ap_done;
reg   [80:0] ap_NS_fsm;
wire   [8:0] grp_fu_60_p00;
wire   [15:0] mul_ln20_fu_78_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 81'd1;
end

fn1_urem_8ns_9ns_9_12_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
urem_8ns_9ns_9_12_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_60_ap_start),
    .done(grp_fu_60_ap_done),
    .din0(grp_fu_60_p0),
    .din1(grp_fu_60_p1),
    .ce(1'b1),
    .dout(grp_fu_60_p2)
);

fn1_mul_9ns_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_9ns_8s_16_1_1_U2(
    .din0(mul_ln20_fu_78_p0),
    .din1(v_fu_66_p2),
    .dout(mul_ln20_fu_78_p2)
);

fn1_urem_64s_17ns_8_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 8 ))
urem_64s_17ns_8_68_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_87_ap_start),
    .done(grp_fu_87_ap_done),
    .din0(grp_fu_87_p0),
    .din1(grp_fu_87_p1),
    .ce(1'b1),
    .dout(grp_fu_87_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul_ln20_reg_117 <= mul_ln20_fu_78_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        urem_ln20_reg_112 <= grp_fu_60_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_60_ap_start = 1'b1;
    end else begin
        grp_fu_60_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_87_ap_start = 1'b1;
    end else begin
        grp_fu_87_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_return = grp_fu_87_p2[7:0];

assign grp_fu_60_p0 = grp_fu_60_p00;

assign grp_fu_60_p00 = v_4_fu_42_p1;

assign grp_fu_60_p1 = ($signed(sext_ln18_fu_46_p1) + $signed(9'd307));

assign grp_fu_87_p0 = $signed(mul_ln20_reg_117);

assign grp_fu_87_p1 = 64'd53147;

assign mul_ln20_fu_78_p0 = mul_ln20_fu_78_p00;

assign mul_ln20_fu_78_p00 = urem_ln20_reg_112;

assign sext_ln18_fu_46_p0 = p;

assign sext_ln18_fu_46_p1 = sext_ln18_fu_46_p0;

assign v_4_fu_42_p1 = p_11[7:0];

assign v_fu_66_p0 = p;

assign v_fu_66_p2 = (v_fu_66_p0 ^ 8'd255);

endmodule //fn1
